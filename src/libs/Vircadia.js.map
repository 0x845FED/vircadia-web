{"version":3,"file":"Vircadia.js","mappings":"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AAiB7jB,EAAK2K,YAItB,CACHmZ,WAAAA,EAAYC,cAAAA,EAAeE,QAAAA,EAASC,WAAAA,EAAYC,eAAAA,EAAgBE,gBAAAA,EAAiBE,wBAAAA,EACjFC,yBAAAA,EAA0BC,kCAAAA,EAAmCC,cAAAA,EAAeC,MAAAA,KCzFxF,EA7Ca,IAAI,MAkBbf,KAAK5jB,GAKD,IAAI6jB,EAAe,EAEnB,MAAMqB,EAAWllB,EAAKskB,SAAST,GAC/BA,GAAgB,EAChB,MAAMsB,EAAYnlB,EAAK2jB,aAAaE,EAAc,iBAClDA,GAAgB,EAChB,MAAMuB,EAAeplB,EAAK2jB,aAAaE,EAAc,iBAOrD,OANAA,GAAgB,EAIhB,EAAOA,IAAiB7jB,EAAK2K,WAAY,+CAElC,CACHua,SAAAA,EACAC,UAAAA,EACAC,aAAAA,KCzCZ,IAAWC,GAAX,SAAWA,GACP,yBACA,mCACA,+BACA,mBACA,6BACA,+BACA,+BACA,iCACA,+BACA,qDACA,0DACA,wCACA,4CACA,8CACA,8CACA,4CACA,wDACA,0CACA,4CACA,sDACA,4DACA,sDACA,4DACA,wCACA,kCACA,0CACA,0CACA,wDACA,8BACA,wCACA,8CACA,oDACA,0DACA,sCACA,wCACA,4BACA,4CACA,wCACA,gDACA,0BACA,oCACA,gCACA,kCACA,8BACA,kCACA,gCACA,kEACA,sDACA,wCACA,4BACA,sCACA,kCACA,4CACA,oCACA,8CACA,0DACA,0DACA,oCACA,8CACA,kDACA,4DACA,sDACA,gEACA,sDACA,oDACA,kDACA,4CACA,0CACA,0CACA,kDACA,sDACA,kDACA,kCACA,wDACA,4CACA,sDACA,gEACA,4DACA,sCACA,sDACA,kDACA,sDACA,sDACA,0EACA,8EACA,sDACA,gEACA,4DACA,oDACA,4DACA,0EACA,gDACA,wDACA,8DACA,0DACA,sDACA,kDACA,8CACA,kCACA,8EACA,6CACA,6CACA,mDACA,qCACA,iDACA,2CAEA,mCA5GJ,CAAWA,IAAAA,EAAe,KAmQ1B,MAAMC,EAAa,IAAI,MAIVrE,QAAU,EACVsE,aAAe,EACfC,WAAa,EA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","sources":["webpack://@vircadia/web-sdk/./node_modules/crypto-js/aes.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/cipher-core.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/core.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/enc-base64.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/enc-base64url.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/enc-utf16.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/evpkdf.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/format-hex.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/hmac.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/index.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/lib-typedarrays.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/md5.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/mode-cfb.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/mode-ctr-gladman.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/mode-ctr.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/mode-ecb.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/mode-ofb.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/pad-ansix923.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/pad-iso10126.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/pad-iso97971.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/pad-nopadding.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/pad-zeropadding.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/pbkdf2.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/rabbit-legacy.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/rabbit.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/rc4.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/ripemd160.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/sha1.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/sha224.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/sha256.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/sha3.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/sha384.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/sha512.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/tripledes.js","webpack://@vircadia/web-sdk/./node_modules/crypto-js/x64-core.js","webpack://@vircadia/web-sdk/./src/domain/worklets/AudioInputProcessor.ts","webpack://@vircadia/web-sdk/./src/domain/worklets/AudioOutputProcessor.ts","webpack://@vircadia/web-sdk/webpack/bootstrap","webpack://@vircadia/web-sdk/webpack/runtime/compat get default export","webpack://@vircadia/web-sdk/webpack/runtime/define property getters","webpack://@vircadia/web-sdk/webpack/runtime/global","webpack://@vircadia/web-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@vircadia/web-sdk/webpack/runtime/publicPath","webpack://@vircadia/web-sdk/./src/domain/shared/assert.ts","webpack://@vircadia/web-sdk/./src/domain/shared/Signal.ts","webpack://@vircadia/web-sdk/./src/domain/shared/Uuid.ts","webpack://@vircadia/web-sdk/./src/domain/networking/AddressManager.ts","webpack://@vircadia/web-sdk/./src/domain/networking/SocketType.ts","webpack://@vircadia/web-sdk/./src/domain/networking/SockAddr.ts","webpack://@vircadia/web-sdk/./src/domain/networking/NodePermissions.ts","webpack://@vircadia/web-sdk/./src/domain/networking/udt/UDT.ts","webpack://@vircadia/web-sdk/./src/domain/shared/DataViewExtensions.ts","webpack://@vircadia/web-sdk/./src/domain/networking/packets/DomainList.ts","webpack://@vircadia/web-sdk/./src/domain/networking/packets/Ping.ts","webpack://@vircadia/web-sdk/./src/domain/networking/udt/PacketHeaders.ts","webpack://@vircadia/web-sdk/./src/domain/networking/HMACAuth.ts","webpack://@vircadia/web-sdk/./src/domain/networking/NodeType.ts","webpack://@vircadia/web-sdk/./src/domain/networking/Node.ts","webpack://@vircadia/web-sdk/./src/domain/networking/NetworkPeer.ts","webpack://@vircadia/web-sdk/./src/domain/networking/MessageData.ts","webpack://@vircadia/web-sdk/./src/domain/networking/udt/BasePacket.ts","webpack://@vircadia/web-sdk/./src/domain/networking/udt/Packet.ts","webpack://@vircadia/web-sdk/./src/domain/networking/NLPacket.ts","webpack://@vircadia/web-sdk/./src/domain/networking/packets/PingReply.ts","webpack://@vircadia/web-sdk/./src/domain/audio/AudioConstants.ts","webpack://@vircadia/web-sdk/./src/domain/networking/packets/PacketScribe.ts","webpack://@vircadia/web-sdk/./src/domain/networking/packets/MixedAudio.ts","webpack://@vircadia/web-sdk/./src/domain/networking/packets/MicrophoneAudioNoEcho.ts","webpack://@vircadia/web-sdk/./src/domain/networking/packets/SilentAudioFrame.ts","webpack://@vircadia/web-sdk/./src/domain/networking/packets/DomainListRequest.ts","webpack://@vircadia/web-sdk/./src/domain/networking/packets/DomainConnectionDenied.ts","webpack://@vircadia/web-sdk/./src/domain/networking/packets/DomainConnectRequest.ts","webpack://@vircadia/web-sdk/./src/domain/networking/packets/DomainDisconnectRequest.ts","webpack://@vircadia/web-sdk/./src/domain/networking/packets/DomainServerRemovedNode.ts","webpack://@vircadia/web-sdk/./src/domain/networking/packets/NegotiateAudioFormat.ts","webpack://@vircadia/web-sdk/./src/domain/networking/packets/SelectedAudioFormat.ts","webpack://@vircadia/web-sdk/./src/domain/networking/DomainHandler.ts","webpack://@vircadia/web-sdk/./src/domain/networking/FingerprintUtils.ts","webpack://@vircadia/web-sdk/./src/domain/shared/ContextManager.ts","webpack://@vircadia/web-sdk/./src/domain/networking/PacketReceiver.ts","webpack://@vircadia/web-sdk/./src/domain/networking/ReceivedMessage.ts","webpack://@vircadia/web-sdk/./src/domain/networking/webrtc/WebRTCSignalingChannel.ts","webpack://@vircadia/web-sdk/./src/domain/networking/webrtc/WebRTCDataChannel.ts","webpack://@vircadia/web-sdk/./src/domain/networking/webrtc/WebRTCSocket.ts","webpack://@vircadia/web-sdk/./src/domain/networking/udt/Socket.ts","webpack://@vircadia/web-sdk/./src/domain/networking/LimitedNodeList.ts","webpack://@vircadia/web-sdk/./src/domain/networking/NodeList.ts","webpack://@vircadia/web-sdk/./src/DomainServer.ts","webpack://@vircadia/web-sdk/./src/domain/AssignmentClient.ts","webpack://@vircadia/web-sdk/./src/domain/audio/AudioOutput.ts","webpack://@vircadia/web-sdk/./src/domain/audio-client/AudioClient.ts","webpack://@vircadia/web-sdk/./src/domain/audio/AudioInput.ts","webpack://@vircadia/web-sdk/./src/domain/audio/InboundAudioStream.ts","webpack://@vircadia/web-sdk/./src/AudioMixer.ts","webpack://@vircadia/web-sdk/./src/AvatarMixer.ts","webpack://@vircadia/web-sdk/./src/MessageMixer.ts","webpack://@vircadia/web-sdk/./src/Vircadia.ts"],"sourcesContent":[";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var BlockCipher = C_lib.BlockCipher;\n\t    var C_algo = C.algo;\n\n\t    // Lookup tables\n\t    var SBOX = [];\n\t    var INV_SBOX = [];\n\t    var SUB_MIX_0 = [];\n\t    var SUB_MIX_1 = [];\n\t    var SUB_MIX_2 = [];\n\t    var SUB_MIX_3 = [];\n\t    var INV_SUB_MIX_0 = [];\n\t    var INV_SUB_MIX_1 = [];\n\t    var INV_SUB_MIX_2 = [];\n\t    var INV_SUB_MIX_3 = [];\n\n\t    // Compute lookup tables\n\t    (function () {\n\t        // Compute double table\n\t        var d = [];\n\t        for (var i = 0; i < 256; i++) {\n\t            if (i < 128) {\n\t                d[i] = i << 1;\n\t            } else {\n\t                d[i] = (i << 1) ^ 0x11b;\n\t            }\n\t        }\n\n\t        // Walk GF(2^8)\n\t        var x = 0;\n\t        var xi = 0;\n\t        for (var i = 0; i < 256; i++) {\n\t            // Compute sbox\n\t            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n\t            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n\t            SBOX[x] = sx;\n\t            INV_SBOX[sx] = x;\n\n\t            // Compute multiplication\n\t            var x2 = d[x];\n\t            var x4 = d[x2];\n\t            var x8 = d[x4];\n\n\t            // Compute sub bytes, mix columns tables\n\t            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n\t            SUB_MIX_0[x] = (t << 24) | (t >>> 8);\n\t            SUB_MIX_1[x] = (t << 16) | (t >>> 16);\n\t            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);\n\t            SUB_MIX_3[x] = t;\n\n\t            // Compute inv sub bytes, inv mix columns tables\n\t            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n\t            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);\n\t            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);\n\t            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);\n\t            INV_SUB_MIX_3[sx] = t;\n\n\t            // Compute next counter\n\t            if (!x) {\n\t                x = xi = 1;\n\t            } else {\n\t                x = x2 ^ d[d[d[x8 ^ x2]]];\n\t                xi ^= d[d[xi]];\n\t            }\n\t        }\n\t    }());\n\n\t    // Precomputed Rcon lookup\n\t    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\n\t    /**\n\t     * AES block cipher algorithm.\n\t     */\n\t    var AES = C_algo.AES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            var t;\n\n\t            // Skip reset of nRounds has been set before and key did not change\n\t            if (this._nRounds && this._keyPriorReset === this._key) {\n\t                return;\n\t            }\n\n\t            // Shortcuts\n\t            var key = this._keyPriorReset = this._key;\n\t            var keyWords = key.words;\n\t            var keySize = key.sigBytes / 4;\n\n\t            // Compute number of rounds\n\t            var nRounds = this._nRounds = keySize + 6;\n\n\t            // Compute number of key schedule rows\n\t            var ksRows = (nRounds + 1) * 4;\n\n\t            // Compute key schedule\n\t            var keySchedule = this._keySchedule = [];\n\t            for (var ksRow = 0; ksRow < ksRows; ksRow++) {\n\t                if (ksRow < keySize) {\n\t                    keySchedule[ksRow] = keyWords[ksRow];\n\t                } else {\n\t                    t = keySchedule[ksRow - 1];\n\n\t                    if (!(ksRow % keySize)) {\n\t                        // Rot word\n\t                        t = (t << 8) | (t >>> 24);\n\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\n\t                        // Mix Rcon\n\t                        t ^= RCON[(ksRow / keySize) | 0] << 24;\n\t                    } else if (keySize > 6 && ksRow % keySize == 4) {\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\t                    }\n\n\t                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n\t                }\n\t            }\n\n\t            // Compute inv key schedule\n\t            var invKeySchedule = this._invKeySchedule = [];\n\t            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n\t                var ksRow = ksRows - invKsRow;\n\n\t                if (invKsRow % 4) {\n\t                    var t = keySchedule[ksRow];\n\t                } else {\n\t                    var t = keySchedule[ksRow - 4];\n\t                }\n\n\t                if (invKsRow < 4 || ksRow <= 4) {\n\t                    invKeySchedule[invKsRow] = t;\n\t                } else {\n\t                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^\n\t                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n\t                }\n\t            }\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            // Swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\n\t            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n\n\t            // Inv swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\t        },\n\n\t        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n\t            // Shortcut\n\t            var nRounds = this._nRounds;\n\n\t            // Get input, add round key\n\t            var s0 = M[offset]     ^ keySchedule[0];\n\t            var s1 = M[offset + 1] ^ keySchedule[1];\n\t            var s2 = M[offset + 2] ^ keySchedule[2];\n\t            var s3 = M[offset + 3] ^ keySchedule[3];\n\n\t            // Key schedule row counter\n\t            var ksRow = 4;\n\n\t            // Rounds\n\t            for (var round = 1; round < nRounds; round++) {\n\t                // Shift rows, sub bytes, mix columns, add round key\n\t                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];\n\t                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];\n\t                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];\n\t                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];\n\n\t                // Update state\n\t                s0 = t0;\n\t                s1 = t1;\n\t                s2 = t2;\n\t                s3 = t3;\n\t            }\n\n\t            // Shift rows, sub bytes, add round key\n\t            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n\n\t            // Set output\n\t            M[offset]     = t0;\n\t            M[offset + 1] = t1;\n\t            M[offset + 2] = t2;\n\t            M[offset + 3] = t3;\n\t        },\n\n\t        keySize: 256/32\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.AES = BlockCipher._createHelper(AES);\n\t}());\n\n\n\treturn CryptoJS.AES;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./evpkdf\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./evpkdf\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher core components.\n\t */\n\tCryptoJS.lib.Cipher || (function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var Base64 = C_enc.Base64;\n\t    var C_algo = C.algo;\n\t    var EvpKDF = C_algo.EvpKDF;\n\n\t    /**\n\t     * Abstract base cipher template.\n\t     *\n\t     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n\t     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n\t     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n\t     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n\t     */\n\t    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {WordArray} iv The IV to use for this operation.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Creates this cipher in encryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createEncryptor: function (key, cfg) {\n\t            return this.create(this._ENC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Creates this cipher in decryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createDecryptor: function (key, cfg) {\n\t            return this.create(this._DEC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created cipher.\n\t         *\n\t         * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n\t         */\n\t        init: function (xformMode, key, cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Store transform mode and key\n\t            this._xformMode = xformMode;\n\t            this._key = key;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this cipher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     cipher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-cipher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Adds data to be encrypted or decrypted.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.process('data');\n\t         *     var encrypted = cipher.process(wordArray);\n\t         */\n\t        process: function (dataUpdate) {\n\t            // Append\n\t            this._append(dataUpdate);\n\n\t            // Process available blocks\n\t            return this._process();\n\t        },\n\n\t        /**\n\t         * Finalizes the encryption or decryption process.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after final processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.finalize();\n\t         *     var encrypted = cipher.finalize('data');\n\t         *     var encrypted = cipher.finalize(wordArray);\n\t         */\n\t        finalize: function (dataUpdate) {\n\t            // Final data update\n\t            if (dataUpdate) {\n\t                this._append(dataUpdate);\n\t            }\n\n\t            // Perform concrete-cipher logic\n\t            var finalProcessedData = this._doFinalize();\n\n\t            return finalProcessedData;\n\t        },\n\n\t        keySize: 128/32,\n\n\t        ivSize: 128/32,\n\n\t        _ENC_XFORM_MODE: 1,\n\n\t        _DEC_XFORM_MODE: 2,\n\n\t        /**\n\t         * Creates shortcut functions to a cipher's object interface.\n\t         *\n\t         * @param {Cipher} cipher The cipher to create a helper for.\n\t         *\n\t         * @return {Object} An object with encrypt and decrypt shortcut functions.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n\t         */\n\t        _createHelper: (function () {\n\t            function selectCipherStrategy(key) {\n\t                if (typeof key == 'string') {\n\t                    return PasswordBasedCipher;\n\t                } else {\n\t                    return SerializableCipher;\n\t                }\n\t            }\n\n\t            return function (cipher) {\n\t                return {\n\t                    encrypt: function (message, key, cfg) {\n\t                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n\t                    },\n\n\t                    decrypt: function (ciphertext, key, cfg) {\n\t                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n\t                    }\n\t                };\n\t            };\n\t        }())\n\t    });\n\n\t    /**\n\t     * Abstract base stream cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n\t     */\n\t    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n\t        _doFinalize: function () {\n\t            // Process partial blocks\n\t            var finalProcessedBlocks = this._process(!!'flush');\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 1\n\t    });\n\n\t    /**\n\t     * Mode namespace.\n\t     */\n\t    var C_mode = C.mode = {};\n\n\t    /**\n\t     * Abstract base block cipher mode template.\n\t     */\n\t    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n\t        /**\n\t         * Creates this mode for encryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n\t         */\n\t        createEncryptor: function (cipher, iv) {\n\t            return this.Encryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Creates this mode for decryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n\t         */\n\t        createDecryptor: function (cipher, iv) {\n\t            return this.Decryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created mode.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n\t         */\n\t        init: function (cipher, iv) {\n\t            this._cipher = cipher;\n\t            this._iv = iv;\n\t        }\n\t    });\n\n\t    /**\n\t     * Cipher Block Chaining mode.\n\t     */\n\t    var CBC = C_mode.CBC = (function () {\n\t        /**\n\t         * Abstract base CBC mode.\n\t         */\n\t        var CBC = BlockCipherMode.extend();\n\n\t        /**\n\t         * CBC encryptor.\n\t         */\n\t        CBC.Encryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // XOR and encrypt\n\t                xorBlock.call(this, words, offset, blockSize);\n\t                cipher.encryptBlock(words, offset);\n\n\t                // Remember this block to use with next block\n\t                this._prevBlock = words.slice(offset, offset + blockSize);\n\t            }\n\t        });\n\n\t        /**\n\t         * CBC decryptor.\n\t         */\n\t        CBC.Decryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // Remember this block to use with next block\n\t                var thisBlock = words.slice(offset, offset + blockSize);\n\n\t                // Decrypt and XOR\n\t                cipher.decryptBlock(words, offset);\n\t                xorBlock.call(this, words, offset, blockSize);\n\n\t                // This block becomes the previous block\n\t                this._prevBlock = thisBlock;\n\t            }\n\t        });\n\n\t        function xorBlock(words, offset, blockSize) {\n\t            var block;\n\n\t            // Shortcut\n\t            var iv = this._iv;\n\n\t            // Choose mixing block\n\t            if (iv) {\n\t                block = iv;\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            } else {\n\t                block = this._prevBlock;\n\t            }\n\n\t            // XOR blocks\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= block[i];\n\t            }\n\t        }\n\n\t        return CBC;\n\t    }());\n\n\t    /**\n\t     * Padding namespace.\n\t     */\n\t    var C_pad = C.pad = {};\n\n\t    /**\n\t     * PKCS #5/7 padding strategy.\n\t     */\n\t    var Pkcs7 = C_pad.Pkcs7 = {\n\t        /**\n\t         * Pads data using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to pad.\n\t         * @param {number} blockSize The multiple that the data should be padded to.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n\t         */\n\t        pad: function (data, blockSize) {\n\t            // Shortcut\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count padding bytes\n\t            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n\t            // Create padding word\n\t            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\n\n\t            // Create padding\n\t            var paddingWords = [];\n\t            for (var i = 0; i < nPaddingBytes; i += 4) {\n\t                paddingWords.push(paddingWord);\n\t            }\n\t            var padding = WordArray.create(paddingWords, nPaddingBytes);\n\n\t            // Add padding\n\t            data.concat(padding);\n\t        },\n\n\t        /**\n\t         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to unpad.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n\t         */\n\t        unpad: function (data) {\n\t            // Get number of padding bytes from last byte\n\t            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t            // Remove padding\n\t            data.sigBytes -= nPaddingBytes;\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract base block cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n\t     */\n\t    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Mode} mode The block mode to use. Default: CBC\n\t         * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n\t         */\n\t        cfg: Cipher.cfg.extend({\n\t            mode: CBC,\n\t            padding: Pkcs7\n\t        }),\n\n\t        reset: function () {\n\t            var modeCreator;\n\n\t            // Reset cipher\n\t            Cipher.reset.call(this);\n\n\t            // Shortcuts\n\t            var cfg = this.cfg;\n\t            var iv = cfg.iv;\n\t            var mode = cfg.mode;\n\n\t            // Reset block mode\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                modeCreator = mode.createEncryptor;\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                modeCreator = mode.createDecryptor;\n\t                // Keep at least one block in the buffer for unpadding\n\t                this._minBufferSize = 1;\n\t            }\n\n\t            if (this._mode && this._mode.__creator == modeCreator) {\n\t                this._mode.init(this, iv && iv.words);\n\t            } else {\n\t                this._mode = modeCreator.call(mode, this, iv && iv.words);\n\t                this._mode.__creator = modeCreator;\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (words, offset) {\n\t            this._mode.processBlock(words, offset);\n\t        },\n\n\t        _doFinalize: function () {\n\t            var finalProcessedBlocks;\n\n\t            // Shortcut\n\t            var padding = this.cfg.padding;\n\n\t            // Finalize\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                // Pad data\n\t                padding.pad(this._data, this.blockSize);\n\n\t                // Process final blocks\n\t                finalProcessedBlocks = this._process(!!'flush');\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                // Process final blocks\n\t                finalProcessedBlocks = this._process(!!'flush');\n\n\t                // Unpad data\n\t                padding.unpad(finalProcessedBlocks);\n\t            }\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 128/32\n\t    });\n\n\t    /**\n\t     * A collection of cipher parameters.\n\t     *\n\t     * @property {WordArray} ciphertext The raw ciphertext.\n\t     * @property {WordArray} key The key to this ciphertext.\n\t     * @property {WordArray} iv The IV used in the ciphering operation.\n\t     * @property {WordArray} salt The salt used with a key derivation function.\n\t     * @property {Cipher} algorithm The cipher algorithm.\n\t     * @property {Mode} mode The block mode used in the ciphering operation.\n\t     * @property {Padding} padding The padding scheme used in the ciphering operation.\n\t     * @property {number} blockSize The block size of the cipher.\n\t     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n\t     */\n\t    var CipherParams = C_lib.CipherParams = Base.extend({\n\t        /**\n\t         * Initializes a newly created cipher params object.\n\t         *\n\t         * @param {Object} cipherParams An object with any of the possible cipher parameters.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.lib.CipherParams.create({\n\t         *         ciphertext: ciphertextWordArray,\n\t         *         key: keyWordArray,\n\t         *         iv: ivWordArray,\n\t         *         salt: saltWordArray,\n\t         *         algorithm: CryptoJS.algo.AES,\n\t         *         mode: CryptoJS.mode.CBC,\n\t         *         padding: CryptoJS.pad.PKCS7,\n\t         *         blockSize: 4,\n\t         *         formatter: CryptoJS.format.OpenSSL\n\t         *     });\n\t         */\n\t        init: function (cipherParams) {\n\t            this.mixIn(cipherParams);\n\t        },\n\n\t        /**\n\t         * Converts this cipher params object to a string.\n\t         *\n\t         * @param {Format} formatter (Optional) The formatting strategy to use.\n\t         *\n\t         * @return {string} The stringified cipher params.\n\t         *\n\t         * @throws Error If neither the formatter nor the default formatter is set.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = cipherParams + '';\n\t         *     var string = cipherParams.toString();\n\t         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n\t         */\n\t        toString: function (formatter) {\n\t            return (formatter || this.formatter).stringify(this);\n\t        }\n\t    });\n\n\t    /**\n\t     * Format namespace.\n\t     */\n\t    var C_format = C.format = {};\n\n\t    /**\n\t     * OpenSSL formatting strategy.\n\t     */\n\t    var OpenSSLFormatter = C_format.OpenSSL = {\n\t        /**\n\t         * Converts a cipher params object to an OpenSSL-compatible string.\n\t         *\n\t         * @param {CipherParams} cipherParams The cipher params object.\n\t         *\n\t         * @return {string} The OpenSSL-compatible string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n\t         */\n\t        stringify: function (cipherParams) {\n\t            var wordArray;\n\n\t            // Shortcuts\n\t            var ciphertext = cipherParams.ciphertext;\n\t            var salt = cipherParams.salt;\n\n\t            // Format\n\t            if (salt) {\n\t                wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n\t            } else {\n\t                wordArray = ciphertext;\n\t            }\n\n\t            return wordArray.toString(Base64);\n\t        },\n\n\t        /**\n\t         * Converts an OpenSSL-compatible string to a cipher params object.\n\t         *\n\t         * @param {string} openSSLStr The OpenSSL-compatible string.\n\t         *\n\t         * @return {CipherParams} The cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n\t         */\n\t        parse: function (openSSLStr) {\n\t            var salt;\n\n\t            // Parse base64\n\t            var ciphertext = Base64.parse(openSSLStr);\n\n\t            // Shortcut\n\t            var ciphertextWords = ciphertext.words;\n\n\t            // Test for salt\n\t            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n\t                // Extract salt\n\t                salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n\t                // Remove salt from ciphertext\n\t                ciphertextWords.splice(0, 4);\n\t                ciphertext.sigBytes -= 16;\n\t            }\n\n\t            return CipherParams.create({ ciphertext: ciphertext, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n\t         */\n\t        cfg: Base.extend({\n\t            format: OpenSSLFormatter\n\t        }),\n\n\t        /**\n\t         * Encrypts a message.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Encrypt\n\t            var encryptor = cipher.createEncryptor(key, cfg);\n\t            var ciphertext = encryptor.finalize(message);\n\n\t            // Shortcut\n\t            var cipherCfg = encryptor.cfg;\n\n\t            // Create and return serializable cipher params\n\t            return CipherParams.create({\n\t                ciphertext: ciphertext,\n\t                key: key,\n\t                iv: cipherCfg.iv,\n\t                algorithm: cipher,\n\t                mode: cipherCfg.mode,\n\t                padding: cipherCfg.padding,\n\t                blockSize: cipher.blockSize,\n\t                formatter: cfg.format\n\t            });\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Decrypt\n\t            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n\n\t            return plaintext;\n\t        },\n\n\t        /**\n\t         * Converts serialized ciphertext to CipherParams,\n\t         * else assumed CipherParams already and returns ciphertext unchanged.\n\t         *\n\t         * @param {CipherParams|string} ciphertext The ciphertext.\n\t         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n\t         *\n\t         * @return {CipherParams} The unserialized ciphertext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n\t         */\n\t        _parse: function (ciphertext, format) {\n\t            if (typeof ciphertext == 'string') {\n\t                return format.parse(ciphertext, this);\n\t            } else {\n\t                return ciphertext;\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * Key derivation function namespace.\n\t     */\n\t    var C_kdf = C.kdf = {};\n\n\t    /**\n\t     * OpenSSL key derivation function.\n\t     */\n\t    var OpenSSLKdf = C_kdf.OpenSSL = {\n\t        /**\n\t         * Derives a key and IV from a password.\n\t         *\n\t         * @param {string} password The password to derive from.\n\t         * @param {number} keySize The size in words of the key to generate.\n\t         * @param {number} ivSize The size in words of the IV to generate.\n\t         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n\t         *\n\t         * @return {CipherParams} A cipher params object with the key, IV, and salt.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n\t         */\n\t        execute: function (password, keySize, ivSize, salt) {\n\t            // Generate random salt\n\t            if (!salt) {\n\t                salt = WordArray.random(64/8);\n\t            }\n\n\t            // Derive key and IV\n\t            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\n\n\t            // Separate key and IV\n\t            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n\t            key.sigBytes = keySize * 4;\n\n\t            // Return params\n\t            return CipherParams.create({ key: key, iv: iv, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A serializable cipher wrapper that derives the key from a password,\n\t     * and returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n\t         */\n\t        cfg: SerializableCipher.cfg.extend({\n\t            kdf: OpenSSLKdf\n\t        }),\n\n\t        /**\n\t         * Encrypts a message using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Encrypt\n\t            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n\n\t            // Mix in derived params\n\t            ciphertext.mixIn(derivedParams);\n\n\t            return ciphertext;\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Decrypt\n\t            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n\n\t            return plaintext;\n\t        }\n\t    });\n\t}());\n\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory();\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory();\n\t}\n}(this, function () {\n\n\t/*globals window, global, require*/\n\n\t/**\n\t * CryptoJS core components.\n\t */\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\n\t    var crypto;\n\n\t    // Native crypto from window (Browser)\n\t    if (typeof window !== 'undefined' && window.crypto) {\n\t        crypto = window.crypto;\n\t    }\n\n\t    // Native crypto in web worker (Browser)\n\t    if (typeof self !== 'undefined' && self.crypto) {\n\t        crypto = self.crypto;\n\t    }\n\n\t    // Native crypto from worker\n\t    if (typeof globalThis !== 'undefined' && globalThis.crypto) {\n\t        crypto = globalThis.crypto;\n\t    }\n\n\t    // Native (experimental IE 11) crypto from window (Browser)\n\t    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {\n\t        crypto = window.msCrypto;\n\t    }\n\n\t    // Native crypto from global (NodeJS)\n\t    if (!crypto && typeof global !== 'undefined' && global.crypto) {\n\t        crypto = global.crypto;\n\t    }\n\n\t    // Native crypto import via require (NodeJS)\n\t    if (!crypto && typeof require === 'function') {\n\t        try {\n\t            crypto = require('crypto');\n\t        } catch (err) {}\n\t    }\n\n\t    /*\n\t     * Cryptographically secure pseudorandom number generator\n\t     *\n\t     * As Math.random() is cryptographically not safe to use\n\t     */\n\t    var cryptoSecureRandomInt = function () {\n\t        if (crypto) {\n\t            // Use getRandomValues method (Browser)\n\t            if (typeof crypto.getRandomValues === 'function') {\n\t                try {\n\t                    return crypto.getRandomValues(new Uint32Array(1))[0];\n\t                } catch (err) {}\n\t            }\n\n\t            // Use randomBytes method (NodeJS)\n\t            if (typeof crypto.randomBytes === 'function') {\n\t                try {\n\t                    return crypto.randomBytes(4).readInt32LE();\n\t                } catch (err) {}\n\t            }\n\t        }\n\n\t        throw new Error('Native crypto module could not be used to get secure random number.');\n\t    };\n\n\t    /*\n\t     * Local polyfill of Object.create\n\n\t     */\n\t    var create = Object.create || (function () {\n\t        function F() {}\n\n\t        return function (obj) {\n\t            var subtype;\n\n\t            F.prototype = obj;\n\n\t            subtype = new F();\n\n\t            F.prototype = null;\n\n\t            return subtype;\n\t        };\n\t    }());\n\n\t    /**\n\t     * CryptoJS namespace.\n\t     */\n\t    var C = {};\n\n\t    /**\n\t     * Library namespace.\n\t     */\n\t    var C_lib = C.lib = {};\n\n\t    /**\n\t     * Base object for prototypal inheritance.\n\t     */\n\t    var Base = C_lib.Base = (function () {\n\n\n\t        return {\n\t            /**\n\t             * Creates a new object that inherits from this object.\n\t             *\n\t             * @param {Object} overrides Properties to copy into the new object.\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         field: 'value',\n\t             *\n\t             *         method: function () {\n\t             *         }\n\t             *     });\n\t             */\n\t            extend: function (overrides) {\n\t                // Spawn\n\t                var subtype = create(this);\n\n\t                // Augment\n\t                if (overrides) {\n\t                    subtype.mixIn(overrides);\n\t                }\n\n\t                // Create default initializer\n\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n\t                    subtype.init = function () {\n\t                        subtype.$super.init.apply(this, arguments);\n\t                    };\n\t                }\n\n\t                // Initializer's prototype is the subtype object\n\t                subtype.init.prototype = subtype;\n\n\t                // Reference supertype\n\t                subtype.$super = this;\n\n\t                return subtype;\n\t            },\n\n\t            /**\n\t             * Extends this object and runs the init method.\n\t             * Arguments to create() will be passed to init().\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var instance = MyType.create();\n\t             */\n\t            create: function () {\n\t                var instance = this.extend();\n\t                instance.init.apply(instance, arguments);\n\n\t                return instance;\n\t            },\n\n\t            /**\n\t             * Initializes a newly created object.\n\t             * Override this method to add some logic when your objects are created.\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         init: function () {\n\t             *             // ...\n\t             *         }\n\t             *     });\n\t             */\n\t            init: function () {\n\t            },\n\n\t            /**\n\t             * Copies properties into this object.\n\t             *\n\t             * @param {Object} properties The properties to mix in.\n\t             *\n\t             * @example\n\t             *\n\t             *     MyType.mixIn({\n\t             *         field: 'value'\n\t             *     });\n\t             */\n\t            mixIn: function (properties) {\n\t                for (var propertyName in properties) {\n\t                    if (properties.hasOwnProperty(propertyName)) {\n\t                        this[propertyName] = properties[propertyName];\n\t                    }\n\t                }\n\n\t                // IE won't copy toString using the loop above\n\t                if (properties.hasOwnProperty('toString')) {\n\t                    this.toString = properties.toString;\n\t                }\n\t            },\n\n\t            /**\n\t             * Creates a copy of this object.\n\t             *\n\t             * @return {Object} The clone.\n\t             *\n\t             * @example\n\t             *\n\t             *     var clone = instance.clone();\n\t             */\n\t            clone: function () {\n\t                return this.init.prototype.extend(this);\n\t            }\n\t        };\n\t    }());\n\n\t    /**\n\t     * An array of 32-bit words.\n\t     *\n\t     * @property {Array} words The array of 32-bit words.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var WordArray = C_lib.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 4;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this word array to a string.\n\t         *\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t         *\n\t         * @return {string} The stringified word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = wordArray + '';\n\t         *     var string = wordArray.toString();\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t         */\n\t        toString: function (encoder) {\n\t            return (encoder || Hex).stringify(this);\n\t        },\n\n\t        /**\n\t         * Concatenates a word array to this word array.\n\t         *\n\t         * @param {WordArray} wordArray The word array to append.\n\t         *\n\t         * @return {WordArray} This word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray1.concat(wordArray2);\n\t         */\n\t        concat: function (wordArray) {\n\t            // Shortcuts\n\t            var thisWords = this.words;\n\t            var thatWords = wordArray.words;\n\t            var thisSigBytes = this.sigBytes;\n\t            var thatSigBytes = wordArray.sigBytes;\n\n\t            // Clamp excess bits\n\t            this.clamp();\n\n\t            // Concat\n\t            if (thisSigBytes % 4) {\n\t                // Copy one byte at a time\n\t                for (var i = 0; i < thatSigBytes; i++) {\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t                }\n\t            } else {\n\t                // Copy one word at a time\n\t                for (var j = 0; j < thatSigBytes; j += 4) {\n\t                    thisWords[(thisSigBytes + j) >>> 2] = thatWords[j >>> 2];\n\t                }\n\t            }\n\t            this.sigBytes += thatSigBytes;\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Removes insignificant bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray.clamp();\n\t         */\n\t        clamp: function () {\n\t            // Shortcuts\n\t            var words = this.words;\n\t            var sigBytes = this.sigBytes;\n\n\t            // Clamp\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t            words.length = Math.ceil(sigBytes / 4);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = wordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone.words = this.words.slice(0);\n\n\t            return clone;\n\t        },\n\n\t        /**\n\t         * Creates a word array filled with random bytes.\n\t         *\n\t         * @param {number} nBytes The number of random bytes to generate.\n\t         *\n\t         * @return {WordArray} The random word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t         */\n\t        random: function (nBytes) {\n\t            var words = [];\n\n\t            for (var i = 0; i < nBytes; i += 4) {\n\t                words.push(cryptoSecureRandomInt());\n\t            }\n\n\t            return new WordArray.init(words, nBytes);\n\t        }\n\t    });\n\n\t    /**\n\t     * Encoder namespace.\n\t     */\n\t    var C_enc = C.enc = {};\n\n\t    /**\n\t     * Hex encoding strategy.\n\t     */\n\t    var Hex = C_enc.Hex = {\n\t        /**\n\t         * Converts a word array to a hex string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The hex string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var hexChars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                hexChars.push((bite >>> 4).toString(16));\n\t                hexChars.push((bite & 0x0f).toString(16));\n\t            }\n\n\t            return hexChars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a hex string to a word array.\n\t         *\n\t         * @param {string} hexStr The hex string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t         */\n\t        parse: function (hexStr) {\n\t            // Shortcut\n\t            var hexStrLength = hexStr.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t            }\n\n\t            return new WordArray.init(words, hexStrLength / 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * Latin1 encoding strategy.\n\t     */\n\t    var Latin1 = C_enc.Latin1 = {\n\t        /**\n\t         * Converts a word array to a Latin1 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Latin1 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var latin1Chars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                latin1Chars.push(String.fromCharCode(bite));\n\t            }\n\n\t            return latin1Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Latin1 string to a word array.\n\t         *\n\t         * @param {string} latin1Str The Latin1 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t         */\n\t        parse: function (latin1Str) {\n\t            // Shortcut\n\t            var latin1StrLength = latin1Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < latin1StrLength; i++) {\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t            }\n\n\t            return new WordArray.init(words, latin1StrLength);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-8 encoding strategy.\n\t     */\n\t    var Utf8 = C_enc.Utf8 = {\n\t        /**\n\t         * Converts a word array to a UTF-8 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-8 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            try {\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t            } catch (e) {\n\t                throw new Error('Malformed UTF-8 data');\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts a UTF-8 string to a word array.\n\t         *\n\t         * @param {string} utf8Str The UTF-8 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t         */\n\t        parse: function (utf8Str) {\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract buffered block algorithm template.\n\t     *\n\t     * The property blockSize must be implemented in a concrete subtype.\n\t     *\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t        /**\n\t         * Resets this block algorithm's data buffer to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm.reset();\n\t         */\n\t        reset: function () {\n\t            // Initial values\n\t            this._data = new WordArray.init();\n\t            this._nDataBytes = 0;\n\t        },\n\n\t        /**\n\t         * Adds new data to this block algorithm's buffer.\n\t         *\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm._append('data');\n\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t         */\n\t        _append: function (data) {\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof data == 'string') {\n\t                data = Utf8.parse(data);\n\t            }\n\n\t            // Append\n\t            this._data.concat(data);\n\t            this._nDataBytes += data.sigBytes;\n\t        },\n\n\t        /**\n\t         * Processes available data blocks.\n\t         *\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t         *\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t         *\n\t         * @return {WordArray} The processed data.\n\t         *\n\t         * @example\n\t         *\n\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t         */\n\t        _process: function (doFlush) {\n\t            var processedWords;\n\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var dataSigBytes = data.sigBytes;\n\t            var blockSize = this.blockSize;\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count blocks ready\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t            if (doFlush) {\n\t                // Round up to include partial blocks\n\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t            } else {\n\t                // Round down to include only full blocks,\n\t                // less the number of blocks that must remain in the buffer\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t            }\n\n\t            // Count words ready\n\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t            // Count bytes ready\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t            // Process blocks\n\t            if (nWordsReady) {\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t                    // Perform concrete-algorithm logic\n\t                    this._doProcessBlock(dataWords, offset);\n\t                }\n\n\t                // Remove processed words\n\t                processedWords = dataWords.splice(0, nWordsReady);\n\t                data.sigBytes -= nBytesReady;\n\t            }\n\n\t            // Return processed words\n\t            return new WordArray.init(processedWords, nBytesReady);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this object.\n\t         *\n\t         * @return {Object} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone._data = this._data.clone();\n\n\t            return clone;\n\t        },\n\n\t        _minBufferSize: 0\n\t    });\n\n\t    /**\n\t     * Abstract hasher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t     */\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Initializes a newly created hasher.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t         */\n\t        init: function (cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this hasher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-hasher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Updates this hasher with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {Hasher} This hasher.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.update('message');\n\t         *     hasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            // Append\n\t            this._append(messageUpdate);\n\n\t            // Update the hash\n\t            this._process();\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the hash computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The hash.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hash = hasher.finalize();\n\t         *     var hash = hasher.finalize('message');\n\t         *     var hash = hasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Final message update\n\t            if (messageUpdate) {\n\t                this._append(messageUpdate);\n\t            }\n\n\t            // Perform concrete-hasher logic\n\t            var hash = this._doFinalize();\n\n\t            return hash;\n\t        },\n\n\t        blockSize: 512/32,\n\n\t        /**\n\t         * Creates a shortcut function to a hasher's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHelper: function (hasher) {\n\t            return function (message, cfg) {\n\t                return new hasher.init(cfg).finalize(message);\n\t            };\n\t        },\n\n\t        /**\n\t         * Creates a shortcut function to the HMAC's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHmacHelper: function (hasher) {\n\t            return function (message, key) {\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t            };\n\t        }\n\t    });\n\n\t    /**\n\t     * Algorithm namespace.\n\t     */\n\t    var C_algo = C.algo = {};\n\n\t    return C;\n\t}(Math));\n\n\n\treturn CryptoJS;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * Base64 encoding strategy.\n\t     */\n\t    var Base64 = C_enc.Base64 = {\n\t        /**\n\t         * Converts a word array to a Base64 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Base64 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\t            var map = this._map;\n\n\t            // Clamp excess bits\n\t            wordArray.clamp();\n\n\t            // Convert\n\t            var base64Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 3) {\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t                }\n\t            }\n\n\t            // Add padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                while (base64Chars.length % 4) {\n\t                    base64Chars.push(paddingChar);\n\t                }\n\t            }\n\n\t            return base64Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Base64 string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n\t         */\n\t        parse: function (base64Str) {\n\t            // Shortcuts\n\t            var base64StrLength = base64Str.length;\n\t            var map = this._map;\n\t            var reverseMap = this._reverseMap;\n\n\t            if (!reverseMap) {\n\t                    reverseMap = this._reverseMap = [];\n\t                    for (var j = 0; j < map.length; j++) {\n\t                        reverseMap[map.charCodeAt(j)] = j;\n\t                    }\n\t            }\n\n\t            // Ignore padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t                if (paddingIndex !== -1) {\n\t                    base64StrLength = paddingIndex;\n\t                }\n\t            }\n\n\t            // Convert\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);\n\n\t        },\n\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n\t    };\n\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\n\t      var words = [];\n\t      var nBytes = 0;\n\t      for (var i = 0; i < base64StrLength; i++) {\n\t          if (i % 4) {\n\t              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n\t              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n\t              var bitsCombined = bits1 | bits2;\n\t              words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\n\t              nBytes++;\n\t          }\n\t      }\n\t      return WordArray.create(words, nBytes);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Base64;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * Base64url encoding strategy.\n\t     */\n\t    var Base64url = C_enc.Base64url = {\n\t        /**\n\t         * Converts a word array to a Base64url string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @param {boolean} urlSafe Whether to use url safe\n\t         *\n\t         * @return {string} The Base64url string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray, urlSafe=true) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\t            var map = urlSafe ? this._safe_map : this._map;\n\n\t            // Clamp excess bits\n\t            wordArray.clamp();\n\n\t            // Convert\n\t            var base64Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 3) {\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t                }\n\t            }\n\n\t            // Add padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                while (base64Chars.length % 4) {\n\t                    base64Chars.push(paddingChar);\n\t                }\n\t            }\n\n\t            return base64Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Base64url string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64url string.\n\t         *\n\t         * @param {boolean} urlSafe Whether to use url safe\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);\n\t         */\n\t        parse: function (base64Str, urlSafe=true) {\n\t            // Shortcuts\n\t            var base64StrLength = base64Str.length;\n\t            var map = urlSafe ? this._safe_map : this._map;\n\t            var reverseMap = this._reverseMap;\n\n\t            if (!reverseMap) {\n\t                reverseMap = this._reverseMap = [];\n\t                for (var j = 0; j < map.length; j++) {\n\t                    reverseMap[map.charCodeAt(j)] = j;\n\t                }\n\t            }\n\n\t            // Ignore padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t                if (paddingIndex !== -1) {\n\t                    base64StrLength = paddingIndex;\n\t                }\n\t            }\n\n\t            // Convert\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);\n\n\t        },\n\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n\t        _safe_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n\t    };\n\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\n\t        var words = [];\n\t        var nBytes = 0;\n\t        for (var i = 0; i < base64StrLength; i++) {\n\t            if (i % 4) {\n\t                var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n\t                var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n\t                var bitsCombined = bits1 | bits2;\n\t                words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\n\t                nBytes++;\n\t            }\n\t        }\n\t        return WordArray.create(words, nBytes);\n\t    }\n\t}());\n\n\treturn CryptoJS.enc.Base64url;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * UTF-16 BE encoding strategy.\n\t     */\n\t    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {\n\t        /**\n\t         * Converts a word array to a UTF-16 BE string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-16 BE string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var utf16Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 2) {\n\t                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;\n\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t            }\n\n\t            return utf16Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a UTF-16 BE string to a word array.\n\t         *\n\t         * @param {string} utf16Str The UTF-16 BE string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);\n\t         */\n\t        parse: function (utf16Str) {\n\t            // Shortcut\n\t            var utf16StrLength = utf16Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < utf16StrLength; i++) {\n\t                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);\n\t            }\n\n\t            return WordArray.create(words, utf16StrLength * 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-16 LE encoding strategy.\n\t     */\n\t    C_enc.Utf16LE = {\n\t        /**\n\t         * Converts a word array to a UTF-16 LE string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-16 LE string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var utf16Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 2) {\n\t                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);\n\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t            }\n\n\t            return utf16Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a UTF-16 LE string to a word array.\n\t         *\n\t         * @param {string} utf16Str The UTF-16 LE string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);\n\t         */\n\t        parse: function (utf16Str) {\n\t            // Shortcut\n\t            var utf16StrLength = utf16Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < utf16StrLength; i++) {\n\t                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));\n\t            }\n\n\t            return WordArray.create(words, utf16StrLength * 2);\n\t        }\n\t    };\n\n\t    function swapEndian(word) {\n\t        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Utf16;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var MD5 = C_algo.MD5;\n\n\t    /**\n\t     * This key derivation function is meant to conform with EVP_BytesToKey.\n\t     * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n\t     */\n\t    var EvpKDF = C_algo.EvpKDF = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: MD5,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create();\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Derives a key from a password.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            var block;\n\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init hasher\n\t            var hasher = cfg.hasher.create();\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                if (block) {\n\t                    hasher.update(block);\n\t                }\n\t                block = hasher.update(password).finalize(salt);\n\t                hasher.reset();\n\n\t                // Iterations\n\t                for (var i = 1; i < iterations; i++) {\n\t                    block = hasher.finalize(block);\n\t                    hasher.reset();\n\t                }\n\n\t                derivedKey.concat(block);\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Derives a key from a password.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.EvpKDF(password, salt);\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.EvpKDF = function (password, salt, cfg) {\n\t        return EvpKDF.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.EvpKDF;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var CipherParams = C_lib.CipherParams;\n\t    var C_enc = C.enc;\n\t    var Hex = C_enc.Hex;\n\t    var C_format = C.format;\n\n\t    var HexFormatter = C_format.Hex = {\n\t        /**\n\t         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.\n\t         *\n\t         * @param {CipherParams} cipherParams The cipher params object.\n\t         *\n\t         * @return {string} The hexadecimally encoded string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);\n\t         */\n\t        stringify: function (cipherParams) {\n\t            return cipherParams.ciphertext.toString(Hex);\n\t        },\n\n\t        /**\n\t         * Converts a hexadecimally encoded ciphertext string to a cipher params object.\n\t         *\n\t         * @param {string} input The hexadecimally encoded string.\n\t         *\n\t         * @return {CipherParams} The cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);\n\t         */\n\t        parse: function (input) {\n\t            var ciphertext = Hex.parse(input);\n\t            return CipherParams.create({ ciphertext: ciphertext });\n\t        }\n\t    };\n\t}());\n\n\n\treturn CryptoJS.format.Hex;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * HMAC algorithm.\n\t     */\n\t    var HMAC = C_algo.HMAC = Base.extend({\n\t        /**\n\t         * Initializes a newly created HMAC.\n\t         *\n\t         * @param {Hasher} hasher The hash algorithm to use.\n\t         * @param {WordArray|string} key The secret key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n\t         */\n\t        init: function (hasher, key) {\n\t            // Init hasher\n\t            hasher = this._hasher = new hasher.init();\n\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof key == 'string') {\n\t                key = Utf8.parse(key);\n\t            }\n\n\t            // Shortcuts\n\t            var hasherBlockSize = hasher.blockSize;\n\t            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n\t            // Allow arbitrary length keys\n\t            if (key.sigBytes > hasherBlockSizeBytes) {\n\t                key = hasher.finalize(key);\n\t            }\n\n\t            // Clamp excess bits\n\t            key.clamp();\n\n\t            // Clone key for inner and outer pads\n\t            var oKey = this._oKey = key.clone();\n\t            var iKey = this._iKey = key.clone();\n\n\t            // Shortcuts\n\t            var oKeyWords = oKey.words;\n\t            var iKeyWords = iKey.words;\n\n\t            // XOR keys with pad constants\n\t            for (var i = 0; i < hasherBlockSize; i++) {\n\t                oKeyWords[i] ^= 0x5c5c5c5c;\n\t                iKeyWords[i] ^= 0x36363636;\n\t            }\n\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this HMAC to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Reset\n\t            hasher.reset();\n\t            hasher.update(this._iKey);\n\t        },\n\n\t        /**\n\t         * Updates this HMAC with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {HMAC} This HMAC instance.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.update('message');\n\t         *     hmacHasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            this._hasher.update(messageUpdate);\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the HMAC computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The HMAC.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmac = hmacHasher.finalize();\n\t         *     var hmac = hmacHasher.finalize('message');\n\t         *     var hmac = hmacHasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Compute HMAC\n\t            var innerHash = hasher.finalize(messageUpdate);\n\t            hasher.reset();\n\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n\t            return hmac;\n\t        }\n\t    });\n\t}());\n\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"), require(\"./lib-typedarrays\"), require(\"./enc-utf16\"), require(\"./enc-base64\"), require(\"./enc-base64url\"), require(\"./md5\"), require(\"./sha1\"), require(\"./sha256\"), require(\"./sha224\"), require(\"./sha512\"), require(\"./sha384\"), require(\"./sha3\"), require(\"./ripemd160\"), require(\"./hmac\"), require(\"./pbkdf2\"), require(\"./evpkdf\"), require(\"./cipher-core\"), require(\"./mode-cfb\"), require(\"./mode-ctr\"), require(\"./mode-ctr-gladman\"), require(\"./mode-ofb\"), require(\"./mode-ecb\"), require(\"./pad-ansix923\"), require(\"./pad-iso10126\"), require(\"./pad-iso97971\"), require(\"./pad-zeropadding\"), require(\"./pad-nopadding\"), require(\"./format-hex\"), require(\"./aes\"), require(\"./tripledes\"), require(\"./rc4\"), require(\"./rabbit\"), require(\"./rabbit-legacy\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\", \"./lib-typedarrays\", \"./enc-utf16\", \"./enc-base64\", \"./enc-base64url\", \"./md5\", \"./sha1\", \"./sha256\", \"./sha224\", \"./sha512\", \"./sha384\", \"./sha3\", \"./ripemd160\", \"./hmac\", \"./pbkdf2\", \"./evpkdf\", \"./cipher-core\", \"./mode-cfb\", \"./mode-ctr\", \"./mode-ctr-gladman\", \"./mode-ofb\", \"./mode-ecb\", \"./pad-ansix923\", \"./pad-iso10126\", \"./pad-iso97971\", \"./pad-zeropadding\", \"./pad-nopadding\", \"./format-hex\", \"./aes\", \"./tripledes\", \"./rc4\", \"./rabbit\", \"./rabbit-legacy\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\treturn CryptoJS;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Check if typed arrays are supported\n\t    if (typeof ArrayBuffer != 'function') {\n\t        return;\n\t    }\n\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\n\t    // Reference original init\n\t    var superInit = WordArray.init;\n\n\t    // Augment WordArray.init to handle typed arrays\n\t    var subInit = WordArray.init = function (typedArray) {\n\t        // Convert buffers to uint8\n\t        if (typedArray instanceof ArrayBuffer) {\n\t            typedArray = new Uint8Array(typedArray);\n\t        }\n\n\t        // Convert other array views to uint8\n\t        if (\n\t            typedArray instanceof Int8Array ||\n\t            (typeof Uint8ClampedArray !== \"undefined\" && typedArray instanceof Uint8ClampedArray) ||\n\t            typedArray instanceof Int16Array ||\n\t            typedArray instanceof Uint16Array ||\n\t            typedArray instanceof Int32Array ||\n\t            typedArray instanceof Uint32Array ||\n\t            typedArray instanceof Float32Array ||\n\t            typedArray instanceof Float64Array\n\t        ) {\n\t            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n\t        }\n\n\t        // Handle Uint8Array\n\t        if (typedArray instanceof Uint8Array) {\n\t            // Shortcut\n\t            var typedArrayByteLength = typedArray.byteLength;\n\n\t            // Extract bytes\n\t            var words = [];\n\t            for (var i = 0; i < typedArrayByteLength; i++) {\n\t                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\n\t            }\n\n\t            // Initialize this word array\n\t            superInit.call(this, words, typedArrayByteLength);\n\t        } else {\n\t            // Else call normal init\n\t            superInit.apply(this, arguments);\n\t        }\n\t    };\n\n\t    subInit.prototype = WordArray;\n\t}());\n\n\n\treturn CryptoJS.lib.WordArray;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Constants table\n\t    var T = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        for (var i = 0; i < 64; i++) {\n\t            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;\n\t        }\n\t    }());\n\n\t    /**\n\t     * MD5 hash algorithm.\n\t     */\n\t    var MD5 = C_algo.MD5 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Swap endian\n\t            for (var i = 0; i < 16; i++) {\n\t                // Shortcuts\n\t                var offset_i = offset + i;\n\t                var M_offset_i = M[offset_i];\n\n\t                M[offset_i] = (\n\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\n\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\n\t                );\n\t            }\n\n\t            // Shortcuts\n\t            var H = this._hash.words;\n\n\t            var M_offset_0  = M[offset + 0];\n\t            var M_offset_1  = M[offset + 1];\n\t            var M_offset_2  = M[offset + 2];\n\t            var M_offset_3  = M[offset + 3];\n\t            var M_offset_4  = M[offset + 4];\n\t            var M_offset_5  = M[offset + 5];\n\t            var M_offset_6  = M[offset + 6];\n\t            var M_offset_7  = M[offset + 7];\n\t            var M_offset_8  = M[offset + 8];\n\t            var M_offset_9  = M[offset + 9];\n\t            var M_offset_10 = M[offset + 10];\n\t            var M_offset_11 = M[offset + 11];\n\t            var M_offset_12 = M[offset + 12];\n\t            var M_offset_13 = M[offset + 13];\n\t            var M_offset_14 = M[offset + 14];\n\t            var M_offset_15 = M[offset + 15];\n\n\t            // Working varialbes\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\n\t            // Computation\n\t            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);\n\t            d = FF(d, a, b, c, M_offset_1,  12, T[1]);\n\t            c = FF(c, d, a, b, M_offset_2,  17, T[2]);\n\t            b = FF(b, c, d, a, M_offset_3,  22, T[3]);\n\t            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);\n\t            d = FF(d, a, b, c, M_offset_5,  12, T[5]);\n\t            c = FF(c, d, a, b, M_offset_6,  17, T[6]);\n\t            b = FF(b, c, d, a, M_offset_7,  22, T[7]);\n\t            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);\n\t            d = FF(d, a, b, c, M_offset_9,  12, T[9]);\n\t            c = FF(c, d, a, b, M_offset_10, 17, T[10]);\n\t            b = FF(b, c, d, a, M_offset_11, 22, T[11]);\n\t            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);\n\t            d = FF(d, a, b, c, M_offset_13, 12, T[13]);\n\t            c = FF(c, d, a, b, M_offset_14, 17, T[14]);\n\t            b = FF(b, c, d, a, M_offset_15, 22, T[15]);\n\n\t            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);\n\t            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);\n\t            c = GG(c, d, a, b, M_offset_11, 14, T[18]);\n\t            b = GG(b, c, d, a, M_offset_0,  20, T[19]);\n\t            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);\n\t            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);\n\t            c = GG(c, d, a, b, M_offset_15, 14, T[22]);\n\t            b = GG(b, c, d, a, M_offset_4,  20, T[23]);\n\t            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);\n\t            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);\n\t            c = GG(c, d, a, b, M_offset_3,  14, T[26]);\n\t            b = GG(b, c, d, a, M_offset_8,  20, T[27]);\n\t            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);\n\t            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);\n\t            c = GG(c, d, a, b, M_offset_7,  14, T[30]);\n\t            b = GG(b, c, d, a, M_offset_12, 20, T[31]);\n\n\t            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);\n\t            d = HH(d, a, b, c, M_offset_8,  11, T[33]);\n\t            c = HH(c, d, a, b, M_offset_11, 16, T[34]);\n\t            b = HH(b, c, d, a, M_offset_14, 23, T[35]);\n\t            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);\n\t            d = HH(d, a, b, c, M_offset_4,  11, T[37]);\n\t            c = HH(c, d, a, b, M_offset_7,  16, T[38]);\n\t            b = HH(b, c, d, a, M_offset_10, 23, T[39]);\n\t            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);\n\t            d = HH(d, a, b, c, M_offset_0,  11, T[41]);\n\t            c = HH(c, d, a, b, M_offset_3,  16, T[42]);\n\t            b = HH(b, c, d, a, M_offset_6,  23, T[43]);\n\t            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);\n\t            d = HH(d, a, b, c, M_offset_12, 11, T[45]);\n\t            c = HH(c, d, a, b, M_offset_15, 16, T[46]);\n\t            b = HH(b, c, d, a, M_offset_2,  23, T[47]);\n\n\t            a = II(a, b, c, d, M_offset_0,  6,  T[48]);\n\t            d = II(d, a, b, c, M_offset_7,  10, T[49]);\n\t            c = II(c, d, a, b, M_offset_14, 15, T[50]);\n\t            b = II(b, c, d, a, M_offset_5,  21, T[51]);\n\t            a = II(a, b, c, d, M_offset_12, 6,  T[52]);\n\t            d = II(d, a, b, c, M_offset_3,  10, T[53]);\n\t            c = II(c, d, a, b, M_offset_10, 15, T[54]);\n\t            b = II(b, c, d, a, M_offset_1,  21, T[55]);\n\t            a = II(a, b, c, d, M_offset_8,  6,  T[56]);\n\t            d = II(d, a, b, c, M_offset_15, 10, T[57]);\n\t            c = II(c, d, a, b, M_offset_6,  15, T[58]);\n\t            b = II(b, c, d, a, M_offset_13, 21, T[59]);\n\t            a = II(a, b, c, d, M_offset_4,  6,  T[60]);\n\t            d = II(d, a, b, c, M_offset_11, 10, T[61]);\n\t            c = II(c, d, a, b, M_offset_2,  15, T[62]);\n\t            b = II(b, c, d, a, M_offset_9,  21, T[63]);\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\n\t            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);\n\t            var nBitsTotalL = nBitsTotal;\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (\n\t                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)\n\t            );\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n\t                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)\n\t            );\n\n\t            data.sigBytes = (dataWords.length + 1) * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var hash = this._hash;\n\t            var H = hash.words;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 4; i++) {\n\t                // Shortcut\n\t                var H_i = H[i];\n\n\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\n\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    function FF(a, b, c, d, x, s, t) {\n\t        var n = a + ((b & c) | (~b & d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function GG(a, b, c, d, x, s, t) {\n\t        var n = a + ((b & d) | (c & ~d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function HH(a, b, c, d, x, s, t) {\n\t        var n = a + (b ^ c ^ d) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function II(a, b, c, d, x, s, t) {\n\t        var n = a + (c ^ (b | ~d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.MD5('message');\n\t     *     var hash = CryptoJS.MD5(wordArray);\n\t     */\n\t    C.MD5 = Hasher._createHelper(MD5);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacMD5(message, key);\n\t     */\n\t    C.HmacMD5 = Hasher._createHmacHelper(MD5);\n\t}(Math));\n\n\n\treturn CryptoJS.MD5;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher Feedback block mode.\n\t */\n\tCryptoJS.mode.CFB = (function () {\n\t    var CFB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    CFB.Encryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // Remember this block to use with next block\n\t            this._prevBlock = words.slice(offset, offset + blockSize);\n\t        }\n\t    });\n\n\t    CFB.Decryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            // Remember this block to use with next block\n\t            var thisBlock = words.slice(offset, offset + blockSize);\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // This block becomes the previous block\n\t            this._prevBlock = thisBlock;\n\t        }\n\t    });\n\n\t    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {\n\t        var keystream;\n\n\t        // Shortcut\n\t        var iv = this._iv;\n\n\t        // Generate keystream\n\t        if (iv) {\n\t            keystream = iv.slice(0);\n\n\t            // Remove IV for subsequent blocks\n\t            this._iv = undefined;\n\t        } else {\n\t            keystream = this._prevBlock;\n\t        }\n\t        cipher.encryptBlock(keystream, 0);\n\n\t        // Encrypt\n\t        for (var i = 0; i < blockSize; i++) {\n\t            words[offset + i] ^= keystream[i];\n\t        }\n\t    }\n\n\t    return CFB;\n\t}());\n\n\n\treturn CryptoJS.mode.CFB;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/** @preserve\n\t * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n\t * derived from CryptoJS.mode.CTR\n\t * Jan Hruby jhruby.web@gmail.com\n\t */\n\tCryptoJS.mode.CTRGladman = (function () {\n\t    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();\n\n\t\tfunction incWord(word)\n\t\t{\n\t\t\tif (((word >> 24) & 0xff) === 0xff) { //overflow\n\t\t\tvar b1 = (word >> 16)&0xff;\n\t\t\tvar b2 = (word >> 8)&0xff;\n\t\t\tvar b3 = word & 0xff;\n\n\t\t\tif (b1 === 0xff) // overflow b1\n\t\t\t{\n\t\t\tb1 = 0;\n\t\t\tif (b2 === 0xff)\n\t\t\t{\n\t\t\t\tb2 = 0;\n\t\t\t\tif (b3 === 0xff)\n\t\t\t\t{\n\t\t\t\t\tb3 = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t++b3;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t++b2;\n\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t++b1;\n\t\t\t}\n\n\t\t\tword = 0;\n\t\t\tword += (b1 << 16);\n\t\t\tword += (b2 << 8);\n\t\t\tword += b3;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tword += (0x01 << 24);\n\t\t\t}\n\t\t\treturn word;\n\t\t}\n\n\t\tfunction incCounter(counter)\n\t\t{\n\t\t\tif ((counter[0] = incWord(counter[0])) === 0)\n\t\t\t{\n\t\t\t\t// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n\t\t\t\tcounter[1] = incWord(counter[1]);\n\t\t\t}\n\t\t\treturn counter;\n\t\t}\n\n\t    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var counter = this._counter;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                counter = this._counter = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\n\t\t\t\tincCounter(counter);\n\n\t\t\t\tvar keystream = counter.slice(0);\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    CTRGladman.Decryptor = Encryptor;\n\n\t    return CTRGladman;\n\t}());\n\n\n\n\n\treturn CryptoJS.mode.CTRGladman;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Counter block mode.\n\t */\n\tCryptoJS.mode.CTR = (function () {\n\t    var CTR = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    var Encryptor = CTR.Encryptor = CTR.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var counter = this._counter;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                counter = this._counter = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\t            var keystream = counter.slice(0);\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Increment counter\n\t            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    CTR.Decryptor = Encryptor;\n\n\t    return CTR;\n\t}());\n\n\n\treturn CryptoJS.mode.CTR;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Electronic Codebook block mode.\n\t */\n\tCryptoJS.mode.ECB = (function () {\n\t    var ECB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    ECB.Encryptor = ECB.extend({\n\t        processBlock: function (words, offset) {\n\t            this._cipher.encryptBlock(words, offset);\n\t        }\n\t    });\n\n\t    ECB.Decryptor = ECB.extend({\n\t        processBlock: function (words, offset) {\n\t            this._cipher.decryptBlock(words, offset);\n\t        }\n\t    });\n\n\t    return ECB;\n\t}());\n\n\n\treturn CryptoJS.mode.ECB;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Output Feedback block mode.\n\t */\n\tCryptoJS.mode.OFB = (function () {\n\t    var OFB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    var Encryptor = OFB.Encryptor = OFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var keystream = this._keystream;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                keystream = this._keystream = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    OFB.Decryptor = Encryptor;\n\n\t    return OFB;\n\t}());\n\n\n\treturn CryptoJS.mode.OFB;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * ANSI X.923 padding strategy.\n\t */\n\tCryptoJS.pad.AnsiX923 = {\n\t    pad: function (data, blockSize) {\n\t        // Shortcuts\n\t        var dataSigBytes = data.sigBytes;\n\t        var blockSizeBytes = blockSize * 4;\n\n\t        // Count padding bytes\n\t        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;\n\n\t        // Compute last byte position\n\t        var lastBytePos = dataSigBytes + nPaddingBytes - 1;\n\n\t        // Pad\n\t        data.clamp();\n\t        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);\n\t        data.sigBytes += nPaddingBytes;\n\t    },\n\n\t    unpad: function (data) {\n\t        // Get number of padding bytes from last byte\n\t        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t        // Remove padding\n\t        data.sigBytes -= nPaddingBytes;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.Ansix923;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * ISO 10126 padding strategy.\n\t */\n\tCryptoJS.pad.Iso10126 = {\n\t    pad: function (data, blockSize) {\n\t        // Shortcut\n\t        var blockSizeBytes = blockSize * 4;\n\n\t        // Count padding bytes\n\t        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n\t        // Pad\n\t        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).\n\t             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));\n\t    },\n\n\t    unpad: function (data) {\n\t        // Get number of padding bytes from last byte\n\t        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t        // Remove padding\n\t        data.sigBytes -= nPaddingBytes;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.Iso10126;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * ISO/IEC 9797-1 Padding Method 2.\n\t */\n\tCryptoJS.pad.Iso97971 = {\n\t    pad: function (data, blockSize) {\n\t        // Add 0x80 byte\n\t        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));\n\n\t        // Zero pad the rest\n\t        CryptoJS.pad.ZeroPadding.pad(data, blockSize);\n\t    },\n\n\t    unpad: function (data) {\n\t        // Remove zero padding\n\t        CryptoJS.pad.ZeroPadding.unpad(data);\n\n\t        // Remove one more byte -- the 0x80 byte\n\t        data.sigBytes--;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.Iso97971;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * A noop padding strategy.\n\t */\n\tCryptoJS.pad.NoPadding = {\n\t    pad: function () {\n\t    },\n\n\t    unpad: function () {\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.NoPadding;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Zero padding strategy.\n\t */\n\tCryptoJS.pad.ZeroPadding = {\n\t    pad: function (data, blockSize) {\n\t        // Shortcut\n\t        var blockSizeBytes = blockSize * 4;\n\n\t        // Pad\n\t        data.clamp();\n\t        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);\n\t    },\n\n\t    unpad: function (data) {\n\t        // Shortcut\n\t        var dataWords = data.words;\n\n\t        // Unpad\n\t        var i = data.sigBytes - 1;\n\t        for (var i = data.sigBytes - 1; i >= 0; i--) {\n\t            if (((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {\n\t                data.sigBytes = i + 1;\n\t                break;\n\t            }\n\t        }\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.ZeroPadding;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA1 = C_algo.SHA1;\n\t    var HMAC = C_algo.HMAC;\n\n\t    /**\n\t     * Password-Based Key Derivation Function 2 algorithm.\n\t     */\n\t    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hasher to use. Default: SHA1\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: SHA1,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create();\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Computes the Password-Based Key Derivation Function 2.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init HMAC\n\t            var hmac = HMAC.create(cfg.hasher, password);\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\t            var blockIndex = WordArray.create([0x00000001]);\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var blockIndexWords = blockIndex.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                var block = hmac.update(salt).finalize(blockIndex);\n\t                hmac.reset();\n\n\t                // Shortcuts\n\t                var blockWords = block.words;\n\t                var blockWordsLength = blockWords.length;\n\n\t                // Iterations\n\t                var intermediate = block;\n\t                for (var i = 1; i < iterations; i++) {\n\t                    intermediate = hmac.finalize(intermediate);\n\t                    hmac.reset();\n\n\t                    // Shortcut\n\t                    var intermediateWords = intermediate.words;\n\n\t                    // XOR intermediate with block\n\t                    for (var j = 0; j < blockWordsLength; j++) {\n\t                        blockWords[j] ^= intermediateWords[j];\n\t                    }\n\t                }\n\n\t                derivedKey.concat(block);\n\t                blockIndexWords[0]++;\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Computes the Password-Based Key Derivation Function 2.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.PBKDF2(password, salt);\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.PBKDF2 = function (password, salt, cfg) {\n\t        return PBKDF2.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.PBKDF2;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var StreamCipher = C_lib.StreamCipher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable objects\n\t    var S  = [];\n\t    var C_ = [];\n\t    var G  = [];\n\n\t    /**\n\t     * Rabbit stream cipher algorithm.\n\t     *\n\t     * This is a legacy version that neglected to convert the key to little-endian.\n\t     * This error doesn't affect the cipher's security,\n\t     * but it does affect its compatibility with other implementations.\n\t     */\n\t    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var K = this._key.words;\n\t            var iv = this.cfg.iv;\n\n\t            // Generate initial state values\n\t            var X = this._X = [\n\t                K[0], (K[3] << 16) | (K[2] >>> 16),\n\t                K[1], (K[0] << 16) | (K[3] >>> 16),\n\t                K[2], (K[1] << 16) | (K[0] >>> 16),\n\t                K[3], (K[2] << 16) | (K[1] >>> 16)\n\t            ];\n\n\t            // Generate initial counter values\n\t            var C = this._C = [\n\t                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),\n\t                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),\n\t                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),\n\t                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)\n\t            ];\n\n\t            // Carry bit\n\t            this._b = 0;\n\n\t            // Iterate the system four times\n\t            for (var i = 0; i < 4; i++) {\n\t                nextState.call(this);\n\t            }\n\n\t            // Modify the counters\n\t            for (var i = 0; i < 8; i++) {\n\t                C[i] ^= X[(i + 4) & 7];\n\t            }\n\n\t            // IV setup\n\t            if (iv) {\n\t                // Shortcuts\n\t                var IV = iv.words;\n\t                var IV_0 = IV[0];\n\t                var IV_1 = IV[1];\n\n\t                // Generate four subvectors\n\t                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);\n\t                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);\n\t                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);\n\t                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);\n\n\t                // Modify counter values\n\t                C[0] ^= i0;\n\t                C[1] ^= i1;\n\t                C[2] ^= i2;\n\t                C[3] ^= i3;\n\t                C[4] ^= i0;\n\t                C[5] ^= i1;\n\t                C[6] ^= i2;\n\t                C[7] ^= i3;\n\n\t                // Iterate the system four times\n\t                for (var i = 0; i < 4; i++) {\n\t                    nextState.call(this);\n\t                }\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var X = this._X;\n\n\t            // Iterate the system\n\t            nextState.call(this);\n\n\t            // Generate four keystream words\n\t            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);\n\t            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);\n\t            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);\n\t            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);\n\n\t            for (var i = 0; i < 4; i++) {\n\t                // Swap endian\n\t                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |\n\t                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);\n\n\t                // Encrypt\n\t                M[offset + i] ^= S[i];\n\t            }\n\t        },\n\n\t        blockSize: 128/32,\n\n\t        ivSize: 64/32\n\t    });\n\n\t    function nextState() {\n\t        // Shortcuts\n\t        var X = this._X;\n\t        var C = this._C;\n\n\t        // Save old counter values\n\t        for (var i = 0; i < 8; i++) {\n\t            C_[i] = C[i];\n\t        }\n\n\t        // Calculate new counter values\n\t        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;\n\t        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;\n\t        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;\n\t        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;\n\t        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;\n\t        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;\n\t        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;\n\t        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;\n\t        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;\n\n\t        // Calculate the g-values\n\t        for (var i = 0; i < 8; i++) {\n\t            var gx = X[i] + C[i];\n\n\t            // Construct high and low argument for squaring\n\t            var ga = gx & 0xffff;\n\t            var gb = gx >>> 16;\n\n\t            // Calculate high and low result of squaring\n\t            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;\n\t            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);\n\n\t            // High XOR low\n\t            G[i] = gh ^ gl;\n\t        }\n\n\t        // Calculate new state values\n\t        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;\n\t        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;\n\t        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;\n\t        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;\n\t        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;\n\t        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;\n\t        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;\n\t        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);\n\t}());\n\n\n\treturn CryptoJS.RabbitLegacy;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var StreamCipher = C_lib.StreamCipher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable objects\n\t    var S  = [];\n\t    var C_ = [];\n\t    var G  = [];\n\n\t    /**\n\t     * Rabbit stream cipher algorithm\n\t     */\n\t    var Rabbit = C_algo.Rabbit = StreamCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var K = this._key.words;\n\t            var iv = this.cfg.iv;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 4; i++) {\n\t                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |\n\t                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Generate initial state values\n\t            var X = this._X = [\n\t                K[0], (K[3] << 16) | (K[2] >>> 16),\n\t                K[1], (K[0] << 16) | (K[3] >>> 16),\n\t                K[2], (K[1] << 16) | (K[0] >>> 16),\n\t                K[3], (K[2] << 16) | (K[1] >>> 16)\n\t            ];\n\n\t            // Generate initial counter values\n\t            var C = this._C = [\n\t                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),\n\t                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),\n\t                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),\n\t                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)\n\t            ];\n\n\t            // Carry bit\n\t            this._b = 0;\n\n\t            // Iterate the system four times\n\t            for (var i = 0; i < 4; i++) {\n\t                nextState.call(this);\n\t            }\n\n\t            // Modify the counters\n\t            for (var i = 0; i < 8; i++) {\n\t                C[i] ^= X[(i + 4) & 7];\n\t            }\n\n\t            // IV setup\n\t            if (iv) {\n\t                // Shortcuts\n\t                var IV = iv.words;\n\t                var IV_0 = IV[0];\n\t                var IV_1 = IV[1];\n\n\t                // Generate four subvectors\n\t                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);\n\t                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);\n\t                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);\n\t                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);\n\n\t                // Modify counter values\n\t                C[0] ^= i0;\n\t                C[1] ^= i1;\n\t                C[2] ^= i2;\n\t                C[3] ^= i3;\n\t                C[4] ^= i0;\n\t                C[5] ^= i1;\n\t                C[6] ^= i2;\n\t                C[7] ^= i3;\n\n\t                // Iterate the system four times\n\t                for (var i = 0; i < 4; i++) {\n\t                    nextState.call(this);\n\t                }\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var X = this._X;\n\n\t            // Iterate the system\n\t            nextState.call(this);\n\n\t            // Generate four keystream words\n\t            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);\n\t            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);\n\t            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);\n\t            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);\n\n\t            for (var i = 0; i < 4; i++) {\n\t                // Swap endian\n\t                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |\n\t                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);\n\n\t                // Encrypt\n\t                M[offset + i] ^= S[i];\n\t            }\n\t        },\n\n\t        blockSize: 128/32,\n\n\t        ivSize: 64/32\n\t    });\n\n\t    function nextState() {\n\t        // Shortcuts\n\t        var X = this._X;\n\t        var C = this._C;\n\n\t        // Save old counter values\n\t        for (var i = 0; i < 8; i++) {\n\t            C_[i] = C[i];\n\t        }\n\n\t        // Calculate new counter values\n\t        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;\n\t        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;\n\t        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;\n\t        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;\n\t        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;\n\t        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;\n\t        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;\n\t        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;\n\t        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;\n\n\t        // Calculate the g-values\n\t        for (var i = 0; i < 8; i++) {\n\t            var gx = X[i] + C[i];\n\n\t            // Construct high and low argument for squaring\n\t            var ga = gx & 0xffff;\n\t            var gb = gx >>> 16;\n\n\t            // Calculate high and low result of squaring\n\t            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;\n\t            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);\n\n\t            // High XOR low\n\t            G[i] = gh ^ gl;\n\t        }\n\n\t        // Calculate new state values\n\t        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;\n\t        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;\n\t        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;\n\t        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;\n\t        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;\n\t        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;\n\t        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;\n\t        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.Rabbit = StreamCipher._createHelper(Rabbit);\n\t}());\n\n\n\treturn CryptoJS.Rabbit;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var StreamCipher = C_lib.StreamCipher;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * RC4 stream cipher algorithm.\n\t     */\n\t    var RC4 = C_algo.RC4 = StreamCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\t            var keySigBytes = key.sigBytes;\n\n\t            // Init sbox\n\t            var S = this._S = [];\n\t            for (var i = 0; i < 256; i++) {\n\t                S[i] = i;\n\t            }\n\n\t            // Key setup\n\t            for (var i = 0, j = 0; i < 256; i++) {\n\t                var keyByteIndex = i % keySigBytes;\n\t                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;\n\n\t                j = (j + S[i] + keyByte) % 256;\n\n\t                // Swap\n\t                var t = S[i];\n\t                S[i] = S[j];\n\t                S[j] = t;\n\t            }\n\n\t            // Counters\n\t            this._i = this._j = 0;\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            M[offset] ^= generateKeystreamWord.call(this);\n\t        },\n\n\t        keySize: 256/32,\n\n\t        ivSize: 0\n\t    });\n\n\t    function generateKeystreamWord() {\n\t        // Shortcuts\n\t        var S = this._S;\n\t        var i = this._i;\n\t        var j = this._j;\n\n\t        // Generate keystream word\n\t        var keystreamWord = 0;\n\t        for (var n = 0; n < 4; n++) {\n\t            i = (i + 1) % 256;\n\t            j = (j + S[i]) % 256;\n\n\t            // Swap\n\t            var t = S[i];\n\t            S[i] = S[j];\n\t            S[j] = t;\n\n\t            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);\n\t        }\n\n\t        // Update counters\n\t        this._i = i;\n\t        this._j = j;\n\n\t        return keystreamWord;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.RC4 = StreamCipher._createHelper(RC4);\n\n\t    /**\n\t     * Modified RC4 stream cipher algorithm.\n\t     */\n\t    var RC4Drop = C_algo.RC4Drop = RC4.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} drop The number of keystream words to drop. Default 192\n\t         */\n\t        cfg: RC4.cfg.extend({\n\t            drop: 192\n\t        }),\n\n\t        _doReset: function () {\n\t            RC4._doReset.call(this);\n\n\t            // Drop\n\t            for (var i = this.cfg.drop; i > 0; i--) {\n\t                generateKeystreamWord.call(this);\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.RC4Drop = StreamCipher._createHelper(RC4Drop);\n\t}());\n\n\n\treturn CryptoJS.RC4;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/** @preserve\n\t(c) 2012 by Cédric Mesnil. All rights reserved.\n\n\tRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n\t    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\t    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n\tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t*/\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Constants table\n\t    var _zl = WordArray.create([\n\t        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n\t        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,\n\t        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,\n\t        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,\n\t        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);\n\t    var _zr = WordArray.create([\n\t        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,\n\t        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,\n\t        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,\n\t        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,\n\t        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);\n\t    var _sl = WordArray.create([\n\t         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,\n\t        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,\n\t        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,\n\t          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,\n\t        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);\n\t    var _sr = WordArray.create([\n\t        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,\n\t        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,\n\t        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,\n\t        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,\n\t        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);\n\n\t    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);\n\t    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);\n\n\t    /**\n\t     * RIPEMD160 hash algorithm.\n\t     */\n\t    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\n\t            // Swap endian\n\t            for (var i = 0; i < 16; i++) {\n\t                // Shortcuts\n\t                var offset_i = offset + i;\n\t                var M_offset_i = M[offset_i];\n\n\t                // Swap\n\t                M[offset_i] = (\n\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\n\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\n\t                );\n\t            }\n\t            // Shortcut\n\t            var H  = this._hash.words;\n\t            var hl = _hl.words;\n\t            var hr = _hr.words;\n\t            var zl = _zl.words;\n\t            var zr = _zr.words;\n\t            var sl = _sl.words;\n\t            var sr = _sr.words;\n\n\t            // Working variables\n\t            var al, bl, cl, dl, el;\n\t            var ar, br, cr, dr, er;\n\n\t            ar = al = H[0];\n\t            br = bl = H[1];\n\t            cr = cl = H[2];\n\t            dr = dl = H[3];\n\t            er = el = H[4];\n\t            // Computation\n\t            var t;\n\t            for (var i = 0; i < 80; i += 1) {\n\t                t = (al +  M[offset+zl[i]])|0;\n\t                if (i<16){\n\t\t            t +=  f1(bl,cl,dl) + hl[0];\n\t                } else if (i<32) {\n\t\t            t +=  f2(bl,cl,dl) + hl[1];\n\t                } else if (i<48) {\n\t\t            t +=  f3(bl,cl,dl) + hl[2];\n\t                } else if (i<64) {\n\t\t            t +=  f4(bl,cl,dl) + hl[3];\n\t                } else {// if (i<80) {\n\t\t            t +=  f5(bl,cl,dl) + hl[4];\n\t                }\n\t                t = t|0;\n\t                t =  rotl(t,sl[i]);\n\t                t = (t+el)|0;\n\t                al = el;\n\t                el = dl;\n\t                dl = rotl(cl, 10);\n\t                cl = bl;\n\t                bl = t;\n\n\t                t = (ar + M[offset+zr[i]])|0;\n\t                if (i<16){\n\t\t            t +=  f5(br,cr,dr) + hr[0];\n\t                } else if (i<32) {\n\t\t            t +=  f4(br,cr,dr) + hr[1];\n\t                } else if (i<48) {\n\t\t            t +=  f3(br,cr,dr) + hr[2];\n\t                } else if (i<64) {\n\t\t            t +=  f2(br,cr,dr) + hr[3];\n\t                } else {// if (i<80) {\n\t\t            t +=  f1(br,cr,dr) + hr[4];\n\t                }\n\t                t = t|0;\n\t                t =  rotl(t,sr[i]) ;\n\t                t = (t+er)|0;\n\t                ar = er;\n\t                er = dr;\n\t                dr = rotl(cr, 10);\n\t                cr = br;\n\t                br = t;\n\t            }\n\t            // Intermediate hash value\n\t            t    = (H[1] + cl + dr)|0;\n\t            H[1] = (H[2] + dl + er)|0;\n\t            H[2] = (H[3] + el + ar)|0;\n\t            H[3] = (H[4] + al + br)|0;\n\t            H[4] = (H[0] + bl + cr)|0;\n\t            H[0] =  t;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n\t                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)\n\t            );\n\t            data.sigBytes = (dataWords.length + 1) * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var hash = this._hash;\n\t            var H = hash.words;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 5; i++) {\n\t                // Shortcut\n\t                var H_i = H[i];\n\n\t                // Swap\n\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\n\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\n\t    function f1(x, y, z) {\n\t        return ((x) ^ (y) ^ (z));\n\n\t    }\n\n\t    function f2(x, y, z) {\n\t        return (((x)&(y)) | ((~x)&(z)));\n\t    }\n\n\t    function f3(x, y, z) {\n\t        return (((x) | (~(y))) ^ (z));\n\t    }\n\n\t    function f4(x, y, z) {\n\t        return (((x) & (z)) | ((y)&(~(z))));\n\t    }\n\n\t    function f5(x, y, z) {\n\t        return ((x) ^ ((y) |(~(z))));\n\n\t    }\n\n\t    function rotl(x,n) {\n\t        return (x<<n) | (x>>>(32-n));\n\t    }\n\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.RIPEMD160('message');\n\t     *     var hash = CryptoJS.RIPEMD160(wordArray);\n\t     */\n\t    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);\n\t     */\n\t    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);\n\t}(Math));\n\n\n\treturn CryptoJS.RIPEMD160;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-1 hash algorithm.\n\t     */\n\t    var SHA1 = C_algo.SHA1 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476,\n\t                0xc3d2e1f0\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\n\t            // Computation\n\t            for (var i = 0; i < 80; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n\t                    W[i] = (n << 1) | (n >>> 31);\n\t                }\n\n\t                var t = ((a << 5) | (a >>> 27)) + e + W[i];\n\t                if (i < 20) {\n\t                    t += ((b & c) | (~b & d)) + 0x5a827999;\n\t                } else if (i < 40) {\n\t                    t += (b ^ c ^ d) + 0x6ed9eba1;\n\t                } else if (i < 60) {\n\t                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\n\t                } else /* if (i < 80) */ {\n\t                    t += (b ^ c ^ d) - 0x359d3e2a;\n\t                }\n\n\t                e = d;\n\t                d = c;\n\t                c = (b << 30) | (b >>> 2);\n\t                b = a;\n\t                a = t;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA1('message');\n\t     *     var hash = CryptoJS.SHA1(wordArray);\n\t     */\n\t    C.SHA1 = Hasher._createHelper(SHA1);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA1(message, key);\n\t     */\n\t    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n\t}());\n\n\n\treturn CryptoJS.SHA1;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha256\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha256\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA256 = C_algo.SHA256;\n\n\t    /**\n\t     * SHA-224 hash algorithm.\n\t     */\n\t    var SHA224 = C_algo.SHA224 = SHA256.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n\t                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4\n\t            ]);\n\t        },\n\n\t        _doFinalize: function () {\n\t            var hash = SHA256._doFinalize.call(this);\n\n\t            hash.sigBytes -= 4;\n\n\t            return hash;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA224('message');\n\t     *     var hash = CryptoJS.SHA224(wordArray);\n\t     */\n\t    C.SHA224 = SHA256._createHelper(SHA224);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA224(message, key);\n\t     */\n\t    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);\n\t}());\n\n\n\treturn CryptoJS.SHA224;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Initialization and round constants tables\n\t    var H = [];\n\t    var K = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        function isPrime(n) {\n\t            var sqrtN = Math.sqrt(n);\n\t            for (var factor = 2; factor <= sqrtN; factor++) {\n\t                if (!(n % factor)) {\n\t                    return false;\n\t                }\n\t            }\n\n\t            return true;\n\t        }\n\n\t        function getFractionalBits(n) {\n\t            return ((n - (n | 0)) * 0x100000000) | 0;\n\t        }\n\n\t        var n = 2;\n\t        var nPrime = 0;\n\t        while (nPrime < 64) {\n\t            if (isPrime(n)) {\n\t                if (nPrime < 8) {\n\t                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n\t                }\n\t                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n\n\t                nPrime++;\n\t            }\n\n\t            n++;\n\t        }\n\t    }());\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-256 hash algorithm.\n\t     */\n\t    var SHA256 = C_algo.SHA256 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init(H.slice(0));\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\t            var f = H[5];\n\t            var g = H[6];\n\t            var h = H[7];\n\n\t            // Computation\n\t            for (var i = 0; i < 64; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var gamma0x = W[i - 15];\n\t                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\n\t                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^\n\t                                   (gamma0x >>> 3);\n\n\t                    var gamma1x = W[i - 2];\n\t                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n\t                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^\n\t                                   (gamma1x >>> 10);\n\n\t                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n\t                }\n\n\t                var ch  = (e & f) ^ (~e & g);\n\t                var maj = (a & b) ^ (a & c) ^ (b & c);\n\n\t                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n\t                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n\n\t                var t1 = h + sigma1 + ch + K[i] + W[i];\n\t                var t2 = sigma0 + maj;\n\n\t                h = g;\n\t                g = f;\n\t                f = e;\n\t                e = (d + t1) | 0;\n\t                d = c;\n\t                c = b;\n\t                b = a;\n\t                a = (t1 + t2) | 0;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t            H[5] = (H[5] + f) | 0;\n\t            H[6] = (H[6] + g) | 0;\n\t            H[7] = (H[7] + h) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA256('message');\n\t     *     var hash = CryptoJS.SHA256(wordArray);\n\t     */\n\t    C.SHA256 = Hasher._createHelper(SHA256);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA256(message, key);\n\t     */\n\t    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\n\t}(Math));\n\n\n\treturn CryptoJS.SHA256;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_x64 = C.x64;\n\t    var X64Word = C_x64.Word;\n\t    var C_algo = C.algo;\n\n\t    // Constants tables\n\t    var RHO_OFFSETS = [];\n\t    var PI_INDEXES  = [];\n\t    var ROUND_CONSTANTS = [];\n\n\t    // Compute Constants\n\t    (function () {\n\t        // Compute rho offset constants\n\t        var x = 1, y = 0;\n\t        for (var t = 0; t < 24; t++) {\n\t            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;\n\n\t            var newX = y % 5;\n\t            var newY = (2 * x + 3 * y) % 5;\n\t            x = newX;\n\t            y = newY;\n\t        }\n\n\t        // Compute pi index constants\n\t        for (var x = 0; x < 5; x++) {\n\t            for (var y = 0; y < 5; y++) {\n\t                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;\n\t            }\n\t        }\n\n\t        // Compute round constants\n\t        var LFSR = 0x01;\n\t        for (var i = 0; i < 24; i++) {\n\t            var roundConstantMsw = 0;\n\t            var roundConstantLsw = 0;\n\n\t            for (var j = 0; j < 7; j++) {\n\t                if (LFSR & 0x01) {\n\t                    var bitPosition = (1 << j) - 1;\n\t                    if (bitPosition < 32) {\n\t                        roundConstantLsw ^= 1 << bitPosition;\n\t                    } else /* if (bitPosition >= 32) */ {\n\t                        roundConstantMsw ^= 1 << (bitPosition - 32);\n\t                    }\n\t                }\n\n\t                // Compute next LFSR\n\t                if (LFSR & 0x80) {\n\t                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1\n\t                    LFSR = (LFSR << 1) ^ 0x71;\n\t                } else {\n\t                    LFSR <<= 1;\n\t                }\n\t            }\n\n\t            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);\n\t        }\n\t    }());\n\n\t    // Reusable objects for temporary values\n\t    var T = [];\n\t    (function () {\n\t        for (var i = 0; i < 25; i++) {\n\t            T[i] = X64Word.create();\n\t        }\n\t    }());\n\n\t    /**\n\t     * SHA-3 hash algorithm.\n\t     */\n\t    var SHA3 = C_algo.SHA3 = Hasher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} outputLength\n\t         *   The desired number of bits in the output hash.\n\t         *   Only values permitted are: 224, 256, 384, 512.\n\t         *   Default: 512\n\t         */\n\t        cfg: Hasher.cfg.extend({\n\t            outputLength: 512\n\t        }),\n\n\t        _doReset: function () {\n\t            var state = this._state = []\n\t            for (var i = 0; i < 25; i++) {\n\t                state[i] = new X64Word.init();\n\t            }\n\n\t            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcuts\n\t            var state = this._state;\n\t            var nBlockSizeLanes = this.blockSize / 2;\n\n\t            // Absorb\n\t            for (var i = 0; i < nBlockSizeLanes; i++) {\n\t                // Shortcuts\n\t                var M2i  = M[offset + 2 * i];\n\t                var M2i1 = M[offset + 2 * i + 1];\n\n\t                // Swap endian\n\t                M2i = (\n\t                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |\n\t                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)\n\t                );\n\t                M2i1 = (\n\t                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |\n\t                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)\n\t                );\n\n\t                // Absorb message into state\n\t                var lane = state[i];\n\t                lane.high ^= M2i1;\n\t                lane.low  ^= M2i;\n\t            }\n\n\t            // Rounds\n\t            for (var round = 0; round < 24; round++) {\n\t                // Theta\n\t                for (var x = 0; x < 5; x++) {\n\t                    // Mix column lanes\n\t                    var tMsw = 0, tLsw = 0;\n\t                    for (var y = 0; y < 5; y++) {\n\t                        var lane = state[x + 5 * y];\n\t                        tMsw ^= lane.high;\n\t                        tLsw ^= lane.low;\n\t                    }\n\n\t                    // Temporary values\n\t                    var Tx = T[x];\n\t                    Tx.high = tMsw;\n\t                    Tx.low  = tLsw;\n\t                }\n\t                for (var x = 0; x < 5; x++) {\n\t                    // Shortcuts\n\t                    var Tx4 = T[(x + 4) % 5];\n\t                    var Tx1 = T[(x + 1) % 5];\n\t                    var Tx1Msw = Tx1.high;\n\t                    var Tx1Lsw = Tx1.low;\n\n\t                    // Mix surrounding columns\n\t                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));\n\t                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));\n\t                    for (var y = 0; y < 5; y++) {\n\t                        var lane = state[x + 5 * y];\n\t                        lane.high ^= tMsw;\n\t                        lane.low  ^= tLsw;\n\t                    }\n\t                }\n\n\t                // Rho Pi\n\t                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {\n\t                    var tMsw;\n\t                    var tLsw;\n\n\t                    // Shortcuts\n\t                    var lane = state[laneIndex];\n\t                    var laneMsw = lane.high;\n\t                    var laneLsw = lane.low;\n\t                    var rhoOffset = RHO_OFFSETS[laneIndex];\n\n\t                    // Rotate lanes\n\t                    if (rhoOffset < 32) {\n\t                        tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));\n\t                        tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));\n\t                    } else /* if (rhoOffset >= 32) */ {\n\t                        tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));\n\t                        tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));\n\t                    }\n\n\t                    // Transpose lanes\n\t                    var TPiLane = T[PI_INDEXES[laneIndex]];\n\t                    TPiLane.high = tMsw;\n\t                    TPiLane.low  = tLsw;\n\t                }\n\n\t                // Rho pi at x = y = 0\n\t                var T0 = T[0];\n\t                var state0 = state[0];\n\t                T0.high = state0.high;\n\t                T0.low  = state0.low;\n\n\t                // Chi\n\t                for (var x = 0; x < 5; x++) {\n\t                    for (var y = 0; y < 5; y++) {\n\t                        // Shortcuts\n\t                        var laneIndex = x + 5 * y;\n\t                        var lane = state[laneIndex];\n\t                        var TLane = T[laneIndex];\n\t                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];\n\t                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];\n\n\t                        // Mix rows\n\t                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);\n\t                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);\n\t                    }\n\t                }\n\n\t                // Iota\n\t                var lane = state[0];\n\t                var roundConstant = ROUND_CONSTANTS[round];\n\t                lane.high ^= roundConstant.high;\n\t                lane.low  ^= roundConstant.low;\n\t            }\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\t            var blockSizeBits = this.blockSize * 32;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);\n\t            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var state = this._state;\n\t            var outputLengthBytes = this.cfg.outputLength / 8;\n\t            var outputLengthLanes = outputLengthBytes / 8;\n\n\t            // Squeeze\n\t            var hashWords = [];\n\t            for (var i = 0; i < outputLengthLanes; i++) {\n\t                // Shortcuts\n\t                var lane = state[i];\n\t                var laneMsw = lane.high;\n\t                var laneLsw = lane.low;\n\n\t                // Swap endian\n\t                laneMsw = (\n\t                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |\n\t                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)\n\t                );\n\t                laneLsw = (\n\t                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |\n\t                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)\n\t                );\n\n\t                // Squeeze state to retrieve hash\n\t                hashWords.push(laneLsw);\n\t                hashWords.push(laneMsw);\n\t            }\n\n\t            // Return final computed hash\n\t            return new WordArray.init(hashWords, outputLengthBytes);\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\n\t            var state = clone._state = this._state.slice(0);\n\t            for (var i = 0; i < 25; i++) {\n\t                state[i] = state[i].clone();\n\t            }\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA3('message');\n\t     *     var hash = CryptoJS.SHA3(wordArray);\n\t     */\n\t    C.SHA3 = Hasher._createHelper(SHA3);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA3(message, key);\n\t     */\n\t    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);\n\t}(Math));\n\n\n\treturn CryptoJS.SHA3;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"), require(\"./sha512\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\", \"./sha512\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_x64 = C.x64;\n\t    var X64Word = C_x64.Word;\n\t    var X64WordArray = C_x64.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA512 = C_algo.SHA512;\n\n\t    /**\n\t     * SHA-384 hash algorithm.\n\t     */\n\t    var SHA384 = C_algo.SHA384 = SHA512.extend({\n\t        _doReset: function () {\n\t            this._hash = new X64WordArray.init([\n\t                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),\n\t                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),\n\t                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),\n\t                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)\n\t            ]);\n\t        },\n\n\t        _doFinalize: function () {\n\t            var hash = SHA512._doFinalize.call(this);\n\n\t            hash.sigBytes -= 16;\n\n\t            return hash;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA384('message');\n\t     *     var hash = CryptoJS.SHA384(wordArray);\n\t     */\n\t    C.SHA384 = SHA512._createHelper(SHA384);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA384(message, key);\n\t     */\n\t    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);\n\t}());\n\n\n\treturn CryptoJS.SHA384;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_x64 = C.x64;\n\t    var X64Word = C_x64.Word;\n\t    var X64WordArray = C_x64.WordArray;\n\t    var C_algo = C.algo;\n\n\t    function X64Word_create() {\n\t        return X64Word.create.apply(X64Word, arguments);\n\t    }\n\n\t    // Constants\n\t    var K = [\n\t        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),\n\t        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),\n\t        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),\n\t        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),\n\t        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),\n\t        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),\n\t        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),\n\t        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),\n\t        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),\n\t        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),\n\t        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),\n\t        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),\n\t        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),\n\t        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),\n\t        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),\n\t        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),\n\t        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),\n\t        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),\n\t        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),\n\t        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),\n\t        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),\n\t        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),\n\t        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),\n\t        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),\n\t        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),\n\t        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),\n\t        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),\n\t        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),\n\t        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),\n\t        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),\n\t        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),\n\t        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),\n\t        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),\n\t        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),\n\t        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),\n\t        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),\n\t        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),\n\t        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),\n\t        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),\n\t        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)\n\t    ];\n\n\t    // Reusable objects\n\t    var W = [];\n\t    (function () {\n\t        for (var i = 0; i < 80; i++) {\n\t            W[i] = X64Word_create();\n\t        }\n\t    }());\n\n\t    /**\n\t     * SHA-512 hash algorithm.\n\t     */\n\t    var SHA512 = C_algo.SHA512 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new X64WordArray.init([\n\t                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),\n\t                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),\n\t                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),\n\t                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcuts\n\t            var H = this._hash.words;\n\n\t            var H0 = H[0];\n\t            var H1 = H[1];\n\t            var H2 = H[2];\n\t            var H3 = H[3];\n\t            var H4 = H[4];\n\t            var H5 = H[5];\n\t            var H6 = H[6];\n\t            var H7 = H[7];\n\n\t            var H0h = H0.high;\n\t            var H0l = H0.low;\n\t            var H1h = H1.high;\n\t            var H1l = H1.low;\n\t            var H2h = H2.high;\n\t            var H2l = H2.low;\n\t            var H3h = H3.high;\n\t            var H3l = H3.low;\n\t            var H4h = H4.high;\n\t            var H4l = H4.low;\n\t            var H5h = H5.high;\n\t            var H5l = H5.low;\n\t            var H6h = H6.high;\n\t            var H6l = H6.low;\n\t            var H7h = H7.high;\n\t            var H7l = H7.low;\n\n\t            // Working variables\n\t            var ah = H0h;\n\t            var al = H0l;\n\t            var bh = H1h;\n\t            var bl = H1l;\n\t            var ch = H2h;\n\t            var cl = H2l;\n\t            var dh = H3h;\n\t            var dl = H3l;\n\t            var eh = H4h;\n\t            var el = H4l;\n\t            var fh = H5h;\n\t            var fl = H5l;\n\t            var gh = H6h;\n\t            var gl = H6l;\n\t            var hh = H7h;\n\t            var hl = H7l;\n\n\t            // Rounds\n\t            for (var i = 0; i < 80; i++) {\n\t                var Wil;\n\t                var Wih;\n\n\t                // Shortcut\n\t                var Wi = W[i];\n\n\t                // Extend message\n\t                if (i < 16) {\n\t                    Wih = Wi.high = M[offset + i * 2]     | 0;\n\t                    Wil = Wi.low  = M[offset + i * 2 + 1] | 0;\n\t                } else {\n\t                    // Gamma0\n\t                    var gamma0x  = W[i - 15];\n\t                    var gamma0xh = gamma0x.high;\n\t                    var gamma0xl = gamma0x.low;\n\t                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);\n\t                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));\n\n\t                    // Gamma1\n\t                    var gamma1x  = W[i - 2];\n\t                    var gamma1xh = gamma1x.high;\n\t                    var gamma1xl = gamma1x.low;\n\t                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);\n\t                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));\n\n\t                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n\t                    var Wi7  = W[i - 7];\n\t                    var Wi7h = Wi7.high;\n\t                    var Wi7l = Wi7.low;\n\n\t                    var Wi16  = W[i - 16];\n\t                    var Wi16h = Wi16.high;\n\t                    var Wi16l = Wi16.low;\n\n\t                    Wil = gamma0l + Wi7l;\n\t                    Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);\n\t                    Wil = Wil + gamma1l;\n\t                    Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);\n\t                    Wil = Wil + Wi16l;\n\t                    Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);\n\n\t                    Wi.high = Wih;\n\t                    Wi.low  = Wil;\n\t                }\n\n\t                var chh  = (eh & fh) ^ (~eh & gh);\n\t                var chl  = (el & fl) ^ (~el & gl);\n\t                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\n\t                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);\n\n\t                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\n\t                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\n\t                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));\n\t                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));\n\n\t                // t1 = h + sigma1 + ch + K[i] + W[i]\n\t                var Ki  = K[i];\n\t                var Kih = Ki.high;\n\t                var Kil = Ki.low;\n\n\t                var t1l = hl + sigma1l;\n\t                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\n\t                var t1l = t1l + chl;\n\t                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\n\t                var t1l = t1l + Kil;\n\t                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);\n\t                var t1l = t1l + Wil;\n\t                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);\n\n\t                // t2 = sigma0 + maj\n\t                var t2l = sigma0l + majl;\n\t                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);\n\n\t                // Update working variables\n\t                hh = gh;\n\t                hl = gl;\n\t                gh = fh;\n\t                gl = fl;\n\t                fh = eh;\n\t                fl = el;\n\t                el = (dl + t1l) | 0;\n\t                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n\t                dh = ch;\n\t                dl = cl;\n\t                ch = bh;\n\t                cl = bl;\n\t                bh = ah;\n\t                bl = al;\n\t                al = (t1l + t2l) | 0;\n\t                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\n\t            }\n\n\t            // Intermediate hash value\n\t            H0l = H0.low  = (H0l + al);\n\t            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));\n\t            H1l = H1.low  = (H1l + bl);\n\t            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));\n\t            H2l = H2.low  = (H2l + cl);\n\t            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));\n\t            H3l = H3.low  = (H3l + dl);\n\t            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));\n\t            H4l = H4.low  = (H4l + el);\n\t            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));\n\t            H5l = H5.low  = (H5l + fl);\n\t            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));\n\t            H6l = H6.low  = (H6l + gl);\n\t            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));\n\t            H7l = H7.low  = (H7l + hl);\n\t            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Convert hash to 32-bit word array before returning\n\t            var hash = this._hash.toX32();\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        },\n\n\t        blockSize: 1024/32\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA512('message');\n\t     *     var hash = CryptoJS.SHA512(wordArray);\n\t     */\n\t    C.SHA512 = Hasher._createHelper(SHA512);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA512(message, key);\n\t     */\n\t    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);\n\t}());\n\n\n\treturn CryptoJS.SHA512;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var BlockCipher = C_lib.BlockCipher;\n\t    var C_algo = C.algo;\n\n\t    // Permuted Choice 1 constants\n\t    var PC1 = [\n\t        57, 49, 41, 33, 25, 17, 9,  1,\n\t        58, 50, 42, 34, 26, 18, 10, 2,\n\t        59, 51, 43, 35, 27, 19, 11, 3,\n\t        60, 52, 44, 36, 63, 55, 47, 39,\n\t        31, 23, 15, 7,  62, 54, 46, 38,\n\t        30, 22, 14, 6,  61, 53, 45, 37,\n\t        29, 21, 13, 5,  28, 20, 12, 4\n\t    ];\n\n\t    // Permuted Choice 2 constants\n\t    var PC2 = [\n\t        14, 17, 11, 24, 1,  5,\n\t        3,  28, 15, 6,  21, 10,\n\t        23, 19, 12, 4,  26, 8,\n\t        16, 7,  27, 20, 13, 2,\n\t        41, 52, 31, 37, 47, 55,\n\t        30, 40, 51, 45, 33, 48,\n\t        44, 49, 39, 56, 34, 53,\n\t        46, 42, 50, 36, 29, 32\n\t    ];\n\n\t    // Cumulative bit shift constants\n\t    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];\n\n\t    // SBOXes and round permutation constants\n\t    var SBOX_P = [\n\t        {\n\t            0x0: 0x808200,\n\t            0x10000000: 0x8000,\n\t            0x20000000: 0x808002,\n\t            0x30000000: 0x2,\n\t            0x40000000: 0x200,\n\t            0x50000000: 0x808202,\n\t            0x60000000: 0x800202,\n\t            0x70000000: 0x800000,\n\t            0x80000000: 0x202,\n\t            0x90000000: 0x800200,\n\t            0xa0000000: 0x8200,\n\t            0xb0000000: 0x808000,\n\t            0xc0000000: 0x8002,\n\t            0xd0000000: 0x800002,\n\t            0xe0000000: 0x0,\n\t            0xf0000000: 0x8202,\n\t            0x8000000: 0x0,\n\t            0x18000000: 0x808202,\n\t            0x28000000: 0x8202,\n\t            0x38000000: 0x8000,\n\t            0x48000000: 0x808200,\n\t            0x58000000: 0x200,\n\t            0x68000000: 0x808002,\n\t            0x78000000: 0x2,\n\t            0x88000000: 0x800200,\n\t            0x98000000: 0x8200,\n\t            0xa8000000: 0x808000,\n\t            0xb8000000: 0x800202,\n\t            0xc8000000: 0x800002,\n\t            0xd8000000: 0x8002,\n\t            0xe8000000: 0x202,\n\t            0xf8000000: 0x800000,\n\t            0x1: 0x8000,\n\t            0x10000001: 0x2,\n\t            0x20000001: 0x808200,\n\t            0x30000001: 0x800000,\n\t            0x40000001: 0x808002,\n\t            0x50000001: 0x8200,\n\t            0x60000001: 0x200,\n\t            0x70000001: 0x800202,\n\t            0x80000001: 0x808202,\n\t            0x90000001: 0x808000,\n\t            0xa0000001: 0x800002,\n\t            0xb0000001: 0x8202,\n\t            0xc0000001: 0x202,\n\t            0xd0000001: 0x800200,\n\t            0xe0000001: 0x8002,\n\t            0xf0000001: 0x0,\n\t            0x8000001: 0x808202,\n\t            0x18000001: 0x808000,\n\t            0x28000001: 0x800000,\n\t            0x38000001: 0x200,\n\t            0x48000001: 0x8000,\n\t            0x58000001: 0x800002,\n\t            0x68000001: 0x2,\n\t            0x78000001: 0x8202,\n\t            0x88000001: 0x8002,\n\t            0x98000001: 0x800202,\n\t            0xa8000001: 0x202,\n\t            0xb8000001: 0x808200,\n\t            0xc8000001: 0x800200,\n\t            0xd8000001: 0x0,\n\t            0xe8000001: 0x8200,\n\t            0xf8000001: 0x808002\n\t        },\n\t        {\n\t            0x0: 0x40084010,\n\t            0x1000000: 0x4000,\n\t            0x2000000: 0x80000,\n\t            0x3000000: 0x40080010,\n\t            0x4000000: 0x40000010,\n\t            0x5000000: 0x40084000,\n\t            0x6000000: 0x40004000,\n\t            0x7000000: 0x10,\n\t            0x8000000: 0x84000,\n\t            0x9000000: 0x40004010,\n\t            0xa000000: 0x40000000,\n\t            0xb000000: 0x84010,\n\t            0xc000000: 0x80010,\n\t            0xd000000: 0x0,\n\t            0xe000000: 0x4010,\n\t            0xf000000: 0x40080000,\n\t            0x800000: 0x40004000,\n\t            0x1800000: 0x84010,\n\t            0x2800000: 0x10,\n\t            0x3800000: 0x40004010,\n\t            0x4800000: 0x40084010,\n\t            0x5800000: 0x40000000,\n\t            0x6800000: 0x80000,\n\t            0x7800000: 0x40080010,\n\t            0x8800000: 0x80010,\n\t            0x9800000: 0x0,\n\t            0xa800000: 0x4000,\n\t            0xb800000: 0x40080000,\n\t            0xc800000: 0x40000010,\n\t            0xd800000: 0x84000,\n\t            0xe800000: 0x40084000,\n\t            0xf800000: 0x4010,\n\t            0x10000000: 0x0,\n\t            0x11000000: 0x40080010,\n\t            0x12000000: 0x40004010,\n\t            0x13000000: 0x40084000,\n\t            0x14000000: 0x40080000,\n\t            0x15000000: 0x10,\n\t            0x16000000: 0x84010,\n\t            0x17000000: 0x4000,\n\t            0x18000000: 0x4010,\n\t            0x19000000: 0x80000,\n\t            0x1a000000: 0x80010,\n\t            0x1b000000: 0x40000010,\n\t            0x1c000000: 0x84000,\n\t            0x1d000000: 0x40004000,\n\t            0x1e000000: 0x40000000,\n\t            0x1f000000: 0x40084010,\n\t            0x10800000: 0x84010,\n\t            0x11800000: 0x80000,\n\t            0x12800000: 0x40080000,\n\t            0x13800000: 0x4000,\n\t            0x14800000: 0x40004000,\n\t            0x15800000: 0x40084010,\n\t            0x16800000: 0x10,\n\t            0x17800000: 0x40000000,\n\t            0x18800000: 0x40084000,\n\t            0x19800000: 0x40000010,\n\t            0x1a800000: 0x40004010,\n\t            0x1b800000: 0x80010,\n\t            0x1c800000: 0x0,\n\t            0x1d800000: 0x4010,\n\t            0x1e800000: 0x40080010,\n\t            0x1f800000: 0x84000\n\t        },\n\t        {\n\t            0x0: 0x104,\n\t            0x100000: 0x0,\n\t            0x200000: 0x4000100,\n\t            0x300000: 0x10104,\n\t            0x400000: 0x10004,\n\t            0x500000: 0x4000004,\n\t            0x600000: 0x4010104,\n\t            0x700000: 0x4010000,\n\t            0x800000: 0x4000000,\n\t            0x900000: 0x4010100,\n\t            0xa00000: 0x10100,\n\t            0xb00000: 0x4010004,\n\t            0xc00000: 0x4000104,\n\t            0xd00000: 0x10000,\n\t            0xe00000: 0x4,\n\t            0xf00000: 0x100,\n\t            0x80000: 0x4010100,\n\t            0x180000: 0x4010004,\n\t            0x280000: 0x0,\n\t            0x380000: 0x4000100,\n\t            0x480000: 0x4000004,\n\t            0x580000: 0x10000,\n\t            0x680000: 0x10004,\n\t            0x780000: 0x104,\n\t            0x880000: 0x4,\n\t            0x980000: 0x100,\n\t            0xa80000: 0x4010000,\n\t            0xb80000: 0x10104,\n\t            0xc80000: 0x10100,\n\t            0xd80000: 0x4000104,\n\t            0xe80000: 0x4010104,\n\t            0xf80000: 0x4000000,\n\t            0x1000000: 0x4010100,\n\t            0x1100000: 0x10004,\n\t            0x1200000: 0x10000,\n\t            0x1300000: 0x4000100,\n\t            0x1400000: 0x100,\n\t            0x1500000: 0x4010104,\n\t            0x1600000: 0x4000004,\n\t            0x1700000: 0x0,\n\t            0x1800000: 0x4000104,\n\t            0x1900000: 0x4000000,\n\t            0x1a00000: 0x4,\n\t            0x1b00000: 0x10100,\n\t            0x1c00000: 0x4010000,\n\t            0x1d00000: 0x104,\n\t            0x1e00000: 0x10104,\n\t            0x1f00000: 0x4010004,\n\t            0x1080000: 0x4000000,\n\t            0x1180000: 0x104,\n\t            0x1280000: 0x4010100,\n\t            0x1380000: 0x0,\n\t            0x1480000: 0x10004,\n\t            0x1580000: 0x4000100,\n\t            0x1680000: 0x100,\n\t            0x1780000: 0x4010004,\n\t            0x1880000: 0x10000,\n\t            0x1980000: 0x4010104,\n\t            0x1a80000: 0x10104,\n\t            0x1b80000: 0x4000004,\n\t            0x1c80000: 0x4000104,\n\t            0x1d80000: 0x4010000,\n\t            0x1e80000: 0x4,\n\t            0x1f80000: 0x10100\n\t        },\n\t        {\n\t            0x0: 0x80401000,\n\t            0x10000: 0x80001040,\n\t            0x20000: 0x401040,\n\t            0x30000: 0x80400000,\n\t            0x40000: 0x0,\n\t            0x50000: 0x401000,\n\t            0x60000: 0x80000040,\n\t            0x70000: 0x400040,\n\t            0x80000: 0x80000000,\n\t            0x90000: 0x400000,\n\t            0xa0000: 0x40,\n\t            0xb0000: 0x80001000,\n\t            0xc0000: 0x80400040,\n\t            0xd0000: 0x1040,\n\t            0xe0000: 0x1000,\n\t            0xf0000: 0x80401040,\n\t            0x8000: 0x80001040,\n\t            0x18000: 0x40,\n\t            0x28000: 0x80400040,\n\t            0x38000: 0x80001000,\n\t            0x48000: 0x401000,\n\t            0x58000: 0x80401040,\n\t            0x68000: 0x0,\n\t            0x78000: 0x80400000,\n\t            0x88000: 0x1000,\n\t            0x98000: 0x80401000,\n\t            0xa8000: 0x400000,\n\t            0xb8000: 0x1040,\n\t            0xc8000: 0x80000000,\n\t            0xd8000: 0x400040,\n\t            0xe8000: 0x401040,\n\t            0xf8000: 0x80000040,\n\t            0x100000: 0x400040,\n\t            0x110000: 0x401000,\n\t            0x120000: 0x80000040,\n\t            0x130000: 0x0,\n\t            0x140000: 0x1040,\n\t            0x150000: 0x80400040,\n\t            0x160000: 0x80401000,\n\t            0x170000: 0x80001040,\n\t            0x180000: 0x80401040,\n\t            0x190000: 0x80000000,\n\t            0x1a0000: 0x80400000,\n\t            0x1b0000: 0x401040,\n\t            0x1c0000: 0x80001000,\n\t            0x1d0000: 0x400000,\n\t            0x1e0000: 0x40,\n\t            0x1f0000: 0x1000,\n\t            0x108000: 0x80400000,\n\t            0x118000: 0x80401040,\n\t            0x128000: 0x0,\n\t            0x138000: 0x401000,\n\t            0x148000: 0x400040,\n\t            0x158000: 0x80000000,\n\t            0x168000: 0x80001040,\n\t            0x178000: 0x40,\n\t            0x188000: 0x80000040,\n\t            0x198000: 0x1000,\n\t            0x1a8000: 0x80001000,\n\t            0x1b8000: 0x80400040,\n\t            0x1c8000: 0x1040,\n\t            0x1d8000: 0x80401000,\n\t            0x1e8000: 0x400000,\n\t            0x1f8000: 0x401040\n\t        },\n\t        {\n\t            0x0: 0x80,\n\t            0x1000: 0x1040000,\n\t            0x2000: 0x40000,\n\t            0x3000: 0x20000000,\n\t            0x4000: 0x20040080,\n\t            0x5000: 0x1000080,\n\t            0x6000: 0x21000080,\n\t            0x7000: 0x40080,\n\t            0x8000: 0x1000000,\n\t            0x9000: 0x20040000,\n\t            0xa000: 0x20000080,\n\t            0xb000: 0x21040080,\n\t            0xc000: 0x21040000,\n\t            0xd000: 0x0,\n\t            0xe000: 0x1040080,\n\t            0xf000: 0x21000000,\n\t            0x800: 0x1040080,\n\t            0x1800: 0x21000080,\n\t            0x2800: 0x80,\n\t            0x3800: 0x1040000,\n\t            0x4800: 0x40000,\n\t            0x5800: 0x20040080,\n\t            0x6800: 0x21040000,\n\t            0x7800: 0x20000000,\n\t            0x8800: 0x20040000,\n\t            0x9800: 0x0,\n\t            0xa800: 0x21040080,\n\t            0xb800: 0x1000080,\n\t            0xc800: 0x20000080,\n\t            0xd800: 0x21000000,\n\t            0xe800: 0x1000000,\n\t            0xf800: 0x40080,\n\t            0x10000: 0x40000,\n\t            0x11000: 0x80,\n\t            0x12000: 0x20000000,\n\t            0x13000: 0x21000080,\n\t            0x14000: 0x1000080,\n\t            0x15000: 0x21040000,\n\t            0x16000: 0x20040080,\n\t            0x17000: 0x1000000,\n\t            0x18000: 0x21040080,\n\t            0x19000: 0x21000000,\n\t            0x1a000: 0x1040000,\n\t            0x1b000: 0x20040000,\n\t            0x1c000: 0x40080,\n\t            0x1d000: 0x20000080,\n\t            0x1e000: 0x0,\n\t            0x1f000: 0x1040080,\n\t            0x10800: 0x21000080,\n\t            0x11800: 0x1000000,\n\t            0x12800: 0x1040000,\n\t            0x13800: 0x20040080,\n\t            0x14800: 0x20000000,\n\t            0x15800: 0x1040080,\n\t            0x16800: 0x80,\n\t            0x17800: 0x21040000,\n\t            0x18800: 0x40080,\n\t            0x19800: 0x21040080,\n\t            0x1a800: 0x0,\n\t            0x1b800: 0x21000000,\n\t            0x1c800: 0x1000080,\n\t            0x1d800: 0x40000,\n\t            0x1e800: 0x20040000,\n\t            0x1f800: 0x20000080\n\t        },\n\t        {\n\t            0x0: 0x10000008,\n\t            0x100: 0x2000,\n\t            0x200: 0x10200000,\n\t            0x300: 0x10202008,\n\t            0x400: 0x10002000,\n\t            0x500: 0x200000,\n\t            0x600: 0x200008,\n\t            0x700: 0x10000000,\n\t            0x800: 0x0,\n\t            0x900: 0x10002008,\n\t            0xa00: 0x202000,\n\t            0xb00: 0x8,\n\t            0xc00: 0x10200008,\n\t            0xd00: 0x202008,\n\t            0xe00: 0x2008,\n\t            0xf00: 0x10202000,\n\t            0x80: 0x10200000,\n\t            0x180: 0x10202008,\n\t            0x280: 0x8,\n\t            0x380: 0x200000,\n\t            0x480: 0x202008,\n\t            0x580: 0x10000008,\n\t            0x680: 0x10002000,\n\t            0x780: 0x2008,\n\t            0x880: 0x200008,\n\t            0x980: 0x2000,\n\t            0xa80: 0x10002008,\n\t            0xb80: 0x10200008,\n\t            0xc80: 0x0,\n\t            0xd80: 0x10202000,\n\t            0xe80: 0x202000,\n\t            0xf80: 0x10000000,\n\t            0x1000: 0x10002000,\n\t            0x1100: 0x10200008,\n\t            0x1200: 0x10202008,\n\t            0x1300: 0x2008,\n\t            0x1400: 0x200000,\n\t            0x1500: 0x10000000,\n\t            0x1600: 0x10000008,\n\t            0x1700: 0x202000,\n\t            0x1800: 0x202008,\n\t            0x1900: 0x0,\n\t            0x1a00: 0x8,\n\t            0x1b00: 0x10200000,\n\t            0x1c00: 0x2000,\n\t            0x1d00: 0x10002008,\n\t            0x1e00: 0x10202000,\n\t            0x1f00: 0x200008,\n\t            0x1080: 0x8,\n\t            0x1180: 0x202000,\n\t            0x1280: 0x200000,\n\t            0x1380: 0x10000008,\n\t            0x1480: 0x10002000,\n\t            0x1580: 0x2008,\n\t            0x1680: 0x10202008,\n\t            0x1780: 0x10200000,\n\t            0x1880: 0x10202000,\n\t            0x1980: 0x10200008,\n\t            0x1a80: 0x2000,\n\t            0x1b80: 0x202008,\n\t            0x1c80: 0x200008,\n\t            0x1d80: 0x0,\n\t            0x1e80: 0x10000000,\n\t            0x1f80: 0x10002008\n\t        },\n\t        {\n\t            0x0: 0x100000,\n\t            0x10: 0x2000401,\n\t            0x20: 0x400,\n\t            0x30: 0x100401,\n\t            0x40: 0x2100401,\n\t            0x50: 0x0,\n\t            0x60: 0x1,\n\t            0x70: 0x2100001,\n\t            0x80: 0x2000400,\n\t            0x90: 0x100001,\n\t            0xa0: 0x2000001,\n\t            0xb0: 0x2100400,\n\t            0xc0: 0x2100000,\n\t            0xd0: 0x401,\n\t            0xe0: 0x100400,\n\t            0xf0: 0x2000000,\n\t            0x8: 0x2100001,\n\t            0x18: 0x0,\n\t            0x28: 0x2000401,\n\t            0x38: 0x2100400,\n\t            0x48: 0x100000,\n\t            0x58: 0x2000001,\n\t            0x68: 0x2000000,\n\t            0x78: 0x401,\n\t            0x88: 0x100401,\n\t            0x98: 0x2000400,\n\t            0xa8: 0x2100000,\n\t            0xb8: 0x100001,\n\t            0xc8: 0x400,\n\t            0xd8: 0x2100401,\n\t            0xe8: 0x1,\n\t            0xf8: 0x100400,\n\t            0x100: 0x2000000,\n\t            0x110: 0x100000,\n\t            0x120: 0x2000401,\n\t            0x130: 0x2100001,\n\t            0x140: 0x100001,\n\t            0x150: 0x2000400,\n\t            0x160: 0x2100400,\n\t            0x170: 0x100401,\n\t            0x180: 0x401,\n\t            0x190: 0x2100401,\n\t            0x1a0: 0x100400,\n\t            0x1b0: 0x1,\n\t            0x1c0: 0x0,\n\t            0x1d0: 0x2100000,\n\t            0x1e0: 0x2000001,\n\t            0x1f0: 0x400,\n\t            0x108: 0x100400,\n\t            0x118: 0x2000401,\n\t            0x128: 0x2100001,\n\t            0x138: 0x1,\n\t            0x148: 0x2000000,\n\t            0x158: 0x100000,\n\t            0x168: 0x401,\n\t            0x178: 0x2100400,\n\t            0x188: 0x2000001,\n\t            0x198: 0x2100000,\n\t            0x1a8: 0x0,\n\t            0x1b8: 0x2100401,\n\t            0x1c8: 0x100401,\n\t            0x1d8: 0x400,\n\t            0x1e8: 0x2000400,\n\t            0x1f8: 0x100001\n\t        },\n\t        {\n\t            0x0: 0x8000820,\n\t            0x1: 0x20000,\n\t            0x2: 0x8000000,\n\t            0x3: 0x20,\n\t            0x4: 0x20020,\n\t            0x5: 0x8020820,\n\t            0x6: 0x8020800,\n\t            0x7: 0x800,\n\t            0x8: 0x8020000,\n\t            0x9: 0x8000800,\n\t            0xa: 0x20800,\n\t            0xb: 0x8020020,\n\t            0xc: 0x820,\n\t            0xd: 0x0,\n\t            0xe: 0x8000020,\n\t            0xf: 0x20820,\n\t            0x80000000: 0x800,\n\t            0x80000001: 0x8020820,\n\t            0x80000002: 0x8000820,\n\t            0x80000003: 0x8000000,\n\t            0x80000004: 0x8020000,\n\t            0x80000005: 0x20800,\n\t            0x80000006: 0x20820,\n\t            0x80000007: 0x20,\n\t            0x80000008: 0x8000020,\n\t            0x80000009: 0x820,\n\t            0x8000000a: 0x20020,\n\t            0x8000000b: 0x8020800,\n\t            0x8000000c: 0x0,\n\t            0x8000000d: 0x8020020,\n\t            0x8000000e: 0x8000800,\n\t            0x8000000f: 0x20000,\n\t            0x10: 0x20820,\n\t            0x11: 0x8020800,\n\t            0x12: 0x20,\n\t            0x13: 0x800,\n\t            0x14: 0x8000800,\n\t            0x15: 0x8000020,\n\t            0x16: 0x8020020,\n\t            0x17: 0x20000,\n\t            0x18: 0x0,\n\t            0x19: 0x20020,\n\t            0x1a: 0x8020000,\n\t            0x1b: 0x8000820,\n\t            0x1c: 0x8020820,\n\t            0x1d: 0x20800,\n\t            0x1e: 0x820,\n\t            0x1f: 0x8000000,\n\t            0x80000010: 0x20000,\n\t            0x80000011: 0x800,\n\t            0x80000012: 0x8020020,\n\t            0x80000013: 0x20820,\n\t            0x80000014: 0x20,\n\t            0x80000015: 0x8020000,\n\t            0x80000016: 0x8000000,\n\t            0x80000017: 0x8000820,\n\t            0x80000018: 0x8020820,\n\t            0x80000019: 0x8000020,\n\t            0x8000001a: 0x8000800,\n\t            0x8000001b: 0x0,\n\t            0x8000001c: 0x20800,\n\t            0x8000001d: 0x820,\n\t            0x8000001e: 0x20020,\n\t            0x8000001f: 0x8020800\n\t        }\n\t    ];\n\n\t    // Masks that select the SBOX input\n\t    var SBOX_MASK = [\n\t        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,\n\t        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f\n\t    ];\n\n\t    /**\n\t     * DES block cipher algorithm.\n\t     */\n\t    var DES = C_algo.DES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\n\t            // Select 56 bits according to PC1\n\t            var keyBits = [];\n\t            for (var i = 0; i < 56; i++) {\n\t                var keyBitPos = PC1[i] - 1;\n\t                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;\n\t            }\n\n\t            // Assemble 16 subkeys\n\t            var subKeys = this._subKeys = [];\n\t            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {\n\t                // Create subkey\n\t                var subKey = subKeys[nSubKey] = [];\n\n\t                // Shortcut\n\t                var bitShift = BIT_SHIFTS[nSubKey];\n\n\t                // Select 48 bits according to PC2\n\t                for (var i = 0; i < 24; i++) {\n\t                    // Select from the left 28 key bits\n\t                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);\n\n\t                    // Select from the right 28 key bits\n\t                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);\n\t                }\n\n\t                // Since each subkey is applied to an expanded 32-bit input,\n\t                // the subkey can be broken into 8 values scaled to 32-bits,\n\t                // which allows the key to be used without expansion\n\t                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);\n\t                for (var i = 1; i < 7; i++) {\n\t                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);\n\t                }\n\t                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);\n\t            }\n\n\t            // Compute inverse subkeys\n\t            var invSubKeys = this._invSubKeys = [];\n\t            for (var i = 0; i < 16; i++) {\n\t                invSubKeys[i] = subKeys[15 - i];\n\t            }\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._subKeys);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._invSubKeys);\n\t        },\n\n\t        _doCryptBlock: function (M, offset, subKeys) {\n\t            // Get input\n\t            this._lBlock = M[offset];\n\t            this._rBlock = M[offset + 1];\n\n\t            // Initial permutation\n\t            exchangeLR.call(this, 4,  0x0f0f0f0f);\n\t            exchangeLR.call(this, 16, 0x0000ffff);\n\t            exchangeRL.call(this, 2,  0x33333333);\n\t            exchangeRL.call(this, 8,  0x00ff00ff);\n\t            exchangeLR.call(this, 1,  0x55555555);\n\n\t            // Rounds\n\t            for (var round = 0; round < 16; round++) {\n\t                // Shortcuts\n\t                var subKey = subKeys[round];\n\t                var lBlock = this._lBlock;\n\t                var rBlock = this._rBlock;\n\n\t                // Feistel function\n\t                var f = 0;\n\t                for (var i = 0; i < 8; i++) {\n\t                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];\n\t                }\n\t                this._lBlock = rBlock;\n\t                this._rBlock = lBlock ^ f;\n\t            }\n\n\t            // Undo swap from last round\n\t            var t = this._lBlock;\n\t            this._lBlock = this._rBlock;\n\t            this._rBlock = t;\n\n\t            // Final permutation\n\t            exchangeLR.call(this, 1,  0x55555555);\n\t            exchangeRL.call(this, 8,  0x00ff00ff);\n\t            exchangeRL.call(this, 2,  0x33333333);\n\t            exchangeLR.call(this, 16, 0x0000ffff);\n\t            exchangeLR.call(this, 4,  0x0f0f0f0f);\n\n\t            // Set output\n\t            M[offset] = this._lBlock;\n\t            M[offset + 1] = this._rBlock;\n\t        },\n\n\t        keySize: 64/32,\n\n\t        ivSize: 64/32,\n\n\t        blockSize: 64/32\n\t    });\n\n\t    // Swap bits across the left and right words\n\t    function exchangeLR(offset, mask) {\n\t        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;\n\t        this._rBlock ^= t;\n\t        this._lBlock ^= t << offset;\n\t    }\n\n\t    function exchangeRL(offset, mask) {\n\t        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;\n\t        this._lBlock ^= t;\n\t        this._rBlock ^= t << offset;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.DES = BlockCipher._createHelper(DES);\n\n\t    /**\n\t     * Triple-DES block cipher algorithm.\n\t     */\n\t    var TripleDES = C_algo.TripleDES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\t            // Make sure the key length is valid (64, 128 or >= 192 bit)\n\t            if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {\n\t                throw new Error('Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.');\n\t            }\n\n\t            // Extend the key according to the keying options defined in 3DES standard\n\t            var key1 = keyWords.slice(0, 2);\n\t            var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);\n\t            var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);\n\n\t            // Create DES instances\n\t            this._des1 = DES.createEncryptor(WordArray.create(key1));\n\t            this._des2 = DES.createEncryptor(WordArray.create(key2));\n\t            this._des3 = DES.createEncryptor(WordArray.create(key3));\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._des1.encryptBlock(M, offset);\n\t            this._des2.decryptBlock(M, offset);\n\t            this._des3.encryptBlock(M, offset);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            this._des3.decryptBlock(M, offset);\n\t            this._des2.encryptBlock(M, offset);\n\t            this._des1.decryptBlock(M, offset);\n\t        },\n\n\t        keySize: 192/32,\n\n\t        ivSize: 64/32,\n\n\t        blockSize: 64/32\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.TripleDES = BlockCipher._createHelper(TripleDES);\n\t}());\n\n\n\treturn CryptoJS.TripleDES;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var X32WordArray = C_lib.WordArray;\n\n\t    /**\n\t     * x64 namespace.\n\t     */\n\t    var C_x64 = C.x64 = {};\n\n\t    /**\n\t     * A 64-bit word.\n\t     */\n\t    var X64Word = C_x64.Word = Base.extend({\n\t        /**\n\t         * Initializes a newly created 64-bit word.\n\t         *\n\t         * @param {number} high The high 32 bits.\n\t         * @param {number} low The low 32 bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\n\t         */\n\t        init: function (high, low) {\n\t            this.high = high;\n\t            this.low = low;\n\t        }\n\n\t        /**\n\t         * Bitwise NOTs this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after negating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var negated = x64Word.not();\n\t         */\n\t        // not: function () {\n\t            // var high = ~this.high;\n\t            // var low = ~this.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise ANDs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to AND with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after ANDing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var anded = x64Word.and(anotherX64Word);\n\t         */\n\t        // and: function (word) {\n\t            // var high = this.high & word.high;\n\t            // var low = this.low & word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise ORs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to OR with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after ORing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var ored = x64Word.or(anotherX64Word);\n\t         */\n\t        // or: function (word) {\n\t            // var high = this.high | word.high;\n\t            // var low = this.low | word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise XORs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to XOR with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after XORing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var xored = x64Word.xor(anotherX64Word);\n\t         */\n\t        // xor: function (word) {\n\t            // var high = this.high ^ word.high;\n\t            // var low = this.low ^ word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Shifts this word n bits to the left.\n\t         *\n\t         * @param {number} n The number of bits to shift.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after shifting.\n\t         *\n\t         * @example\n\t         *\n\t         *     var shifted = x64Word.shiftL(25);\n\t         */\n\t        // shiftL: function (n) {\n\t            // if (n < 32) {\n\t                // var high = (this.high << n) | (this.low >>> (32 - n));\n\t                // var low = this.low << n;\n\t            // } else {\n\t                // var high = this.low << (n - 32);\n\t                // var low = 0;\n\t            // }\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Shifts this word n bits to the right.\n\t         *\n\t         * @param {number} n The number of bits to shift.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after shifting.\n\t         *\n\t         * @example\n\t         *\n\t         *     var shifted = x64Word.shiftR(7);\n\t         */\n\t        // shiftR: function (n) {\n\t            // if (n < 32) {\n\t                // var low = (this.low >>> n) | (this.high << (32 - n));\n\t                // var high = this.high >>> n;\n\t            // } else {\n\t                // var low = this.high >>> (n - 32);\n\t                // var high = 0;\n\t            // }\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Rotates this word n bits to the left.\n\t         *\n\t         * @param {number} n The number of bits to rotate.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after rotating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var rotated = x64Word.rotL(25);\n\t         */\n\t        // rotL: function (n) {\n\t            // return this.shiftL(n).or(this.shiftR(64 - n));\n\t        // },\n\n\t        /**\n\t         * Rotates this word n bits to the right.\n\t         *\n\t         * @param {number} n The number of bits to rotate.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after rotating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var rotated = x64Word.rotR(7);\n\t         */\n\t        // rotR: function (n) {\n\t            // return this.shiftR(n).or(this.shiftL(64 - n));\n\t        // },\n\n\t        /**\n\t         * Adds this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to add with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after adding.\n\t         *\n\t         * @example\n\t         *\n\t         *     var added = x64Word.add(anotherX64Word);\n\t         */\n\t        // add: function (word) {\n\t            // var low = (this.low + word.low) | 0;\n\t            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;\n\t            // var high = (this.high + word.high + carry) | 0;\n\n\t            // return X64Word.create(high, low);\n\t        // }\n\t    });\n\n\t    /**\n\t     * An array of 64-bit words.\n\t     *\n\t     * @property {Array} words The array of CryptoJS.x64.Word objects.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var X64WordArray = C_x64.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create();\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create([\n\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n\t         *     ]);\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create([\n\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n\t         *     ], 10);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 8;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this 64-bit word array to a 32-bit word array.\n\t         *\n\t         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var x32WordArray = x64WordArray.toX32();\n\t         */\n\t        toX32: function () {\n\t            // Shortcuts\n\t            var x64Words = this.words;\n\t            var x64WordsLength = x64Words.length;\n\n\t            // Convert\n\t            var x32Words = [];\n\t            for (var i = 0; i < x64WordsLength; i++) {\n\t                var x64Word = x64Words[i];\n\t                x32Words.push(x64Word.high);\n\t                x32Words.push(x64Word.low);\n\t            }\n\n\t            return X32WordArray.create(x32Words, this.sigBytes);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {X64WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = x64WordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\n\t            // Clone \"words\" array\n\t            var words = clone.words = this.words.slice(0);\n\n\t            // Clone each X64Word object\n\t            var wordsLength = words.length;\n\t            for (var i = 0; i < wordsLength; i++) {\n\t                words[i] = words[i].clone();\n\t            }\n\n\t            return clone;\n\t        }\n\t    });\n\t}());\n\n\n\treturn CryptoJS;\n\n}));","module.exports = __webpack_public_path__ + \"8043fb2017336c5cbb81.worklet.js\";","module.exports = __webpack_public_path__ + \"67b1db59a891b7f35dba.worklet.js\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (typeof import.meta.url === \"string\") scriptUrl = import.meta.url\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","//\n//  assert.ts\n//\n//  Created by David Rowe on 9 Jun 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\n/*@devdoc\n *  Reports and throws an error if an assertion is <code>false</code>. Information on the error is reported to the console along\n *  with a call stack.\n *  @function assert\n *  @param {boolean} assertion - The assertion value.\n *  @param {...any} info - Information to report to the console if the assertion is <code>false</code>.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction assert(assertion: boolean, ...info: any[]): asserts assertion {\n    // console.assert(assertion, ...info);\n    if (!assertion) {\n        throw new Error([\"Assertion failed!\", ...info as [string]].join(\" \"));\n    }\n}\n\nexport default assert;\n","//\n//  Signal.ts\n//\n//  Created by David Rowe on 6 Jun 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport assert from \"./assert\";\n\n\ntype Slot = (...args: any[]) => void; // eslint-disable-line @typescript-eslint/no-explicit-any\n\n\n/*@devdoc\n *  The <code>Signal</code> class emulates Qt's signals and slots mechanism. In particular, a <code>Signal</code> object is\n *  implemented which can be connected to one or more \"slot\"<code>Slot</code> functions, \"emitted\" to asynchronously call those\n *  functions, and disconnected.\n *  <p>C++: Qt's signals and slots mechanism.</p>\n *\n *  @class Signal\n */\nclass Signal {\n    // C++  Qt's signals and slots mechanism.\n\n    /*@devdoc\n     *  A function that can be connected to a {@link Signal} or otherwise used as a callback. If the slot function uses\n     *  <code>this</code> then the correct <code>this</code> must be bound to it, e.g., by declaring using an arrow function or\n     *  applying <code>.bind(this)</code> in the constructor of the class that implements the slot function.\n     *  @typedef {function} Slot\n     *  @param {any} ...args - Any arguments included in the <code>Signal</code> are passed through to the <code>Slot</code>\n     *      function.\n     */\n\n\n    #_slots: Set<Slot> = new Set();\n\n\n    /*@devdoc\n     *  Connects the signal to a <code>Slot</code> function.\n     *  <p>Note: If the slot function uses <code>this</code> then the correct <code>this</code> must be bound to it, e.g., by\n     *  declaring the function as an arrow function or applying <code>.bind(this)</code> in the constructor of the class that\n     *  implements the slot function.</p>\n     *  @param {Slot} slot - Function to be called when <code>emit</code> is called.\n     */\n    connect(slot: Slot): void {\n        assert(typeof slot === \"function\");\n        this.#_slots.add(slot);\n    }\n\n    /*@devdoc\n     *  Disconnects the signal from a <code>Slot</code> function.\n     *  @param {Slot} slot - The Slot function to no longer be called when <code>emit</code> is called.\n     */\n    disconnect(slot: Slot): void {\n        assert(typeof slot === \"function\");\n        this.#_slots.delete(slot);  // eslint-disable-line @typescript-eslint/dot-notation\n    }\n\n    /*@devdoc\n     *  \"Emits the signal\": asynchronously calls all connected <code>Slot</code> functions.\n     *  @param {any} [params] - Parameter values to call connected slot functions with.\n     */\n    emit(...params: any[]): void {  // eslint-disable-line @typescript-eslint/no-explicit-any\n        this.#_slots.forEach((slot) => {\n            setTimeout(slot, 0, ...params);\n        });\n    }\n\n}\n\nexport default Signal;\n","//\n//  Uuid.ts\n//\n//  Created by David Rowe on 6 Jun 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\n// FIXME: There may be a better way to implement Uuid in TypeScript.\n// eslint-disable-next-line\n// @ts-nocheck\n\n\n/*@devdoc\n *  The <code>Uuid</code> class provides a UUID (Universally Unique IDentifier) used to uniquely identify an item such as an\n *  entity or avatar. Internally, a {@link Uuid} value is a <code>bigint</code> value.\n *  <p>Note: In the user scripting API, UUIDs are represented as formatted strings.</p>\n *  <p>C++: UUID.h, <code>QUuid</code></p>\n *\n *  @class Uuid\n *  @variation 1\n *  @param {bigint} [value=0] - The UUID value. If not specified, a UUID with value of <code>Uuid.NULL</code> is created.\n *\n *  @property {number} NUM_BYTES_RFC4122_UUID=16 - The number of bytes in a UUID when represented in RFC4122 format.\n *      <em>Read-only.</em>\n *      <p><em>Static</em></p>\n *      @static\n *  @property {Uuid} NULL=0 - The null UUID, <code>{00000000-0000-0000-0000-000000000000}</code>.\n *      <em>Read-only.</em>\n *      <p><em>Static</em></p>\n *      @static\n */\nclass Uuid extends BigInt {\n    // C++  Uuid.h\n\n    // WEBRTC TODO: It may be cleaner to wrap a BigInt value rather than extend BigInt.\n\n    static readonly NUM_BYTES_RFC4122_UUID = 16;\n    static readonly NULL = BigInt(0);\n\n\n    constructor(value: bigint = 0) {\n        // C++  QUuid()\n\n        // Work around BigInt not working with the \"new\" operator.\n        const obj = <BigInt>Object(BigInt(value));\n        Object.setPrototypeOf(obj, new.target.prototype);\n        return obj;  // eslint-disable-line no-constructor-return\n    }\n\n\n    /*@devdoc\n     *  UUIDs (Universally Unique IDentifiers) are used to uniquely identify items such as entities and avatars. They are\n     *  represented as {@link Uuid(1)|Uuid} objects encapsulating BigInt values in the SDK, and 16-byte (128-bit) numbers in the\n     *  protocol packets.\n     *  <p>Note: In the user scripting API, UUIDs are represented as formatted hexadecimal strings.</p>\n     *  @typedef {bigint} Uuid\n     */\n    /*@devdoc\n     *  Gets the UUID's underlying <code>bigint</code> primitive value.\n     *  @function Uuid(1).value\n     *  @returns {bigint} The underlying <code>bigint</code> primitive value\n     */\n    value(): bigint {\n        return this.valueOf().valueOf();\n    }\n\n    /*@devdoc\n     *  Gets the UUID value formatted as a hexadecimal string with <code>-</code> separators.\n     *  @function Uuid(1).stringify\n     *  @returns {string} The UUID value formatted as <code>nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn</code>.\n     */\n    stringify(): string {\n        /* eslint-disable @typescript-eslint/no-magic-numbers */\n        const hexadecimal = this.value().toString(16);\n        return hexadecimal.slice(0, 8) + \"-\" + hexadecimal.slice(8, 12) + \"-\" + hexadecimal.slice(12, 16) + \"-\"\n            + hexadecimal.slice(16, 20) + \"-\" + hexadecimal.slice(20);\n        /* eslint-enable @typescript-eslint/no-magic-numbers */\n    }\n\n}\n\nexport default Uuid;\n","//\n//  AddressManager.ts\n//\n//  Created by David Rowe on 6 Jun 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport Signal from \"../shared/Signal\";\nimport Uuid from \"../shared/Uuid\";\n\n\n/*@devdoc\n *  The <code>AddressManager</code> class manages the current location in the metaverse.\n *  <p>C++: <code>AddressManager : public QObject, public Dependency</code></p>\n *\n *  @class AddressManager\n *  @property {string} contextItemType=\"AddressManager\" - The type name for use with the {@link ContextManager}.\n *      <p><em>Static. Read-only.</em></p>\n */\nclass AddressManager {\n    // C++  AddressManager : public QObject, public Dependency\n\n    static readonly contextItemType = \"AddressManager\";\n\n\n    #_domainUrl = \"\";\n    #_possibleDomainChangeRequired = new Signal();\n\n\n    /*@devdoc\n     *  Takes you to a specified metaverse address.\n     *  @function AddressManager.handleLookupString\n     *  @param {string} address - The address to go to.\n     *  @param {boolean} [from=false] - Set to <code>true</code> if the address is obtained from the \"Explore\" app. Helps ensure\n     *      that the user's location history is correctly maintained.\n     */\n    handleLookupString(address: string): void {\n        // C++  void handleLookupString(const QString& lookupString, bool fromSuggestions = false)\n\n        // WEBRTC TODO: Address further C++ code.\n\n        const sanitizedAddress = address.trim();\n        if (sanitizedAddress.length > 0) {\n            this.#handlerUrl(sanitizedAddress);\n        }\n\n        // WEBRTC TODO: Address further C++ code.\n    }\n\n    /*@devdoc\n     *  Gets the domain's place name.\n     *  @function AddressManager.getPlaceName\n     *  @returns {string} The domain's place name if known, otherwise <code>\"\"</code>.\n     */\n    getPlaceName(): string {  // eslint-disable-line class-methods-use-this\n        // C++  QString getPlaceName()\n\n        // WEBRTC TODO: Address further C++ code.\n\n        return \"\";\n    }\n\n    /*@devdoc\n     *  Triggered when a request is made to go to a URL or IP address.\n     *  @function AddressManager.possibleDomainChangeRequired\n     *  @param {string} url - The domain address.\n     *  @param {Uuid} id - The domain ID. May be {@link Uuid(1)|Uuid.NULL} if not yet known.\n     *  @returns {Signal}\n     */\n    get possibleDomainChangeRequired(): Signal {\n        // C++  void possibleDomainChangeRequired(QUrl domainURL, QUuid domainID);\n        return this.#_possibleDomainChangeRequired;\n    }\n\n\n    #handlerUrl(url: string): boolean {\n        // C++  bool handleUrl(const QUrl& lookupUrlIn, LookupTrigger trigger, const QString& lookupUrlInString)\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this.#_domainUrl = url;\n        this.#_possibleDomainChangeRequired.emit(this.#_domainUrl, Uuid.NULL);\n\n        // WEBRTC TODO: Address further C++ code.\n\n        return true;\n    }\n\n}\n\nexport default AddressManager;\n","//\n//  SocketType.ts\n//\n//  Created by David Rowe on 1 Sep 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\n\n/*@devdoc\n *  A {@link SocketType(1)|socket type} is the type of network {@link Socket} used for Vircadia protocol communications:\n *  <code>WebRTC</code>, <code>UDP</code>, or <code>Unknown</code>. Socket type values are represented as 8-bit numbers\n *  in the protocol packets.\n *  @typedef {number} SocketType\n */\nconst enum SocketTypeValue {\n    // C++  SocketType : uint8_t\n    Unknown = 0,\n    UDP = 1,\n    WebRTC = 2\n}\n\n\n/*@devdoc\n *  The <code>SocketType</code> namespace provides information on a the types of network {@link Socket} used for Vircadia\n *  protocol communications. In this SDK, only <code>WebRTC</code> sockets are used.\n *  <p>C++: <code>SocketType</code></p>\n *\n *  @namespace SocketType\n *  @variation 1\n *\n *  @property {SocketType} Unknown - <code>0</code> - Unknown socket type.\n *  @property {SocketType} UDP - <code>1</code> - UDP socket. Not used in the Vircadia Web SDK.\n *  @property {SocketType} WebRTC - <code>2</code> - WebRTC socket. A WebRTC data channel presented as a UDP-style socket.\n */\nconst SocketType = new class {\n    // C++  SocketType\n\n    readonly Unknown = SocketTypeValue.Unknown;\n    readonly UDP = SocketTypeValue.UDP;\n    readonly WebRTC = SocketTypeValue.WebRTC;\n\n    readonly #_UNKNOWN = \"Unknown\";\n    readonly #_UDP = \"UDP\";\n    readonly #_WEBRTC = \"WebRTC\";\n    readonly #_SOCKET_TYPE_STRINGS = [this.#_UNKNOWN, this.#_UDP, this.#_WEBRTC];\n\n    /*@devdoc\n     *  Gets the name of a SocketType value, e.g., <code>\"WebRTC\"</code>.\n     *  @function SocketType(1).socketTypeToString\n     *  @param {SocketType} socketType - The socket type value.\n     *  @returns {string} The name of the socket type value.\n     */\n    socketTypeToString(socketType: SocketTypeValue): string {\n        // C++  QString socketTypeToString(SocketType socketType)\n        //      Provided as a global function in C++ but as a method of the SocketType namespace in TypeScript.\n        const value = this.#_SOCKET_TYPE_STRINGS[socketType];\n        return value ? value : this.#_UNKNOWN;\n    }\n\n}();\n\nexport { SocketType as default, SocketTypeValue };\n","//\n//  SockAddr.ts\n//\n//  Created by David Rowe on 7 Jun 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport SocketType, { SocketTypeValue } from \"./SocketType\";\n\n\n/*@devdoc\n *  The <code>SockAddr</code> class handles information on an IPv4 network address and port number. The port number may be a UDP\n *  port number or an internally-assigned WebRTC data channel ID. Internally, the IP address is handled as a 1-byte address type\n *  (UDP or WebRTC), 4-byte number value, and the port as a 2-byte number value.\n *  <p>For convenience, the socket type defaults to <code>WebRTC</code>.</p>\n *  <p>C++: <code>SockAddr : public QObject</code></p>\n *  @class SockAddr\n *  @param {SocketType} [type=WebRTC] - The type of network socket.\n *  @param {number} [address=0] - The IPv4 network address as a 4-byte number.\n *  @param {number} [port=0] - The port number.\n */\nclass SockAddr {\n    // C++  SockAddr : public QObject\n\n    #_name = \"\";\n    #_type = SocketTypeValue.WebRTC;  // Default to WebRTC as a convenience in the SDK.\n    #_address = 0;\n    #_port = 0;\n\n\n    constructor(type = SocketType.WebRTC, address = 0, port = 0) {\n        // C++  SockAddr(SocketType socketType, const QHostAddress& address, quint16 port)\n        this.#_type = type;\n        this.#_address = address;\n        this.#_port = port;\n    }\n\n\n    /*@devdoc\n     *  Sets the name identifying the SockAddr.\n     *  @param {string} name - The name of the SockAddr.\n     */\n    setObjectName(name: string): void {\n        // C++  void QObject::setObjecctName(const QString& name)\n        this.#_name = name;\n    }\n\n    /*@devdoc\n     *  Gets the name identifying the SockAddr.\n     *  @returns {string} The name of the SockAddr.\n     */\n    objectName(): string {\n        // C++  QString QObject::objectName()\n        return this.#_name;\n    }\n\n    /*@devdoc\n     *  Sets the socket type.\n     *  @param {SocketType} type - The type of network socket.\n     */\n    setType(type: SocketTypeValue): void {\n        // C++  void setType(const SocketType socketType)\n        this.#_type = type;\n    }\n\n    /*@devdoc\n     *  Gets the network socket type.\n     *  @returns {SocketType} The type of network socket.\n     */\n    getType(): SocketTypeValue {\n        // C++  SocketType getType()\n        return this.#_type;\n    }\n\n    /*@devdoc\n     *  Sets the IP address.\n     *  @param {number} address - The IPv4 network address as a 4-byte number.\n     */\n    setAddress(address: number): void {\n        // C++  QHostAddress* getAddressPointer()\n        this.#_address = address;\n    }\n\n    /*@devdoc\n     *  Gets the IP address.\n     *  @returns {number} The IPv4 network address as a 4-byte number. <strong>Default Value:</strong> <code>0</code>\n     */\n    getAddress(): number {\n        // C++  QHostAddress& getAddress()\n        return this.#_address;\n    }\n\n    /*@devdoc\n     *  Sets the port number.\n     *  @param {number} port The port number.\n     */\n    setPort(port: number): void {\n        // C++  void setPort(quint16 port\n        this.#_port = port;\n    }\n\n    /*@devdoc\n     *  Gets the port number.\n     *  @returns {number} The port number. <strong>Default Value:</strong> <code>0</code>\n     */\n    getPort(): number {\n        // C++  quint16 getPort()\n        return this.#_port;\n    }\n\n    /*@devdoc\n     *  Checks whether the value is null.\n     *  @returns {boolean} <code>true</code> if the network address is <code>0</code> and the port number is <code>0</code>.\n     */\n    isNull(): boolean {\n        // C++  bool isNull()\n        return this.#_address === 0 && this.#_port === 0;\n    }\n\n    /*@devdoc\n     *  Tests whether the type, address, and port values are the same as those of another SockAddr.\n     *  @param {SockAddr} otherAddr - The other address to test against.\n     *  @returns {boolean} <code>true</code> if this SockAddr's type, address, and port are the same as those of the other\n     *      address, <code>false</code> if they aren't.\n     */\n    isEqualTo(otherAddr: SockAddr): boolean {\n        // C++  operator==\n        return this.#_type === otherAddr.getType() && this.#_address === otherAddr.getAddress()\n            && this.#_port === otherAddr.getPort();\n    }\n\n\n    /*@devdoc\n     *  Returns a string representation of the SockAddr value, for example, <code>\"WebRTC 127.0.0.1:11111\"</code>.\n     *  @returns {string} A string representation of the SockAddr value.\n     */\n    toString(): string {\n        // C++  QDebug operator<<\n        const BYTE_DIVISOR = 256;\n        const ipNumbers = [];\n        let address = this.#_address;\n        for (let i = 3; i >= 0; i--) {\n            ipNumbers[i] = address % BYTE_DIVISOR;\n            address = Math.floor(address / BYTE_DIVISOR);\n        }\n        // Always include socket type because \"Unknown\" indicates an error in the Web SDK.\n        return SocketType.socketTypeToString(this.#_type) + \" \" + ipNumbers.join(\".\") + \":\" + this.getPort().toString();\n    }\n\n}\n\nexport default SockAddr;\n","//\n//  NodePermissions.ts\n//\n//  Created by David Rowe on 11 Aug 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\n\ntype NodePermissionsValue = number;\n\n\n/*@devdoc\n *  The <code>NodePermissions</code> class handles the client's permissions in the domain.\n *  @class NodePermissions\n *  @property {NodePermissionsValue} permissions - Gets and sets the permissions.\n */\nclass NodePermissions {\n\n    /*@devdoc\n     *  {@link NodePermissions} are represented by unsigned 4-byte numbers in the Vircadia protocol packets.\n     *  @typedef {number} NodePermissionsValue\n     */\n\n\n    #_permissions: NodePermissionsValue = 0;\n\n\n    get permissions(): NodePermissionsValue {\n        // C++  Permissions permissions\n        return this.#_permissions;\n    }\n\n    set permissions(permissions: NodePermissionsValue) {\n        // C++  Permissions permissions\n        this.#_permissions = permissions;\n    }\n\n}\n\nexport { NodePermissions as default };\nexport type { NodePermissionsValue };\n","//\n//  UDT.ts\n//\n//  Created by David Rowe on 13 Jun 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\n/*@devdoc\n *  The <code>UDT</code> namespace provides Vircadia protocol packet constants.\n *  <p>C++: <code>udt</code></p>\n *\n *  @namespace UDT\n *  @property {number} MAX_PACKET_SIZE=1464 The maximum {@link BasePacket} Vircadia protocol payload size.\n *      <em>Read-only.</em>\n *      <p><em>Static</em></p>\n *\n *  @property {number} CONTROL_BIT_MASK=0x80000000 - Mask for reading / writing the control bit.\n *      <em>Read-only.</em>\n *      <p><em>Static</em></p>\n *  @property {number} RELIABILITY_BIT_MASK=0x40000000 - Mask for reading / writing the reliability bit.\n *      <em>Read-only.</em>\n *      <p><em>Static</em></p>\n *  @property {number} MESSAGE_BIT_MASK=0x20000000 - Mask for reading / writing the message bit.\n *      <em>Read-only.</em>\n *      <p><em>Static</em></p>\n *  @property {number} OBFUSCATION_LEVEL_BIT_MASK=0x18000000 - Mask for reading / writing the obfuscation level bits.\n *      <em>Read-only.</em>\n *      <p><em>Static</em></p>\n *  @property {number} SEQUENCE_NUMBER_BIT_MASK=0x7fffff - Mask for reading / writing the sequence number.\n *      <em>Read-only.</em>\n *      <p><em>Static</em></p>\n *\n *  @property {number} OBFUSCATION_LEVEL_OFFSET=27 - Number of bits the obfuscation level value is offset.\n *      <em>Read-only.</em>\n *      <p><em>Static</em></p>\n *  @property {number} PACKET_POSITION_OFFSET=30 - Number of bits the packet position value is offset.\n *      <em>Read-only.</em>\n *      <p><em>Static</em></p>\n *  @property {boolean} LITTLE_ENDIAN=true - Read / write DataView values in little-endian format.\n *      <em>Read-only.</em>\n *      <p><em>Static</em></p>\n *  @property {boolean} BIG_ENDIAN=false - Read / write DataView values in big-endian format.\n *      <em>Read-only.</em>\n *      <p><em>Static</em></p>\n */\nconst UDT = new class {\n    // C++: udt\n\n    readonly MAX_PACKET_SIZE = 1464;\n\n    readonly CONTROL_BIT_MASK = 0x80000000;\n    readonly RELIABILITY_BIT_MASK = 0x40000000;\n    readonly MESSAGE_BIT_MASK = 0x20000000;\n    readonly OBFUSCATION_LEVEL_BIT_MASK = 0x18000000;\n    readonly SEQUENCE_NUMBER_BIT_MASK = 0x7fffff;\n\n    readonly OBFUSCATION_LEVEL_OFFSET = 27;\n    readonly PACKET_POSITION_OFFSET = 30;\n\n    readonly LITTLE_ENDIAN = true;\n    readonly BIG_ENDIAN = false;\n\n}();\n\nexport default UDT;\n","//\n//  DataViewExtensions.ts\n//\n//  Created by David Rowe on 16 Jun 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\n/*@devdoc\n *  The <code>DataView</code> namespace comprises methods added to the prototype of JavaScript's\n *  {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView|DataView} object, for\n *  handling reading and writing large <code>bigint</vcde> values. These methods are added only if they aren't already present\n *  in the browser's <code>DataView</code> implementation.\n *  <p>C++: N/A</p>\n *  @namespace DataView\n */\n\n// WEBRTC TODO: May need to implement Uint64 methods for some browsers (e.g., Safari) if Babel doesn't handle this.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView#64-bit_integer_values\n\n/* eslint-disable @typescript-eslint/no-magic-numbers, @typescript-eslint/no-invalid-this  */\n\nconst MAX_U128_VALUE = 2n ** 128n - 1n;\nconst SHIFT_64_BITS = 64n;\nconst MASK_64_BITS = 0xffffffffffffffffn;\n\n/*@devdoc\n *  Writes an unsigned 128-bit (16-byte) integer value to the DataView.\n *  @function DataView.setBigUint128\n *  @param {number} byteOffset - The offset from the start of the DataView.\n *  @param {bigint} value - The value to write. The maximum value is <code>2n ** 128n - 1n</code>. If larger than this value,\n *      a value of <code>0n</code> is written.\n *  @param {boolean} littleEndian=false - <code>true</code> to write the data in little-endian format, <code>false</codE> to\n *      write in big-endian format.\n */\nfunction setBigUint128(this: DataView, byteOffset: number, value: bigint, littleEndian = false) {\n    const sanitizedValue = value > MAX_U128_VALUE ? 0n : value;\n    if (littleEndian) {\n        this.setBigUint64(byteOffset + 8, sanitizedValue >> SHIFT_64_BITS, littleEndian);\n        this.setBigUint64(byteOffset, sanitizedValue & MASK_64_BITS, littleEndian);\n    } else {\n        this.setBigUint64(byteOffset, sanitizedValue >> SHIFT_64_BITS, littleEndian);\n        this.setBigUint64(byteOffset + 8, sanitizedValue & MASK_64_BITS, littleEndian);\n    }\n}\n\n/*@devdoc\n *  Reads an unsigned 128-bit (16-byte) integer value from the DataView.\n *  @function DataView.getBigUint128\n *  @param {number} byteOffset - The offset from the start of the DataView.\n *  @param {boolean} littleEndian=false - <code>true</code> to read the data in little-endian format, <code>false</codE> to read\n *      read in big-endian format.\n *  @returns {bigint} The value read.\n */\nfunction getBigUint128(this: DataView, byteOffset: number, littleEndian = false): bigint {\n    let result = 0n;\n    if (littleEndian) {\n        result = (this.getBigUint64(byteOffset + 8, littleEndian) << SHIFT_64_BITS)\n            + this.getBigUint64(byteOffset, littleEndian);\n    } else {\n        result = (this.getBigUint64(byteOffset, littleEndian) << SHIFT_64_BITS)\n            + this.getBigUint64(byteOffset + 8, littleEndian);\n    }\n    return result;\n}\n\n/* eslint-enable @typescript-eslint/no-magic-numbers, no-invalid-this  */\n\n/* eslint-disable no-extend-native */\n\nexport { };  // Provide a module context for the declaration.\n\ndeclare global {\n    interface DataView {\n        setBigUint128: (this: DataView, byteOffset: number, value: bigint, littleEndian: boolean) => void;\n        getBigUint128: (this: DataView, byteOffset: number, littleEndian: boolean) => bigint;\n    }\n}\n\nif (!Object.prototype.hasOwnProperty.call(DataView, \"setBigUint128\")) {\n    DataView.prototype.setBigUint128 = setBigUint128;\n}\nif (!Object.prototype.hasOwnProperty.call(DataView, \"getBigUint128\")) {\n    DataView.prototype.getBigUint128 = getBigUint128;\n}\n\n/* eslint-enable no-extend-native */\n","//\n//  DomainList.ts\n//\n//  Created by David Rowe on 9 Jun 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport { LocalID } from \"../NetworkPeer\";\nimport { NewNodeInfo } from \"../LimitedNodeList\";\nimport NodePermissions from \"../NodePermissions\";\nimport { NodeTypeValue } from \"../NodeType\";\nimport SockAddr from \"../SockAddr\";\nimport UDT from \"../udt/UDT\";\nimport assert from \"../../shared/assert\";\nimport Uuid from \"../../shared/Uuid\";\n\nimport \"../../shared/DataViewExtensions\";\n\n\ntype DomainListDetails = {\n    domainUUID: Uuid,\n    domainLocalID: LocalID,\n    newUUID: Uuid,\n    newLocalID: LocalID,\n    newPermissions: NodePermissions,\n    isAuthenticated: boolean,\n    connectRequestTimestamp: BigInt,\n    domainServerPingSendTime: BigInt,\n    domainServerCheckinProcessingTime: BigInt,\n    newConnection: boolean,\n    nodes: NewNodeInfo[]\n};\n\n\nconst DomainList = new class {\n\n    /*@devdoc\n     *  Information returned by {@link PacketScribe|reading} a {@link PacketType(1)|DomainList} packet.\n     *  @typedef {object} PacketScribe.DomainListDetails\n     *  @property {Uuid} domainUUID - The UUID of the domain server.\n     *  @property {LocalID} domainLocalID - The local ID of the domain server.\n     *  @property {Uuid} newUUID - The UUID assigned to the web client by the domain server.\n     *  @property {LocalID} newLocalID - The local ID assigned to the web client by the domain server.\n     *  @property {NodePermissions} newPermissions - The permissions granted to the user.\n     *  @property {boolean} isAuthenticated - <code>true</code> if the domain server requires verified packets to include\n     *      authentication hash values, <code>false</code> if they're not needed.\n     *  @property {bigint} connectRequestTimestamp\n     *  @property {bigint} domainServerPingSendTime - The Unix time that the packet was sent, in usec.\n     *  @property {bigint} domainServerCheckinProcessingTime - The duration from the time domain server received the packet\n     *      requesting this response and the time that the response was sent, in usec.\n     *  @property {boolean} newConnection - <code>true</code> if the web client has just connected to the domain,\n     *      <code>false</code> if was already connected.\n     *  @property {LimitedNodeList.NewNodeInfo[]} nodes - The details of the assignment clients available that are in the\n     *      client's interest set and currently running.\n     */\n\n    /*@devdoc\n     *  Reads a {@link PacketType(1)|DomainList} packet.\n     *  @function PacketScribe.DomainList&period;read\n     *  @param {DataView} data - The {@link Packets|DomainList} message data to read.\n     *  @returns {PacketScribe.DomainListDetails} The domain list information.\n     */\n    read(data: DataView): DomainListDetails {  /* eslint-disable-line class-methods-use-this */\n        // C++  NodeList::processDomainList(QSharedPointer<ReceivedMessage> message)\n\n        /* eslint-disable @typescript-eslint/no-magic-numbers */\n\n        let dataPosition = 0;\n\n        const domainUUID = new Uuid(data.getBigUint128(dataPosition, UDT.LITTLE_ENDIAN));\n        dataPosition += 16;\n\n        const domainLocalID = data.getUint16(dataPosition, UDT.BIG_ENDIAN);\n        dataPosition += 2;\n\n        const newUUID = new Uuid(data.getBigUint128(dataPosition, UDT.BIG_ENDIAN));\n        dataPosition += 16;\n\n        const newLocalID = data.getUint16(dataPosition, UDT.BIG_ENDIAN);\n        dataPosition += 2;\n\n        const newPermissions = new NodePermissions();\n        newPermissions.permissions = data.getUint32(dataPosition, UDT.BIG_ENDIAN);\n        dataPosition += 4;\n\n        const isAuthenticated = data.getUint8(dataPosition) > 0;\n        dataPosition += 1;\n\n        const connectRequestTimestamp = data.getBigUint64(dataPosition, UDT.BIG_ENDIAN);\n        dataPosition += 8;\n\n        const domainServerPingSendTime = data.getBigUint64(dataPosition, UDT.BIG_ENDIAN);\n        dataPosition += 8;\n\n        const domainServerCheckinProcessingTime = data.getBigUint64(dataPosition, UDT.BIG_ENDIAN);\n        dataPosition += 8;\n\n        const newConnection = data.getUint8(dataPosition) > 0;\n        dataPosition += 1;\n\n        // WEBRTC TODO: Address further C++ code.\n\n        const nodes: NewNodeInfo[] = [];\n        while (dataPosition < data.byteLength) {\n            // C++  void NodeList::parseNodeFromPacketStream(QDataStream& packetStream)\n\n            const type = <NodeTypeValue>String.fromCharCode(data.getUint8(dataPosition));\n            dataPosition += 1;\n\n            const uuid = new Uuid(data.getBigUint128(dataPosition, UDT.BIG_ENDIAN));\n            dataPosition += 16;\n\n            const publicSocket = new SockAddr();\n            publicSocket.setType(data.getUint8(dataPosition));\n            dataPosition += 2;  // Socket type and IP4.\n            publicSocket.setAddress(data.getUint32(dataPosition, UDT.BIG_ENDIAN));\n            dataPosition += 4;\n            publicSocket.setPort(data.getUint16(dataPosition, UDT.BIG_ENDIAN));\n            dataPosition += 2;\n\n            const localSocket = new SockAddr();\n            localSocket.setType(data.getUint8(dataPosition));\n            dataPosition += 2;  // Socket type and IP4.\n            localSocket.setAddress(data.getUint32(dataPosition, UDT.BIG_ENDIAN));\n            dataPosition += 4;\n            localSocket.setPort(data.getUint16(dataPosition, UDT.BIG_ENDIAN));\n            dataPosition += 2;\n\n            const permissions = new NodePermissions();\n            permissions.permissions = data.getUint32(dataPosition, UDT.BIG_ENDIAN);\n            dataPosition += 4;\n\n            const isReplicated = data.getUint8(dataPosition) > 0;\n            dataPosition += 1;\n\n            const sessionLocalID = data.getUint16(dataPosition, UDT.BIG_ENDIAN);\n            dataPosition += 2;\n\n            const connectionSecretUUID = new Uuid(data.getBigUint128(dataPosition, UDT.BIG_ENDIAN));\n            dataPosition += 16;\n\n            nodes.push({\n                type, uuid, publicSocket, localSocket, permissions, isReplicated, sessionLocalID, connectionSecretUUID\n            });\n        }\n\n        assert(dataPosition === data.byteLength);\n\n        /* eslint-enable @typescript-eslint/no-magic-numbers */\n\n        return {\n            domainUUID, domainLocalID, newUUID, newLocalID, newPermissions, isAuthenticated, connectRequestTimestamp,\n            domainServerPingSendTime, domainServerCheckinProcessingTime, newConnection, nodes\n        };\n    }\n\n}();\n\nexport default DomainList;\nexport type { DomainListDetails };\n","//\n//  Ping.ts\n//\n//  Created by David Rowe on 6 Sep 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport UDT from \"../udt/UDT\";\nimport assert from \"../../shared/assert\";\n\n\ntype PingDetails = {\n    pingType: number,\n    timestamp: bigint,\n    connectionID: bigint\n};\n\n\nconst Ping = new class {\n    // C++  N/A\n\n    /*@devdoc\n     *  Information returned by {@link PacketScribe|reading} a {@link PacketType(1)|Ping} packet.\n     *  @typedef {object} PacketScribe.PingDetails\n     *  @property {PingType} pingType - The type of ping.\n     *  @property {bigint} timestamp - The time at which the ping packet was created, in usec.\n     *  @property {bigint} connectionID - The ID of the connection that the ping was sent on.\n     */\n\n\n    /*@devdoc\n     *  Reads a {@link PacketType(1)|Ping} packet.\n     *  @function PacketScribe.Ping&period;read\n     *  @param {DataView} data - The {@link Packets|Ping} message data to read.\n     *  @returns {PacketScribe.PingDetails} The ping details.\n     */\n    read(data: DataView): PingDetails {  /* eslint-disable-line class-methods-use-this */\n        // C++  void NodeList::processPingPacket(ReceivedMessage* message, Node* sendingNode)\n\n        /* eslint-disable @typescript-eslint/no-magic-numbers */\n\n        let dataPosition = 0;\n\n        const pingType = data.getUint8(dataPosition);\n        dataPosition += 1;\n        const timestamp = data.getBigUint64(dataPosition, UDT.LITTLE_ENDIAN);\n        dataPosition += 8;\n        const connectionID = data.getBigUint64(dataPosition, UDT.LITTLE_ENDIAN);\n        dataPosition += 8;\n\n        /* eslint-enable @typescript-eslint/no-magic-numbers */\n\n        assert(dataPosition === data.byteLength, \"ERROR: Length mismatch reading Ping packet!\");\n\n        return {\n            pingType,\n            timestamp,\n            connectionID\n        };\n    }\n\n}();\n\nexport default Ping;\nexport type { PingDetails };\n","//\n//  PacketHeaders.ts\n//\n//  Created by David Rowe on 7 Jun 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport assert from \"../../shared/assert\";\n\n\n/*@devdoc\n *  {@link PacketType(1)|Packet types}, <code>Unknown</code>, <code>StunResponse</code>, <code>...</code>, are represented as\n *  unsigned 8-bit numbers in the protocol packets.\n *  @typedef {number} PacketType\n */\n// Could just define `type PacketTypeValue = number` however using an object improves type safety.\nconst enum PacketTypeValue {\n    Unknown,                            // 0\n    StunResponse,\n    DomainList,\n    Ping,\n    PingReply,\n    KillAvatar,\n    AvatarData,\n    InjectAudio,\n    MixedAudio,\n    MicrophoneAudioNoEcho,\n    MicrophoneAudioWithEcho,            // 10\n    BulkAvatarData,\n    SilentAudioFrame,\n    DomainListRequest,\n    RequestAssignment,\n    CreateAssignment,\n    DomainConnectionDenied,\n    MuteEnvironment,\n    AudioStreamStats,\n    DomainServerPathQuery,\n    DomainServerPathResponse,           // 20\n    DomainServerAddedNode,\n    ICEServerPeerInformation,\n    ICEServerQuery,\n    OctreeStats,\n    SetAvatarTraits,\n    InjectorGainSet,\n    AssignmentClientStatus,\n    NoisyMute,\n    AvatarIdentity,\n    NodeIgnoreRequest,                  // 30\n    DomainConnectRequest,\n    DomainServerRequireDTLS,\n    NodeJsonStats,\n    OctreeDataNack,\n    StopNode,\n    AudioEnvironment,\n    EntityEditNack,\n    ICEServerHeartbeat,\n    ICEPing,\n    ICEPingReply,                       // 40\n    EntityData,\n    EntityQuery,\n    EntityAdd,\n    EntityErase,\n    EntityEdit,\n    DomainServerConnectionToken,\n    DomainSettingsRequest,\n    DomainSettings,\n    AssetGet,\n    AssetGetReply,                      // 50\n    AssetUpload,\n    AssetUploadReply,\n    AssetGetInfo,\n    AssetGetInfoReply,\n    DomainDisconnectRequest,\n    DomainServerRemovedNode,\n    MessagesData,\n    MessagesSubscribe,\n    MessagesUnsubscribe,\n    ICEServerHeartbeatDenied,           // 60\n    AssetMappingOperation,\n    AssetMappingOperationReply,\n    ICEServerHeartbeatACK,\n    NegotiateAudioFormat,\n    SelectedAudioFormat,\n    MoreEntityShapes,\n    NodeKickRequest,\n    NodeMuteRequest,\n    RadiusIgnoreRequest,\n    UsernameFromIDRequest,              // 70\n    UsernameFromIDReply,\n    AvatarQuery,\n    RequestsDomainListData,\n    PerAvatarGainSet,\n    EntityScriptGetStatus,\n    EntityScriptGetStatusReply,\n    ReloadEntityServerScript,\n    EntityPhysics,\n    EntityServerScriptLog,\n    AdjustAvatarSorting,                // 80\n    OctreeFileReplacement,\n    CollisionEventChanges,\n    ReplicatedMicrophoneAudioNoEcho,\n    ReplicatedMicrophoneAudioWithEcho,\n    ReplicatedInjectAudio,\n    ReplicatedSilentAudioFrame,\n    ReplicatedAvatarIdentity,\n    ReplicatedKillAvatar,\n    ReplicatedBulkAvatarData,\n    DomainContentReplacementFromUrl,    // 90\n    ChallengeOwnership,\n    EntityScriptCallMethod,\n    ChallengeOwnershipRequest,\n    ChallengeOwnershipReply,\n    OctreeDataFileRequest,\n    OctreeDataFileReply,\n    OctreeDataPersist,\n    EntityClone,\n    EntityQueryInitialResultsComplete,\n    BulkAvatarTraits,                   // 100\n    AudioSoloRequest,\n    BulkAvatarTraitsAck,\n    StopInjector,\n    AvatarZonePresence,\n    WebRTCSignaling,\n\n    NUM_PACKETS\n}\n\n\n/*@devdoc\n *  The <code>PacketType</code> namespace lists the Vircadia protocol packets.\n *  <p>C++: <code>PacketHeaders.h</code>\n *  <p><em>Reliable</em>: These packets are sent reliably: their successful receipt is verified and the packets are resent if\n *      necessary.</p>\n *\n *  @namespace PacketType\n *  @variation 1\n *  @property {PacketType} Unknown - <code>0</code>\n *  @property {PacketType} StunResponse - <code>1</code>\n *  @property {PacketType} DomainList - <code>2</code> - The Domain Server sends this to the user client in response to a\n *      DomainConnectRequest or DomainListRequest packet, if the client is authorized to connect to the domain.<br />\n *      {@link PacketScribe.DomainListDetails}.\n *  @property {PacketType} Ping - <code>3</code> - Assignment clients periodically send this to the user client to check that it\n *      is still connected.\n *      {@link PacketScribe.PingDetails}.\n *  @property {PacketType} PingReply - <code>4</code> - Sent in response to a Ping packet.\n *      {@link PacketScribe.PingReplyDetails}.\n *  @property {PacketType} KillAvatar - <code>5</code>\n *  @property {PacketType} AvatarData - <code>6</code>\n *  @property {PacketType} InjectAudio - <code>7</code>\n *  @property {PacketType} MixedAudio - <code>8</code> - The audio mixer repeatedly sends this to the user client when there is\n *      audio to play at the user client's audio position.\n *      {@link PacketScribe.MixedAudioDetails}.\n *  @property {PacketType} MicrophoneAudioNoEcho - <code>9</code> - The user client sends this to the audio mixer with user\n *      audio to play at the user client's audio position. The audio mixer should not echo the audio back to the user client.\n *  @property {PacketType} MicrophoneAudioWithEcho - <code>10</code> - The user client sends this to the audio mixer with user\n *      audio to play at the user client's audio position. The audio mixer should echo the audio back to the user client.\n *  @property {PacketType} BulkAvatarData - <code>11</code>\n *  @property {PacketType} SilentAudioFrame - <code>12</code> - The user client repeatedly sends this to the audio mixer when\n *      there isn't any audio (microphone) input from the user. The user client's audio position is included. The audio mixer\n *      repeatedly sends this to the user client when there isn't any audio to play at the user client's audio position.\n *      {@link PacketScribe.SilentAudioFrameDetails}.\n *  @property {PacketType} DomainListRequest - <code>13</code> - The user client periodically sends this to the Domain Server\n *      to maintain connection to the domain. The Domain Server responds with a DomainList or DomainConnectionDenied\n *      packet.<br />\n *      {@link PacketScribe.DomainListRequestDetails}.\n *  @property {PacketType} RequestAssignment - <code>14</code>\n *  @property {PacketType} CreateAssignment - <code>15</code>\n *  @property {PacketType} DomainConnectionDenied - <code>16</code> - The Domain Server sends this to the user client in\n *      response to a DomainConnectRequest or DomainListRequest packet, if the client is not authorized to connect to the\n *      domain.<br />\n *      {@link PacketScribe.DomainConnectionDeniedDetails}.\n *  @property {PacketType} MuteEnvironment - <code>17</code>\n *  @property {PacketType} AudioStreamStats - <code>18</code>\n *  @property {PacketType} DomainServerPathQuery - <code>19</code>\n *  @property {PacketType} DomainServerPathResponse - <code>20</code>\n *  @property {PacketType} DomainServerAddedNode - <code>21</code> - The Domain Server sends this to user clients when an\n *      assignment client start up, and to assignment clients and when another assignment client starts up or a user connects to\n *      the domain.\n *  @property {PacketType} ICEServerPeerInformation - <code>22</code>\n *  @property {PacketType} ICEServerQuery - <code>23</code>\n *  @property {PacketType} OctreeStats - <code>24</code>\n *  @property {PacketType} SetAvatarTraits - <code>25</code>\n *  @property {PacketType} InjectorGainSet - <code>26</code>\n *  @property {PacketType} AssignmentClientStatus - <code>27</code>\n *  @property {PacketType} NoisyMute - <code>28</code>\n *  @property {PacketType} AvatarIdentity - <code>29</code>\n *  @property {PacketType} NodeIgnoreRequest - <code>30</code>\n *  @property {PacketType} DomainConnectRequest - <code>31</code> - The user client sends this to the Domain Server to initiate\n *      connection to the domain. The Domain Server responds with a DomainList or DomainConnectionDenied packet.<br />\n *      {@link PacketScribe.DomainConnectRequestDetails}.\n *  @property {PacketType} DomainServerRequireDTLS - <code>32</code>\n *  @property {PacketType} NodeJsonStats - <code>33</code>\n *  @property {PacketType} OctreeDataNack - <code>34</code>\n *  @property {PacketType} StopNode - <code>35</code>\n *  @property {PacketType} AudioEnvironment - <code>36</code>\n *  @property {PacketType} EntityEditNack - <code>37</code>\n *  @property {PacketType} ICEServerHeartbeat - <code>38</code>\n *  @property {PacketType} ICEPing - <code>39</code>\n *  @property {PacketType} ICEPingReply - <code>40</code>\n *  @property {PacketType} EntityData - <code>41</code>\n *  @property {PacketType} EntityQuery - <code>42</code>\n *  @property {PacketType} EntityAdd - <code>43</code>\n *  @property {PacketType} EntityErase - <code>44</code>\n *  @property {PacketType} EntityEdit - <code>45</code>\n *  @property {PacketType} DomainServerConnectionToken - <code>46</code>\n *  @property {PacketType} DomainSettingsRequest - <code>47</code>\n *  @property {PacketType} DomainSettings - <code>48</code>\n *  @property {PacketType} AssetGet - <code>49</code>\n *  @property {PacketType} AssetGetReply - <code>50</code>\n *  @property {PacketType} AssetUpload - <code>51</code>\n *  @property {PacketType} AssetUploadReply - <code>52</code>\n *  @property {PacketType} AssetGetInfo - <code>53</code>\n *  @property {PacketType} AssetGetInfoReply - <code>54</code>\n *  @property {PacketType} DomainDisconnectRequest - <code>55</code> - The user client sends this empty packet to the Domain\n *      Server to signal that the user client is disconnecting. The Domain Server does not respond.\n *  @property {PacketType} DomainServerRemovedNode - <code>56</code> - The domain server broadcasts this to user clients when an\n *      assignment client has been removed. It is sent only to clients that have registered interest in the node type\n *      removed.<br />\n *      <em>Reliable.</em>\n *      {@link PacketScribe.DomainServerRemovedNodeDetails}.\n *  @property {PacketType} MessagesData - <code>57</code>\n *  @property {PacketType} MessagesSubscribe - <code>58</code>\n *  @property {PacketType} MessagesUnsubscribe - <code>59</code>\n *  @property {PacketType} ICEServerHeartbeatDenied - <code>60</code>\n *  @property {PacketType} AssetMappingOperation - <code>61</code>\n *  @property {PacketType} AssetMappingOperationReply - <code>62</code>\n *  @property {PacketType} ICEServerHeartbeatACK - <code>63</code>\n *  @property {PacketType} NegotiateAudioFormat - <code>64</code> - The user client sends this to the audio mixer to initiate\n *      negotiation of the audio codec to use.\n *      {@link PacketScribe.NegotiateAudioFormatDetails}.\n *  @property {PacketType} SelectedAudioFormat - <code>65</code> - The audio mixer sends this to the user client in response to\n *      the client sending a NegotiateAudioFormat packet. It specifies the audio codec that the audio mixer has selected to use.\n *      {@link PacketScribe.SelectedAudioFormatDetails}.\n *  @property {PacketType} MoreEntityShapes - <code>66</code>\n *  @property {PacketType} NodeKickRequest - <code>67</code>\n *  @property {PacketType} NodeMuteRequest - <code>68</code>\n *  @property {PacketType} RadiusIgnoreRequest - <code>69</code>\n *  @property {PacketType} UsernameFromIDRequest - <code>70</code>\n *  @property {PacketType} UsernameFromIDReply - <code>71</code>\n *  @property {PacketType} AvatarQuery - <code>72</code>\n *  @property {PacketType} RequestsDomainListData - <code>73</code>\n *  @property {PacketType} PerAvatarGainSet - <code>74</code>\n *  @property {PacketType} EntityScriptGetStatus - <code>75</code>\n *  @property {PacketType} EntityScriptGetStatusReply - <code>76</code>\n *  @property {PacketType} ReloadEntityServerScript - <code>77</code>\n *  @property {PacketType} EntityPhysics - <code>78</code>\n *  @property {PacketType} EntityServerScriptLog - <code>79</code>\n *  @property {PacketType} AdjustAvatarSorting - <code>80</code>\n *  @property {PacketType} OctreeFileReplacement - <code>81</code>\n *  @property {PacketType} CollisionEventChanges - <code>82</code>\n *  @property {PacketType} ReplicatedMicrophoneAudioNoEcho - <code>83</code>\n *  @property {PacketType} ReplicatedMicrophoneAudioWithEcho - <code>84</code>\n *  @property {PacketType} ReplicatedInjectAudio - <code>85</code>\n *  @property {PacketType} ReplicatedSilentAudioFrame - <code>86</code>\n *  @property {PacketType} ReplicatedAvatarIdentity - <code>87</code>\n *  @property {PacketType} ReplicatedKillAvatar - <code>88</code>\n *  @property {PacketType} ReplicatedBulkAvatarData - <code>89</code>\n *  @property {PacketType} DomainContentReplacementFromUrl - <code>90</code>\n *  @property {PacketType} ChallengeOwnership - <code>91</code>\n *  @property {PacketType} EntityScriptCallMethod - <code>92</code>\n *  @property {PacketType} ChallengeOwnershipRequest - <code>93</code>\n *  @property {PacketType} ChallengeOwnershipReply - <code>94</code>\n *  @property {PacketType} OctreeDataFileRequest - <code>95</code>\n *  @property {PacketType} OctreeDataFileReply - <code>96</code>\n *  @property {PacketType} OctreeDataPersist - <code>97</code>\n *  @property {PacketType} EntityClone - <code>98</code>\n *  @property {PacketType} EntityQueryInitialResultsComplete - <code>99</code>\n *  @property {PacketType} BulkAvatarTraits - <code>100</code>\n *  @property {PacketType} AudioSoloRequest - <code>101</code>\n *  @property {PacketType} BulkAvatarTraitsAck - <code>102</code>\n *  @property {PacketType} StopInjector - <code>103</code>\n *  @property {PacketType} AvatarZonePresence - <code>104</code>\n *  @property {PacketType} WebRTCSignaling - <code>104</code> - Used between the domain server and assignment clients to\n *      exchange user client WebRTC signaling messages relayed to assignment clients via the domain server.\n */\nconst PacketType = new class {\n    // C++: PacketType\n\n    // Property values are manually added because doing so provides additional type safety compared to adding at runtime.\n    readonly Unknown = PacketTypeValue.Unknown;\n    readonly StunResponse = PacketTypeValue.StunResponse;\n    readonly DomainList = PacketTypeValue.DomainList;\n    readonly Ping = PacketTypeValue.Ping;\n    readonly PingReply = PacketTypeValue.PingReply;\n    readonly KillAvatar = PacketTypeValue.KillAvatar;\n    readonly AvatarData = PacketTypeValue.AvatarData;\n    readonly InjectAudio = PacketTypeValue.InjectAudio;\n    readonly MixedAudio = PacketTypeValue.MixedAudio;\n    readonly MicrophoneAudioNoEcho = PacketTypeValue.MicrophoneAudioNoEcho;\n    readonly MicrophoneAudioWithEcho = PacketTypeValue.MicrophoneAudioWithEcho;\n    readonly BulkAvatarData = PacketTypeValue.BulkAvatarData;\n    readonly SilentAudioFrame = PacketTypeValue.SilentAudioFrame;\n    readonly DomainListRequest = PacketTypeValue.DomainListRequest;\n    readonly RequestAssignment = PacketTypeValue.RequestAssignment;\n    readonly CreateAssignment = PacketTypeValue.CreateAssignment;\n    readonly DomainConnectionDenied = PacketTypeValue.DomainConnectionDenied;\n    readonly MuteEnvironment = PacketTypeValue.MuteEnvironment;\n    readonly AudioStreamStats = PacketTypeValue.AudioStreamStats;\n    readonly DomainServerPathQuery = PacketTypeValue.DomainServerPathQuery;\n    readonly DomainServerPathResponse = PacketTypeValue.DomainServerPathResponse;\n    readonly DomainServerAddedNode = PacketTypeValue.DomainServerAddedNode;\n    readonly ICEServerPeerInformation = PacketTypeValue.ICEServerPeerInformation;\n    readonly ICEServerQuery = PacketTypeValue.ICEServerQuery;\n    readonly OctreeStats = PacketTypeValue.OctreeStats;\n    readonly SetAvatarTraits = PacketTypeValue.SetAvatarTraits;\n    readonly InjectorGainSet = PacketTypeValue.InjectorGainSet;\n    readonly AssignmentClientStatus = PacketTypeValue.AssignmentClientStatus;\n    readonly NoisyMute = PacketTypeValue.NoisyMute;\n    readonly AvatarIdentity = PacketTypeValue.AvatarIdentity;\n    readonly NodeIgnoreRequest = PacketTypeValue.NodeIgnoreRequest;\n    readonly DomainConnectRequest = PacketTypeValue.DomainConnectRequest;\n    readonly DomainServerRequireDTLS = PacketTypeValue.DomainServerRequireDTLS;\n    readonly NodeJsonStats = PacketTypeValue.NodeJsonStats;\n    readonly OctreeDataNack = PacketTypeValue.OctreeDataNack;\n    readonly StopNode = PacketTypeValue.StopNode;\n    readonly AudioEnvironment = PacketTypeValue.AudioEnvironment;\n    readonly EntityEditNack = PacketTypeValue.EntityEditNack;\n    readonly ICEServerHeartbeat = PacketTypeValue.ICEServerHeartbeat;\n    readonly ICEPing = PacketTypeValue.ICEPing;\n    readonly ICEPingReply = PacketTypeValue.ICEPingReply;\n    readonly EntityData = PacketTypeValue.EntityData;\n    readonly EntityQuery = PacketTypeValue.EntityQuery;\n    readonly EntityAdd = PacketTypeValue.EntityAdd;\n    readonly EntityErase = PacketTypeValue.EntityErase;\n    readonly EntityEdit = PacketTypeValue.EntityEdit;\n    readonly DomainServerConnectionToken = PacketTypeValue.DomainServerConnectionToken;\n    readonly DomainSettingsRequest = PacketTypeValue.DomainSettingsRequest;\n    readonly DomainSettings = PacketTypeValue.DomainSettings;\n    readonly AssetGet = PacketTypeValue.AssetGet;\n    readonly AssetGetReply = PacketTypeValue.AssetGetReply;\n    readonly AssetUpload = PacketTypeValue.AssetUpload;\n    readonly AssetUploadReply = PacketTypeValue.AssetUploadReply;\n    readonly AssetGetInfo = PacketTypeValue.AssetGetInfo;\n    readonly AssetGetInfoReply = PacketTypeValue.AssetGetInfoReply;\n    readonly DomainDisconnectRequest = PacketTypeValue.DomainDisconnectRequest;\n    readonly DomainServerRemovedNode = PacketTypeValue.DomainServerRemovedNode;\n    readonly MessagesData = PacketTypeValue.MessagesData;\n    readonly MessagesSubscribe = PacketTypeValue.MessagesSubscribe;\n    readonly MessagesUnsubscribe = PacketTypeValue.MessagesUnsubscribe;\n    readonly ICEServerHeartbeatDenied = PacketTypeValue.ICEServerHeartbeatDenied;\n    readonly AssetMappingOperation = PacketTypeValue.AssetMappingOperation;\n    readonly AssetMappingOperationReply = PacketTypeValue.AssetMappingOperationReply;\n    readonly ICEServerHeartbeatACK = PacketTypeValue.ICEServerHeartbeatACK;\n    readonly NegotiateAudioFormat = PacketTypeValue.NegotiateAudioFormat;\n    readonly SelectedAudioFormat = PacketTypeValue.SelectedAudioFormat;\n    readonly MoreEntityShapes = PacketTypeValue.MoreEntityShapes;\n    readonly NodeKickRequest = PacketTypeValue.NodeKickRequest;\n    readonly NodeMuteRequest = PacketTypeValue.NodeMuteRequest;\n    readonly RadiusIgnoreRequest = PacketTypeValue.RadiusIgnoreRequest;\n    readonly UsernameFromIDRequest = PacketTypeValue.UsernameFromIDRequest;\n    readonly UsernameFromIDReply = PacketTypeValue.UsernameFromIDReply;\n    readonly AvatarQuery = PacketTypeValue.AvatarQuery;\n    readonly RequestsDomainListData = PacketTypeValue.RequestsDomainListData;\n    readonly PerAvatarGainSet = PacketTypeValue.PerAvatarGainSet;\n    readonly EntityScriptGetStatus = PacketTypeValue.EntityScriptGetStatus;\n    readonly EntityScriptGetStatusReply = PacketTypeValue.EntityScriptGetStatusReply;\n    readonly ReloadEntityServerScript = PacketTypeValue.ReloadEntityServerScript;\n    readonly EntityPhysics = PacketTypeValue.EntityPhysics;\n    readonly EntityServerScriptLog = PacketTypeValue.EntityServerScriptLog;\n    readonly AdjustAvatarSorting = PacketTypeValue.AdjustAvatarSorting;\n    readonly OctreeFileReplacement = PacketTypeValue.OctreeFileReplacement;\n    readonly CollisionEventChanges = PacketTypeValue.CollisionEventChanges;\n    readonly ReplicatedMicrophoneAudioNoEcho = PacketTypeValue.ReplicatedMicrophoneAudioNoEcho;\n    readonly ReplicatedMicrophoneAudioWithEcho = PacketTypeValue.ReplicatedMicrophoneAudioWithEcho;\n    readonly ReplicatedInjectAudio = PacketTypeValue.ReplicatedInjectAudio;\n    readonly ReplicatedSilentAudioFrame = PacketTypeValue.ReplicatedSilentAudioFrame;\n    readonly ReplicatedAvatarIdentity = PacketTypeValue.ReplicatedAvatarIdentity;\n    readonly ReplicatedKillAvatar = PacketTypeValue.ReplicatedKillAvatar;\n    readonly ReplicatedBulkAvatarData = PacketTypeValue.ReplicatedBulkAvatarData;\n    readonly DomainContentReplacementFromUrl = PacketTypeValue.DomainContentReplacementFromUrl;\n    readonly ChallengeOwnership = PacketTypeValue.ChallengeOwnership;\n    readonly EntityScriptCallMethod = PacketTypeValue.EntityScriptCallMethod;\n    readonly ChallengeOwnershipRequest = PacketTypeValue.ChallengeOwnershipRequest;\n    readonly ChallengeOwnershipReply = PacketTypeValue.ChallengeOwnershipReply;\n    readonly OctreeDataFileRequest = PacketTypeValue.OctreeDataFileRequest;\n    readonly OctreeDataFileReply = PacketTypeValue.OctreeDataFileReply;\n    readonly OctreeDataPersist = PacketTypeValue.OctreeDataPersist;\n    readonly EntityClone = PacketTypeValue.EntityClone;\n    readonly EntityQueryInitialResultsComplete = PacketTypeValue.EntityQueryInitialResultsComplete;\n    readonly BulkAvatarTraits = PacketTypeValue.BulkAvatarTraits;\n    readonly AudioSoloRequest = PacketTypeValue.AudioSoloRequest;\n    readonly BulkAvatarTraitsAck = PacketTypeValue.BulkAvatarTraitsAck;\n    readonly StopInjector = PacketTypeValue.StopInjector;\n    readonly AvatarZonePresence = PacketTypeValue.AvatarZonePresence;\n    readonly WebRTCSignaling = PacketTypeValue.WebRTCSignaling;\n\n    // Packets that are sent without verifying that they are received.\n    readonly #_nonVerifiedPackets = new Set([\n        PacketTypeValue.NodeJsonStats,\n        PacketTypeValue.EntityQuery,\n        PacketTypeValue.OctreeDataNack,\n        PacketTypeValue.EntityEditNack,\n        PacketTypeValue.DomainListRequest,\n        PacketTypeValue.StopNode,\n        PacketTypeValue.DomainDisconnectRequest,\n        PacketTypeValue.UsernameFromIDRequest,\n        PacketTypeValue.NodeKickRequest,\n        PacketTypeValue.NodeMuteRequest\n    ]);\n\n    // Packets that don't include the local node ID of the sending node.\n    readonly #_nonSourcedPackets = new Set([\n        PacketTypeValue.StunResponse,\n        PacketTypeValue.CreateAssignment,\n        PacketTypeValue.RequestAssignment,\n        PacketTypeValue.DomainServerRequireDTLS,\n        PacketTypeValue.DomainConnectRequest,\n        PacketTypeValue.DomainList,\n        PacketTypeValue.DomainConnectionDenied,\n        PacketTypeValue.DomainServerPathQuery,\n        PacketTypeValue.DomainServerPathResponse,\n        PacketTypeValue.DomainServerAddedNode,\n        PacketTypeValue.DomainServerConnectionToken,\n        PacketTypeValue.DomainSettingsRequest,\n        PacketTypeValue.OctreeDataFileRequest,\n        PacketTypeValue.OctreeDataFileReply,\n        PacketTypeValue.OctreeDataPersist,\n        PacketTypeValue.DomainContentReplacementFromUrl,\n        PacketTypeValue.DomainSettings,\n        PacketTypeValue.ICEServerPeerInformation,\n        PacketTypeValue.ICEServerQuery,\n        PacketTypeValue.ICEServerHeartbeat,\n        PacketTypeValue.ICEServerHeartbeatACK,\n        PacketTypeValue.ICEPing,\n        PacketTypeValue.ICEPingReply,\n        PacketTypeValue.ICEServerHeartbeatDenied,\n        PacketTypeValue.AssignmentClientStatus,\n        PacketTypeValue.StopNode,\n        PacketTypeValue.DomainServerRemovedNode,\n        PacketTypeValue.UsernameFromIDReply,\n        PacketTypeValue.OctreeFileReplacement,\n        PacketTypeValue.ReplicatedMicrophoneAudioNoEcho,\n        PacketTypeValue.ReplicatedMicrophoneAudioWithEcho,\n        PacketTypeValue.ReplicatedInjectAudio,\n        PacketTypeValue.ReplicatedSilentAudioFrame,\n        PacketTypeValue.ReplicatedAvatarIdentity,\n        PacketTypeValue.ReplicatedKillAvatar,\n        PacketTypeValue.ReplicatedBulkAvatarData,\n        PacketTypeValue.AvatarZonePresence,\n        PacketTypeValue.WebRTCSignaling\n    ]);\n\n    readonly #_DomainListVersion = {\n        // C++  DomainListVersion\n        HasConnectReason: 24,\n        SocketTypes: 25\n    };\n\n    readonly #_DomainConnectionDeniedVersion = {\n        // C++ DomainConnectionDeniedVersion\n        IncludesExtraInfo: 19\n    };\n\n    readonly #_DomainConnectRequestVersion = {\n        // C++  DomainConnectRequestVersion\n        HasCompressedSystemInfo: 26,\n        SocketTypes: 27\n    };\n\n    readonly #_DomainListRequestVersion = {\n        // C++  DomainListRequestVersion\n        PreSocketTypes: 22,\n        SocketTypes: 23\n    };\n\n    readonly #_AudioVersion = {\n        // C++  AudioVersion\n        StopInjectors: 24\n    };\n\n\n    constructor() {\n        assert(PacketTypeValue.NUM_PACKETS - 1 === this.WebRTCSignaling, \"Inconsistent packet data in PacketHeaders!\");\n    }\n\n\n    /*@devdoc\n     *  Gets the current version number of a packet type.\n     *  @function PacketType(1).versionForPacketType\n     *  @param {PacketType} packetType The packet type to get the version number of.\n     *  @returns {PacketVersion} The current version number of the packet type.\n     */\n    /*@devdoc\n     *  {@link PacketType(1)|Packet} versions are represented by unsigned 8-bit numbers in the protocol packets.\n     *  @typedef {number} PacketVersion\n     */\n    versionForPacketType(packetType: PacketTypeValue): number {\n        // C++  PacketVersion versionForPacketType(PacketType packetType)\n        const DEFAULT_VERSION = 22;\n        switch (packetType) {\n            case this.DomainList:\n                return this.#_DomainListVersion.SocketTypes;\n            case this.PingReply:\n                return DEFAULT_VERSION;\n            case this.SilentAudioFrame:\n            case this.MicrophoneAudioNoEcho:\n                return this.#_AudioVersion.StopInjectors;\n            case this.DomainListRequest:\n                return this.#_DomainListRequestVersion.SocketTypes;\n            case this.DomainConnectionDenied:\n                return this.#_DomainConnectionDeniedVersion.IncludesExtraInfo;\n            case this.DomainConnectRequest:\n                return this.#_DomainConnectRequestVersion.SocketTypes;\n            case this.DomainDisconnectRequest:\n                return DEFAULT_VERSION;\n            case this.DomainServerRemovedNode:\n                return DEFAULT_VERSION;\n            case this.NegotiateAudioFormat:\n                return DEFAULT_VERSION;\n            case this.SelectedAudioFormat:\n                return DEFAULT_VERSION;\n\n                // WebRTC TODO: Add other packets.\n\n            // C++ default for remainder of packets is 22 but we want to report packets we haven't implemented, so explicitly\n            // list those packets we know about.\n            default:\n                console.error(\"ERROR - Unknown packet type in versionForPacketType() :\", packetType);\n        }\n        return 0;\n    }\n\n    /*@devdoc\n     *  Gets the Set of non-verified packets, i.e., packets which are sent without verifying that they are received.\n     *  @function PacketType(1).getNonVerifiedPackets\n     *  @returns {Set<PacketType>} The Set of non-verified packets.\n     */\n    getNonVerifiedPackets() {\n        // C++  getNonSourcedPackets()\n        return this.#_nonVerifiedPackets;\n    }\n\n    /*@devdoc\n     *  Gets the Set of non-sourced packets, i.e., packets which don't include the local node ID of the sending node.\n     *  @function PacketType(1).getNonSourcedPackets\n     *  @returns {Set<PacketType>} The Set of non-sourced packets.\n     */\n    getNonSourcedPackets() {\n        // C++  getNonSourcedPackets()\n        return this.#_nonSourcedPackets;\n    }\n\n}();\n\n\n/*@devdoc\n *  Gets the unique identifier for the Vircadia protocol version, combining all packet versions into a hash.\n *  @function protocolVersionsSignature\n *  @returns {Uint8Array} The 16-byte protocol version hash.\n */\nfunction protocolVersionsSignature(): Uint8Array {\n    // C++  QByteArray protocolVersionsSignature()\n\n    // WEBRTC TODO: Retrieve value from a compile-time configuration file.\n\n    /* eslint-disable @typescript-eslint/no-magic-numbers */\n    const PROTOCOL_SIGNATURE_BYTES\n        = [0xad, 0x15, 0xda, 0x90, 0xe0, 0x7d, 0x2c, 0x7b, 0x40, 0x83, 0x25, 0x38, 0x3a, 0xd8, 0xb7, 0x7d];\n    /* eslint-enable @typescript-eslint/no-magic-numbers */\n    return Uint8Array.from(PROTOCOL_SIGNATURE_BYTES);\n}\n\n\nexport { PacketType as default, PacketTypeValue, protocolVersionsSignature };\n","//\n//  HMACAuth.ts\n//\n//  Created by David Rowe on 27 Aug 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport Uuid from \"../shared/Uuid\";\nimport UDT from \"./udt/UDT\";\nimport \"../shared/DataViewExtensions\";\n\nimport CryptoJS from \"crypto-js\";\n\n\n/*@devdoc\n *  HMAC hash algorithms.\n *  <table>\n *      <thead>\n *          <tr><th>Name</th><th>Value</th><th>Description</th></tr>\n *      </thead>\n *      <tbody>\n *          <tr><td>MD5</td><td><code>0</code></td><td>MD5 hash.</td></tr>\n *          <tr><td>SHA1</td><td><code>1</code></td><td>SHA1 hash.</td></tr>\n *          <tr><td>SHA224</td><td><code>2</code></td><td>SHA224 hash.</td></tr>\n *          <tr><td>SHA256</td><td><code>3</code></td><td>SHA256 hash.</td></tr>\n *          <tr><td>RIPEMD160</td><td><code>4</code></td><td>RIPEMD160 hash.</td></tr>\n *      </tbody>\n *  </table>\n *  @typedef {number} HMACAuth.AuthMethod\n */\nenum AuthMethod {\n    MD5 = 0,\n    SHA1,\n    SHA224,\n    SHA256,\n    RIPEMD160\n}\n\n\n/*@devdoc\n *  The <code>HMACAuth</code> class provides hash-based message authentication for signing the content of protocol packets.\n *  <p>C++: <code>HMACAuth</code></p>\n *  @class HMACAuth\n *  @param {HMACAuth.AuthMethod} authMethod=MD5 - The hash algorithm to use.\n *      <p><em>Only MD5 is supported at present.</em></p>\n *\n *  @property {HMACAuth.AuthMethod} MD5 - MD5 hash. <em>Static.</em>\n *  @property {HMACAuth.AuthMethod} SHA1 - SHA1 hash. <em>Static.</em>\n *  @property {HMACAuth.AuthMethod} SHA224 - SHA224 hash. <em>Static.</em>\n *  @property {HMACAuth.AuthMethod} SHA256 - SHA256 hash. <em>Static.</em>\n *  @property {HMACAuth.AuthMethod} RIPEMD160 - RIPEMD160 hash. <em>Static.</em>\n */\nclass HMACAuth {\n    // C++  class HMACAuth\n\n    static get MD5(): AuthMethod {\n        return AuthMethod.MD5;\n    }\n\n    static get SHA1(): AuthMethod {\n        return AuthMethod.SHA1;\n    }\n\n    static get SHA224(): AuthMethod {\n        return AuthMethod.SHA224;\n    }\n\n    static get SHA256(): AuthMethod {\n        return AuthMethod.SHA256;\n    }\n\n    static get RIPEMD160(): AuthMethod {\n        return AuthMethod.RIPEMD160;\n    }\n\n\n    #_keyWordArray;\n\n\n    constructor(authMethod = HMACAuth.MD5) {\n        // C++  explicit HMACAuth(AuthMethod authMethod = MD5)\n\n        // Vircadia only uses MD5.\n        if (authMethod !== HMACAuth.MD5) {\n            console.error(\"HMACAuth method not supported:\", authMethod);\n        }\n\n        this.#_keyWordArray = CryptoJS.lib.WordArray.create([]);\n    }\n\n\n    /*@devdoc\n     *  Sets the key to use when calculating hashes.\n     *  @param {Uuid} uuidKey - The key to use when calculating hashes.\n     *  @returns {boolean} <code>true</code> if the key is valid and has been set, <code>false</code> if not set.\n     */\n    setKey(uuidKey: Uuid): boolean {\n        // C++  bool setKey(const QUuid& uidKey)\n        if (uuidKey.value() !== Uuid.NULL) {\n            const KEY_BYTES = 16;\n            const keyBytes = new Uint8Array(KEY_BYTES);\n            const dataView = new DataView(keyBytes.buffer);\n            dataView.setBigUint128(0, uuidKey.value(), UDT.BIG_ENDIAN);\n            // The @types/crypto-js definitions haven't caught up with CryptoJS working with ArrayBuffers.\n            // eslint-disable-next-line\n            // @ts-ignore\n            this.#_keyWordArray = CryptoJS.lib.WordArray.create(keyBytes);\n            return true;\n        }\n        return false;\n    }\n\n    /*@devdoc\n     *  Calculates the hash of packet data.\n     *  @param {Uint8Array} hashResult - The destination to write the calculated hash.\n     *  @param {Uint8Array} data - The packet data to hash.\n     *  @param {number} offset - The start index within the packet data to hash.\n     *  @param {number} dataLength - The length of the data within the packet to hash.\n     *  @returns {boolean} <code>true</code> if the hash was successfully calculated, <code>false</code> if it wasn't.\n     */\n    calculateHash(hashResult: Uint8Array, data: Uint8Array, offset: number, dataLen: number): boolean {\n        // C++  bool calculateHash(HMACHash& hashResult, const char* data, int dataLen)\n\n        // The key must be set.\n        if (this.#_keyWordArray.words.length === 0) {\n            return false;\n        }\n\n        // Prepare the data.\n        const bytes = data.slice(offset, offset + dataLen);\n\n        // The @types/crypto-js definitions haven't caught up with CryptoJS working with ArrayBuffers.\n        // eslint-disable-next-line\n        // @ts-ignore\n        const wordArray = CryptoJS.lib.WordArray.create(bytes);\n\n        // Calculate the hash.\n        const hash = CryptoJS.HmacMD5(wordArray, this.#_keyWordArray);  // eslint-disable-line new-cap\n\n        // Return the result.\n        const dataView = new DataView(hashResult.buffer);\n        const WORD_BYTES = 4;\n        hash.words.forEach((word, i) => {\n            dataView.setInt32(i * WORD_BYTES, word, UDT.BIG_ENDIAN);\n        });\n\n        return true;\n    }\n\n}\n\nexport default HMACAuth;\nexport type { AuthMethod };\n","//\n//  NodeType.ts\n//\n//  Created by David Rowe on 18 May 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\n\n/*@devdoc\n *  {@link NodeType(1)|Node types},  <code>DomainServer</code> &ndash; <code>Unassigned</code>, are the types of network nodes\n *  operating in a domain. They are represented as single 8-bit characters in the protocol packets.\n *  @typedef {string} NodeType\n */\nconst enum NodeTypeValue {\n    // C++  NodeType_t\n    DomainServer = \"D\",\n    EntityServer = \"o\",\n    Agent = \"I\",\n    AudioMixer = \"M\",\n    AvatarMixer = \"W\",\n    AssetServer = \"A\",\n    MessagesMixer = \"m\",\n    EntityScriptServer = \"S\",\n    UpstreamAudioMixer = \"B\",\n    UpstreamAvatarMixer = \"C\",\n    DownstreamAudioMixer = \"a\",\n    DownstreamAvatarMixer = \"w\",\n    Unassigned = \"\\x01\"\n}\n\n\n/*@devdoc\n *  The <code>NodeType</code> namespace provides information on a network node's type. Node type values are represented as\n *  single 8-bit characters in the protocol packets.\n *  <p>Note: The following node types are not applicable for use in a client: <code>UpstreamAudioMixer</code>,\n *  <code>UpstreamAvatarMixer</code>, <code>DownstreamAudioMixer</code>, and <code>DownstreamAvatarMixer</code>.</p>\n *  <p>C++: <code>NodeType</code></p>\n *\n *  @namespace NodeType\n *  @variation 1\n *\n *  @property {NodeType} DomainServer - <code>\"D\"</code> - Domain server.\n *  @property {NodeType} EntityServer - <code>\"o\"</code> - Entity server.\n *  @property {NodeType} Agent - <code>\"I\"</code> - A web client or an assignment client emulating an avatar.\n *  @property {NodeType} AudioMixer - <code>\"M\"</code> - Audio mixer.\n *  @property {NodeType} AvatarMixer - <code>\"W\"</code> - Avatar mixer.\n *  @property {NodeType} AssetServer - <code>\"A\"</code> - Asset server.\n *  @property {NodeType} MessagesMixer - <code>\"m\"</code> - Messages mixer.\n *  @property {NodeType} EntityScriptServer - <code>\"S\"</code> - Entity script server.\n *  @property {NodeType} UpstreamAudioMixer - <code>\"B\"</code> - Upstream audio mixer.\n *  @property {NodeType} UpstreamAvatarMixer - <code>\"C\"</code> - Upstream avatar mixer.\n *  @property {NodeType} DownstreamAudioMixer - <code>\"a\"</code> - Downstream audio mixer.\n *  @property {NodeType} DownstreamAvatarMixer - <code>\"w\"</code> - Downstream avatar mixer.\n *  @property {NodeType} Unassigned - <code>String.fromCharCode(1)</code> - Unassigned.\n */\nconst NodeType = new class {\n    // C++  NodeType\n\n    readonly DomainServer = NodeTypeValue.DomainServer;\n    readonly EntityServer = NodeTypeValue.EntityServer;\n    readonly Agent = NodeTypeValue.Agent;\n    readonly AudioMixer = NodeTypeValue.AudioMixer;\n    readonly AvatarMixer = NodeTypeValue.AvatarMixer;\n    readonly AssetServer = NodeTypeValue.AssetServer;\n    readonly MessagesMixer = NodeTypeValue.MessagesMixer;\n    readonly EntityScriptServer = NodeTypeValue.EntityScriptServer;\n    readonly UpstreamAudioMixer = NodeTypeValue.UpstreamAudioMixer;\n    readonly UpstreamAvatarMixer = NodeTypeValue.UpstreamAvatarMixer;\n    readonly DownstreamAudioMixer = NodeTypeValue.DownstreamAudioMixer;\n    readonly DownstreamAvatarMixer = NodeTypeValue.DownstreamAvatarMixer;\n    readonly Unassigned = NodeTypeValue.Unassigned;\n\n\n    readonly #NODE_TYPE_NAMES = {\n        [this.DomainServer]: \"Domain Server\",\n        [this.EntityServer]: \"Entity Server\",\n        [this.Agent]: \"Agent\",\n        [this.AudioMixer]: \"Audio Mixer\",\n        [this.AvatarMixer]: \"Avatar Mixer\",\n        [this.MessagesMixer]: \"Messages Mixer\",\n        [this.AssetServer]: \"Asset Server\",\n        [this.EntityScriptServer]: \"Entity Script Server\",\n        [this.UpstreamAudioMixer]: \"Upstream Audio Mixer\",\n        [this.UpstreamAvatarMixer]: \"Upstream Avatar Mixer\",\n        [this.DownstreamAudioMixer]: \"Downstream Audio Mixer\",\n        [this.DownstreamAvatarMixer]: \"Downstream Avatar Mixer\",\n        [this.Unassigned]: \"Unassigned\"\n    };\n\n\n    /*@devdoc\n     *  Gets the name of a NodeType value, e.g., <code>\"Domain Server\"</code>.\n     *  @function NodeType(1).getNodeTypeName\n     *  @param {NodeType} nodeType - The node type value.\n     *  @returns {string} The name of the node type. <code>\"Unknown\"</code> if the <code>nodeType</code> is invalid.\n     */\n    getNodeTypeName(nodeType: NodeTypeValue): string {\n        // C++  QString& getNodeTypeName(NodeType_t nodeType)\n        let name = this.#NODE_TYPE_NAMES[nodeType];\n        if (name === undefined) {\n            name = \"Unknown\";\n        }\n        return name;\n    }\n\n    /*@devdoc\n     *  Tests whether a node type is an upstream node.\n     *  @function NodeType(1).isUpstream\n     *  @param {NodeType} nodeType - The node type.\n     *  @returns {boolean} <code>true</code> if the node type is an upstream node, <code>false</code> if it isn't.\n     */\n    isUpstream(nodeType: NodeTypeValue): boolean {  // eslint-disable-line class-methods-use-this\n        return nodeType === NodeTypeValue.UpstreamAudioMixer || nodeType === NodeTypeValue.UpstreamAvatarMixer;\n    }\n\n}();\n\nexport { NodeType as default, NodeTypeValue };\n","//\n//  Node.ts\n//\n//  Created by David Rowe on 11 Aug 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport HMACAuth from \"./HMACAuth\";\nimport NetworkPeer, { LocalID } from \"./NetworkPeer\";\nimport NodePermissions from \"./NodePermissions\";\nimport NodeType, { NodeTypeValue } from \"./NodeType\";\nimport SockAddr from \"./SockAddr\";\nimport Uuid from \"../shared/Uuid\";\n\n\n/*@devdoc\n *  The <code>Node</code> class handles the connection to and the features of an assignment client node.\n *  <p>C++: <code>Node : public NetworkPeer</code></p>\n *  @class Node\n *  @extends NetworkPeer\n *  @param {Uuid} uuid - The UUID of the node.\n *  @param {NodeType} type - The type of the node.\n *  @param {SockAddr} publicSocket - The node's public socket.\n *  @param {SockAddr} localSocket - The node's local socket.\n *\n *  @property {LocalID} NULL_LOCAL_ID - The null LocalID, <code>0</code>. <em>Read-only.</em>\n *      <p><em>Static.</em></p>\n */\nclass Node extends NetworkPeer {\n    // C++  class Node : public NetworkPeer\n\n    static readonly NULL_LOCAL_ID: LocalID = 0;\n\n\n    #_type = NodeType.Unassigned;\n    #_permissions = new NodePermissions();\n    #_connectionSecret = new Uuid();\n    #_authenticateHash: HMACAuth | null = null;\n    #_isReplicated = false;\n    #_isUpstream = false;\n\n\n    constructor(uuid: Uuid, type: NodeTypeValue, publicSocket: SockAddr, localSocket: SockAddr) {\n        // C++  Node(const QUuid& uuid, NodeType_t type, const SockAddr& publicSocket, const SockAddr& localSocket,\n        //          QObject * parent)\n        super(uuid, publicSocket, localSocket);\n\n        this.setType(type);  // Sets object names.\n    }\n\n\n    /*@devdoc\n     *  Gets the node's type.\n     *  @returns {NodeType} The node's type.\n     */\n    getType(): NodeTypeValue {\n        // C++  char getType() const { return _type; }\n        return this.#_type;\n    }\n\n    /*@devdoc\n     *  Sets the node's type and sets the object names of the node's public and local sockets to reflect the node's type.\n     *  @param {NodeTypeValue} type - The node's type.\n     */\n    setType(type: NodeTypeValue): void {\n        // C++  void setType(char type);\n        this.#_type = type;\n\n        const typeString = NodeType.getNodeTypeName(type);\n        this._publicSocket.setObjectName(typeString);\n        this._localSocket.setObjectName(typeString);\n\n        // WEBRTC TODO: Address further C++ code.\n\n    }\n\n    /*@devdoc\n     *  Gets the {@link HMACAuth} object used for authenticating the content of packets sent and received.\n     *  @returns {HMACAuth|null} The HMACAuth object if available, otherwise <code>null</code>.\n     */\n    getAuthenticateHash(): HMACAuth | null {\n        // C++  HMACAuth* getAuthenticateHash()\n        return this.#_authenticateHash;\n    }\n\n\n    /*@devdoc\n     *  Gets the node's permissions.\n     *  @returns {NodePermissions} The node's permissions.\n     */\n    getPermissions(): NodePermissions {\n        // C++  NodePermissions getPermissions() const\n        return this.#_permissions;\n    }\n\n    /*@devdoc\n     *  Sets the node's permissions.\n     *  @param {NodePermissions} newPermissions - The node's new node permissions.\n     */\n    setPermissions(newPermissions: NodePermissions): void {\n        // C++  void setPermissions(const NodePermissions& newPermissions)\n        this.#_permissions = newPermissions;\n    }\n\n    /*@devdoc\n     *  Gets the node's connection secret.\n     *  @returns {Uuid} The node's connection secret.\n     */\n    getConnectionSecret(): Uuid {\n        // C++  QUuid& getConnectionSecret() const\n        return this.#_connectionSecret;\n    }\n\n    /*@devdoc\n     *  Sets the node's connection secret.\n     *  @param {Uuid} connectionSecret - The node's connection secret.\n     */\n    setConnectionSecret(connectionSecret: Uuid): void {\n        // C++  void setConnectionSecret(const QUuid& connectionSecret);\n        if (this.#_connectionSecret.valueOf() === connectionSecret.valueOf()) {\n            return;\n        }\n\n        if (!this.#_authenticateHash) {\n            this.#_authenticateHash = new HMACAuth();\n        }\n\n        this.#_connectionSecret = connectionSecret;\n        this.#_authenticateHash.setKey(this.#_connectionSecret);\n    }\n\n    /*@devdoc\n     *  Gets whether the node is replicated.\n     *  @returns {boolean} <code>true</code> if the node is replicated, <code>false</code> if it isn't.\n     */\n    getIsReplicated(): boolean {\n        // C++  bool isReplicated() const\n        return this.#_isReplicated;\n    }\n\n    /*@devdoc\n     *  Sets whether the node is replicated.\n     *  @param {boolean} isReplicated - <code>true</code> if the node is replicated, <code>false</code> if it isn't.\n     */\n    setIsReplicated(isReplicated: boolean): void {\n        // C++  void setIsReplicated(bool isReplicated)\n        this.#_isReplicated = isReplicated;\n    }\n\n    /*@devdoc\n     *  Gets whether the node is upstream.\n     *  @returns {boolean} <code>true</code> if the node is upstream, <code>false</code> if it isn't.\n     */\n    getIsUpstream(): boolean {\n        // C++  bool isUpstream() const\n        return this.#_isUpstream;\n    }\n\n    /*@devdoc\n     *  Sets whether the node is upstream.\n     *  @param {boolean} isUpstream - <code>true</code> if the node is upstream, <code>false</code> if it isn't.\n     */\n    setIsUpstream(isUpstream: boolean): void {\n        // c++  void setIsUpstream(bool isUpstream)\n        this.#_isUpstream = isUpstream;\n    }\n\n\n}\n\nexport default Node;\n","//\n//  NetworkPeer.ts\n//\n//  Created by David Rowe on 11 Aug 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\n\nimport SockAddr from \"./SockAddr\";\nimport Signal from \"../shared/Signal\";\nimport Uuid from \"../shared/Uuid\";\n\n\ntype LocalID = number;\n// C++  using LocalID = NetworkLocalID\n//      using NetworkLocalID = quint16\n\n\n/*@devdoc\n *  The <code>NetworkPeer</code> class manages the network connection to an assignment client.\n *  <p>See also: {@link Node}.</p>\n *  <p>C++: <code>NetworkPeer : public QObject</code></p>\n *  @class NetworkPeer\n *  @param {Uuid} [uuid=Uuid.NULL] - The network connections's UUID.\n *  @param {SockAddr} [publicSocket=newSockAddr()] - The public socket address.\n *  @param {SockAddr} [localSocket=newSockAddr()] - The local socket address.\n */\nclass NetworkPeer {\n    // C++  class NetworkPeer : public QObject\n\n    /*@devdoc\n     *  A local ID is an integer ID assigned to the domain server, an assignment client, or a web client by the domain server.\n     *  @typedef {number} LocalID\n     */\n\n\n    // WEBRTC TODO: Address public versus local sockets w.r.t. WebRTC and the Web SDK.\n    protected _publicSocket;\n    protected _localSocket;\n\n    #_uuid;\n    #_localID: LocalID = 0;\n    #_activeSocket: SockAddr | null = null;  // References the active socket.\n    #_socketUpdated = new Signal();\n    #_socketActivated = new Signal();\n    // Ping timer N/A: It is used in C++ for UDP hole punching to assignment clients.\n\n\n    constructor(uuid = new Uuid(), publicSocket = new SockAddr(), localSocket = new SockAddr()) {\n        // C++  NetworkPeer(const QUuid& uuid, const SockAddr& publicSocket, const SockAddr& localSocket, QObject* parent)\n        //      NetworkPeer(QObject* parent)\n        this.#_uuid = uuid;\n        this._publicSocket = publicSocket;\n        this._localSocket = localSocket;\n\n        // WEBRTC TODO: Address further C++ code.\n\n    }\n\n\n    /*@devdoc\n     *  Gets the UUID.\n     *  @returns {Uuid} The UUID.\n     */\n    getUUID(): Uuid {\n        // C++  NetworkPeer::getUUID()\n        return this.#_uuid;\n    }\n\n    /*@devdoc\n     *  Sets the UUID.\n     *  @param {Uuid} uuid - The UUID.\n     */\n    setUUID(uuid: Uuid): void {\n        // C++  NetworkPeer::setUUID()\n        this.#_uuid = uuid;\n    }\n\n    /*@devdoc\n     *  Gets the local ID.\n     *  @returns {LocalID} The local ID.\n     */\n    getLocalID(): LocalID {\n        // C++  LocalID getLocalID()\n        return this.#_localID;\n    }\n\n    /*@devdoc\n     *  Sets the local ID.\n     *  @param {Uuid} uuid - The UUID.\n     */\n    setLocalID(localID: LocalID): void {\n        // C++  void setLocalID(LocalID localID)\n        this.#_localID = localID;\n    }\n\n    /*@devdoc\n     *  Gets the public socket address.\n     *  @returns {SockAddr} The public socket address.\n     */\n    getPublicSocket(): SockAddr {\n        // C++  const SockAddr& getPublicSocket()\n        return this._publicSocket;\n    }\n\n    /*@devdoc\n     *  Sets the public socket address.\n     *  @param {SockAddr} publicSocket - The public socket address.\n     */\n    setPublicSocket(publicSocket: SockAddr): void {\n        // C++  void setPublicSocket(const SockAddr& publicSocket)\n        if (!publicSocket.isEqualTo(this._publicSocket)) {\n            if (this.#_activeSocket === this._publicSocket) {\n                this.#_activeSocket = null;\n            }\n\n            const wasOldSocketNull = this._publicSocket.isNull();\n\n            const previousSocket = this._publicSocket;\n            this._publicSocket = publicSocket;\n            this._publicSocket.setObjectName(previousSocket.objectName());\n\n            if (!wasOldSocketNull) {\n                console.log(\"[networking] Public socket change for node\", this.#toString(),\n                    \"; previously\", previousSocket.toString());\n                this.socketUpdated.emit(previousSocket, this._publicSocket);\n            }\n        }\n    }\n\n    /*@devdoc\n     *  Gets the local socket address.\n     *  @returns {SockAddr} The local socket address.\n     */\n    getLocalSocket(): SockAddr {\n        // C++  const SockAddr& getLocalSocket()\n        return this._localSocket;\n    }\n\n    /*@devdoc\n     *  Sets the local socket address.\n     *  @param {SockAddr} localSocket - The local socket address.\n     */\n    setLocalSocket(localSocket: SockAddr): void {\n        // C++  void setLocalSocket(const SockAddr& localSocket)\n\n        if (!localSocket.isEqualTo(this._localSocket)) {\n            if (this.#_activeSocket === this._localSocket) {\n                // if the active socket was the local socket then reset it to NULL\n                this.#_activeSocket = null;\n            }\n\n            const wasOldSocketNull = this._localSocket.isNull();\n\n            const previousSocket = this._localSocket;\n            this._localSocket = localSocket;\n            this._localSocket.setObjectName(previousSocket.objectName());\n\n            if (!wasOldSocketNull) {\n                console.log(\"[networking] Local socket change for node\", this.#toString(),\n                    \"; previously\", previousSocket.toString());\n                this.socketUpdated.emit(previousSocket, this._localSocket);\n            }\n        }\n    }\n\n    /*@devdoc\n     *  Activates the node's local socket.\n     */\n    activateLocalSocket(): void {\n        // C++  void activateLocalSocket()\n        if (this.#_activeSocket !== this._localSocket) {\n            console.log(\"[networking] Activating local socket for network peer with ID\", this.#_uuid.stringify());\n            this.#setActiveSocket(this._localSocket);\n        }\n    }\n\n    /*@devdoc\n     *  Activates the node's public socket.\n     */\n    activatePublicSocket(): void {\n        // C++  void activatePublicSocket()\n        if (this.#_activeSocket !== this._publicSocket) {\n            console.log(\"[networking] Activating public socket for network peer with ID\", this.#_uuid.stringify());\n            this.#setActiveSocket(this._publicSocket);\n        }\n    }\n\n    /*@devdoc\n     *  Gets the currently active socket.\n     *  @returns {SockAddr|null} The currently active socket if one is active, <code>null</code> if none is active.\n     */\n    getActiveSocket(): SockAddr | null {\n        // C++  const SockAddr* getActiveSocket() const { return _activeSocket; }\n        return this.#_activeSocket;\n    }\n\n\n    /*@devdoc\n     *  Triggered when the node's public or local socket address is updated.\n     *  @function NetworkPeer.socketUpdated\n     *  @param {SockAddr} previousAddress - The previous address.\n     *  @param {SockAddr} currentAddress - The current address.\n     *  @returns {Signal}\n     */\n    get socketUpdated(): Signal {\n        // C++  void socketUpdated(SockAddr previousAddress, SockAddr currentAddress)\n        return this.#_socketUpdated;\n    }\n\n    /*@devdoc\n     *  Triggered when the public or local socket is activated, i.e., connection is established.\n     *  @function NetworkPeer.socketActivated\n     *  @param {SockAddr} sockAddr - The socket that has been activated.\n     *  @returns {Signal}\n     */\n    get socketActivated(): Signal {\n        // C++  void socketActivated(const SockAddr& sockAddr)\n        return this.#_socketActivated;\n    }\n\n\n    #setActiveSocket(discoveredSocket: SockAddr): void {\n        // C++  void NetworkPeer::setActiveSocket(SockAddr* discoveredSocket)\n        this.#_activeSocket = discoveredSocket;\n\n        // Ping timer N/A.\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this.socketActivated.emit(this.#_activeSocket);\n    }\n\n    #toString(): string {\n        // C++  QDebug operator<<(QDebug debug, const NetworkPeer &peer)\n        return this.getUUID().stringify()\n            + \" - public:\" + this._publicSocket.toString()\n            + \" - local:\" + this._localSocket.toString();\n    }\n\n}\n\nexport default NetworkPeer;\nexport type { LocalID };\n","//\n//  MessageData.ts\n//\n//  Created by David Rowe on 11 Jun 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport Node from \"./../networking/Node\";\nimport SockAddr from \"./../networking/SockAddr\";\nimport { PacketTypeValue } from \"./udt/PacketHeaders\";\n\n\n/*@devdoc\n *  The <code>MessageData</code> class collects together what would otherwise be private members used in {@link BasePacket},\n *  {@link Packet}, {@link NLPacket}, {@link Packets}, and {@link ReceivedMessage} classes.\n *  <p>TypeScript doesn't enable private members of a class to be accessed by \"friend\" classes. In particular,\n *  <code>ReceivedMessage</code> cannot access members of the packet classes. The solution adopted is to collect and expose the\n *  relevant private members in a <code>MessageData</code> object, which can be used by reference rather than copying the\n *  data.</p>\n *  <p>C++  N/A</p>\n *\n *  @class MessageData\n *  @param {MessageData} [other] - Another <code>MessageData</code> object to copy property values from.\n *\n *  @property <strong>BasePacket</strong>\n *  @property {Uint8Array} buffer - The raw packet or message data.\n *  @property {DataView} data - A DataView of the raw packet or message data.\n *      <em>Read-only.</em>\n *  @property {number} dataPosition - The current read/write position in processing the raw data. This is used to simplify the\n *      JavaScript instead of using <code>payloadStart</code>, <code>payloadCapacity</code>, and <code>payloadSize</code>.\n *  @property {number} packetSize - The size of the received packet.\n *  @property {SockAddr} senderSockAddr - The IP address and port of the sender.\n *  @property {number} receiveTime - The time stamp at which the packet or start of message was received.\n *\n *  @property <strong>Packet</strong>\n *  @property {boolean} isReliable - <code>true</code> if the packet is sent reliably, <code>false</code> if it isn't.\n *  @property {boolean} isPartOfMessage - <code>true</code> if the packet is part of a multi-packet message, <code>false</code>\n *      if it isn't.\n *  @property {Packet.ObfuscationLevel} obfuscationLevel=NoObfuscation - The level of obfuscation used in encoding the packet\n *      data.\n *  @property {number} sequenceNumber=0\n *  @property {number} messageNumber=0\n *  @property {Packet.PacketPosition} packetPosition=ONLY - The position of the packet in a multi-packet message.\n *  @property {number} messagePartNumber=0 - The order of the packet in a multi-packet message.\n *\n *  @property <strong>NLPacket</strong>\n *  @property {PacketType} type - The type of packet.\n *  @property {number} version - The version of the packet type.\n *  @property {number} sourceID - The local ID of the node that is the source of the packet if known (i.e., it is a sourced\n *      packet), {@link Node|Node.NULL_LOCAL_ID} if not known.\n *\n *  @property <strong>ReceivedMessage</strong>\n *  @property {DataView} headData - A DataView of the raw header data. This is an alias for <code>data</code>.\n *      <em>Read-only.</em>\n *  @property {PacketType} packetType - The type of packet. This is a copy of the <code>type</code> value.\n *  @property {number} numPackets=1 -  The number of packets used to form the message.\n *  @property {boolean} isComplete - <code>true</code> if the message is complete, <code>false</code> if it isn't.\n *  @property {number} firstPacketReceiveTime - The time stamp at which the first packet was received.\n */\nclass MessageData {\n    // Property values are added by BasePacket, Packet, NLPacket, and ReceivedMessage.\n\n    // C++  BasePacket\n    // buffer: See setter and getter.\n    // data: See getter.\n    dataPosition = 0;\n    packetSize = 0;\n    senderSockAddr: SockAddr | undefined = undefined;  // We can avoid creating this object now.\n    receiveTime = 0;\n\n    // C++  Packet\n    isReliable = false;\n    isPartOfMessage = false;\n    obfuscationLevel = 0;  // Packet.ObfuscationLevel.NoObfuscation;\n    sequenceNumber = 0;\n    messageNumber = 0;\n    packetPosition = 0;  // Packet.PacketPosition.ONLY;\n    messagePartNumber = 0;\n\n    // C++  NLPacket\n    type = PacketTypeValue.Unknown;\n    version = 0;\n    sourceID = Node.NULL_LOCAL_ID;\n\n    // C++  ReceivedMessage\n    // headData: See getter.\n    packetType: PacketTypeValue = 0;\n    numPackets = 1;\n    isComplete = false;\n    firstPacketReceiveTime = 0;\n\n\n    #_buffer = new Uint8Array(0);\n    #_data = new DataView(this.#_buffer.buffer);\n\n\n    constructor(other: MessageData | undefined = undefined) {\n        if (other) {\n            const properties = Object.keys(this);\n\n            // Primitive properties.\n            properties.forEach((property) => {\n                if (property !== \"data\" && property !== \"headData\" && property !== \"senderSockAddr\") {\n                    // eslint-disable-next-line\n                    // @ts-ignore\n                    this[property] = other[property];  // eslint-disable-line\n                }\n            });\n\n            // Object properties.\n            this.buffer = new Uint8Array(other.buffer.buffer);\n            if (other.senderSockAddr) {\n                this.senderSockAddr = new SockAddr();\n                this.senderSockAddr.setObjectName(other.senderSockAddr.objectName());\n                this.senderSockAddr.setAddress(other.senderSockAddr.getAddress());\n                this.senderSockAddr.setPort(other.senderSockAddr.getPort());\n            } else {\n                this.senderSockAddr = undefined;\n            }\n        }\n\n        // WEBRTC TODO: Seal other objects.\n        Object.seal(this);  // Prevent unintended use of invalid properties.\n    }\n\n\n    set buffer(buffer: Uint8Array) {\n        this.#_buffer = buffer;\n        this.#_data = new DataView(this.#_buffer.buffer);\n    }\n\n    get buffer(): Uint8Array {\n        return this.#_buffer;\n    }\n\n    get data(): DataView {\n        return this.#_data;\n    }\n\n    get headData(): DataView {\n        return this.#_data;\n    }\n\n}\n\nexport default MessageData;\n","//\n//  BasePacket.ts\n//\n//  Created by David Rowe on 9 Jun 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport UDT from \"./UDT\";\nimport MessageData from \"../MessageData\";\nimport SockAddr from \"../SockAddr\";\nimport assert from \"../../shared/assert\";\n\n\n/*@devdoc\n *  The <code>BasePacket</code> class implements the base data and information on a Vircadia protocol packet.\n *  <p>See also: {@link Packet} and {@link NLPacket}.\n *  <p>C++: <code>BasePacket: public ExtendedIODevice : public QIODevice</code>\n *  @class BasePacket\n *  @param {number|DataView|BasePacket} size|data|packet - The size of the packet to create, in bytes. If <code>-1</code>, a\n *      packet of the maximum size is created (though not all of it need be sent).\n *      <p>The raw byte data for a new packet.</p>\n *      <p>Another packet to reuse the packet data from. In this case, the packet's internal {@link MessageData} is reused by\n *      reference; it is not copied.</p>\n *  @param {unused|number|unused} unused|size|unused - Unused.\n *      <p>The size of the DataView in bytes.</p>\n *      <p>Unused.</p>\n *  @param {unused|SockAddr|unused} unused|senderSockAddr|unused - Unused.\n *      <p>The sender's IP address and port.</p>\n *      <p>Unused.</p>\n */\nclass BasePacket {\n    // C++  BasePacket: public ExtendedIODevice : public QIODevice\n\n    /*@devdoc\n     *  Gets the maximum size of a BasePacket's Vircadia protocol payload.\n     *  @function BasePacket.maxPayloadSize\n     *  @returns {number} The maximum Vircadia protocol payload size, in bytes.\n     */\n    static maxPayloadSize(): number {\n        // C++  int maxPayloadSize()\n        return UDT.MAX_PACKET_SIZE;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n    static #NUM_BYTES_HEADER = 4;  // Control bits and sequence number.\n\n    protected _messageData: MessageData;\n\n\n    constructor(param0: number | DataView | BasePacket,\n        param1: undefined | number | undefined = undefined,\n        param2: undefined | SockAddr | undefined = undefined) {\n\n        if (typeof param0 === \"number\") {\n            // C++  BasePacket(qint64 size)\n            let size = param0;\n\n            const maxPayload = BasePacket.maxPayloadSize();\n            if (size === -1) {\n                size = maxPayload;\n            }\n            assert(size >= 0 && size <= maxPayload, \"Invalid packet size!\", size);\n\n            this._messageData = new MessageData();\n            this._messageData.buffer = new Uint8Array(size);\n            this._messageData.dataPosition = 0;\n            this._messageData.packetSize = size;\n\n        } else if (param0 instanceof DataView && typeof param1 === \"number\" && param2 instanceof SockAddr) {\n            // C++  BasePacket(char[]* data, qint64 size, const SockAddr& senderSockAddr)\n            const data = param0;\n            const size = param1;\n            const senderSockAddr = param2;\n\n            this._messageData = new MessageData();\n            this._messageData.buffer = new Uint8Array(data.buffer);\n            this._messageData.dataPosition = 0;\n            this._messageData.packetSize = size;\n            this._messageData.senderSockAddr = senderSockAddr;\n            if (data.byteLength !== size) {\n                console.error(\"Invalid size parameter in BasePacket constructor!\", size);\n            }\n\n        } else if (param0 instanceof BasePacket) {\n            // C++  BasePacket(BasePacket&& other)\n            const other = param0;\n\n            this._messageData = new MessageData(other.getMessageData());\n            this._messageData.dataPosition = 0;\n\n        } else {\n            // Invalid call.\n            this._messageData = new MessageData();\n            console.error(\"Invalid parameters in BasePacket constructor!\", typeof param0, typeof param1, typeof param2);\n        }\n\n    }\n\n\n    /*@devdoc\n     *  Gets a reference to the {@link MessageData} object used to accumulate and share private packet- and message-related data\n     *  between the {@link BasePacket}, {@link Packet}, and {@link NLPacket} classes and the \"friend\" {@link ReceivedMessage}\n     *  class plus the packet writing and reading classes provided in {@link Packets}.\n     *  <p><strong>Warning:</strong> Do not use except in these friend classes.</p>\n     *  @returns {MessageData} Private packet- and message-related data.\n     */\n    getMessageData(): MessageData {\n        // C++  N/A\n        return this._messageData;\n    }\n\n    /*@devdoc\n     *  Gets the size of the packet including the header.\n     *  @returns {number} The size of the packet including the header, in bytes.\n     */\n    getDataSize(): number {\n        // C++  qint64 getDataSize()\n        return this._messageData.packetSize;\n    }\n\n    /*@devdoc\n     *  Sets the time that the packet was received.\n     *  @param {number} time - The time stamp at which the packet was received.\n     */\n    setReceiveTime(time: number): void {\n        // C++  void setReceiveTime(p_high_resolution_clock::time_point receiveTime)\n        this._messageData.receiveTime = time;\n    }\n\n    /*@devdoc\n     *  Gets the time that the packet was received.\n     *  @returns {number} The time stamp at which the packet was received.\n     */\n    getReceiveTime(): number {\n        // C++  time_point getReceiveTime()\n        return this._messageData.receiveTime;\n    }\n\n\n    protected adjustPayloadStartAndCapacity(headerSize: number): void {\n        // C++ void adjustPayloadStartAndCapacity(qint64 headerSize, bool shouldDecreasePayloadSize = false)\n\n        // We don't use C++'s _payloadStart or _payloadCapacity members. Instead, we just need to reserve space for the header,\n        // taking into account the base packet's header.\n        this._messageData.dataPosition = BasePacket.#NUM_BYTES_HEADER + headerSize;\n    }\n}\n\nexport default BasePacket;\n","//\n//  Packet.ts\n//\n//  Created by David Rowe on 9 Jun 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport BasePacket from \"./BasePacket\";\nimport UDT from \"./UDT\";\nimport SockAddr from \"../SockAddr\";\nimport assert from \"../../shared/assert\";\n\n\n/*@devdoc\n *  The <code>Packet</code> class implements a basic Vircadia protocol packet.\n *  <p>See also: {@link BasePacket} and {@link NLPacket}.\n *  <p>C++ <code>Packet : public BasePacket</code></p>\n *  @class Packet\n *  @extends BasePacket\n *  @param {number|DataView|Packet} size|data|packet - The size of the packet to create, in bytes.  If <code>-1</code>, a packet\n *      of the maximum size is created (though not all of it need be sent).\n *      <p>The raw byte data for a new packet.</p>\n *      <p>Another packet to reuse the packet data from. In this case, the packet's internal {@link MessageData} is reused by\n *      reference; it is not copied.</p>\n *  @param {boolean|number|unused} isReliable|size|unused - <code>true</code> if the packet is sent reliably, <code>false</code>\n *      if it isn't. <strong>Default Value:</strong> <code>false</code>\n *      <p>The size of the data in bytes.</p>\n *      <p>Unused.</p>\n *  @param {boolean|SockAddr|unused} isPartOfMessage|senderSockAddr|unused - <code>true</code> if the packet is part of a\n *      multi-packet message, <code>false</code> if it isn't. <strong>Default Value:</strong> <code>false</code>\n *      <p>The sender's IP address and port.</p>\n *      <p>Unused.</p>\n *\n *  @property {Packet.PacketPosition} PacketPosition - Packet position values.\n *      <em>Read-only.</em>\n *      <p><em>Static</em></p>\n *      @static\n *  @property {Packet.ObfuscationLevel} ObfuscationLevel - Obfuscation level values.\n *      <em>Read-only.</em>\n *      <p><em>Static</em></p>\n *      @static\n */\nclass Packet extends BasePacket {\n    // C++  Packet : public BasePacket\n\n    /*@devdoc\n     *  The position of the packet in a multi-packet message. Two-bit values suitable for use in bitwise packet operations.\n     *  <table>\n     *      <thead>\n     *          <tr><th>Name</th><th>Value</th><th>Description</th></tr>\n     *      </thead>\n     *      <tbody>\n     *          <tr><td>ONLY</td><td>0</td><td><code>00</code> - The only packet in the message.</td></tr>\n     *          <tr><td>FIRST</td><td>2</td><td><code>10</code> - The first packet in the message.</td></tr>\n     *          <tr><td>MIDDLE</td><td>3</td><td><code>11</code> - A middle packet in the message.</td></tr>\n     *          <tr><td>LAST</td><td>1</td><td><code>01</code> - The last packet in the message.</td></tr>\n     *      </tbody>\n     *  </table>\n     *  @typedef {number} Packet.PacketPosition\n     */\n    static readonly PacketPosition = {\n        // C++  enum PacketPosition : MessageNumberAndBitField\n        ONLY: 0x0,   // 00\n        FIRST: 0x2,  // 10\n        MIDDLE: 0x3, // 11\n        LAST: 0x1    // 01\n    };\n\n    /*@devdoc\n     *  The obfuscation level used in the packet. Two-bit values suitable for use in bitwise packet operations.\n     *  <table>\n     *      <thead>\n     *          <tr><th>Name</th><th>Value</th><th>Description</th></tr>\n     *      </thead>\n     *      <tbody>\n     *          <tr><td>NoObfuscation</td><td>0</td><td><code>00</code> - No obfuscation.</td></tr>\n     *          <tr><td>ObfuscationL1</td><td>1</td><td><code>01</code> - Obfuscation level 1.</td></tr>\n     *          <tr><td>ObfuscationL2</td><td>2</td><td><code>10</code> - Obfuscation level 2.</td></tr>\n     *          <tr><td>ObfuscationL3</td><td>3</td><td><code>11</code> - Obfuscation level 3.</td></tr>\n     *      </tbody>\n     *  </table>\n     *  @typedef {number} Packet.ObfuscationLevel\n     */\n    static readonly ObfuscationLevel = {\n        // C++  enum ObfuscationLevel : SequenceNumberAndBitField\n        NoObfuscation: 0x0, // 00\n        ObfuscationL1: 0x1, // 01\n        ObfuscationL2: 0x2, // 10\n        ObfuscationL3: 0x3  // 11\n    };\n\n\n    /*@devdoc\n     *  Creates a new Packet &mdash; an alternative to using <code>new Packet(...)</code>.\n     *  <p><em>Static</em></p>\n     *  @function Packet.fromReceivedPacket\n     *  @param {DataView} data - The raw byte data of a new packet.\n     *  @param {number} size - The size of that data in bytes.\n     *  @param {SockAddr} senderSockAddr - The sender's IP address and port.\n     *  @returns {Packet} A Packet created from the received data.\n     *  @static\n     */\n    static fromReceivedPacket(data: DataView, size: number, senderSockAddr: SockAddr): Packet {\n        // C++  Packet fromReceivedPacket(char[]* data, qint64 size, const SockAddr& senderSockAddr);\n        return new Packet(data, size, senderSockAddr);\n    }\n\n    /*@devdoc\n     *  Calculates the header size of a Packet.\n     *  <p><em>Static</em></p>\n     *  @function Packet.totalHeaderSize\n     *  @param {boolean} [isPartOfMessage=false] - <code>true</code> if the packet is part of a message, <code>false</code> if\n     *      it isn't.\n     *  @returns {number} The calculated total header size, in bytes.\n     *  @static\n     */\n    static totalHeaderSize(isPartOfMessage = false): number {\n        // C++  int totalHeaderSize(bool isPartOfMessage = false)\n        // The BasePacket header size is 0 so no need to calculate that. Thus we can just directly include the localHeaderSize()\n        // calculation.\n        const SEQUENCE_NUMBER_AND_BITS_BYTES = 4;\n        const MESSAGE_NUMBER_AND_PART_BYTES = 8;\n        return SEQUENCE_NUMBER_AND_BITS_BYTES + (isPartOfMessage ? MESSAGE_NUMBER_AND_PART_BYTES : 0);\n    }\n\n\n    constructor(\n        param0: number | DataView | Packet,\n        param1: boolean | number | undefined = undefined,\n        param2: boolean | SockAddr | undefined = undefined) {\n\n        if (typeof param0 === \"number\" && typeof param1 === \"boolean\" && typeof param2 === \"boolean\") {\n            // C++  Packet(qint64 size, bool isReliable = false, bool isPartOfMessage = false)\n            const size = param0;\n            const isReliable = param1;\n            const isPartOfMessage = param2;\n\n            super(size === -1 ? -1 : Packet.totalHeaderSize(isPartOfMessage) + size);\n            this._messageData.isReliable = isReliable;\n            this._messageData.isPartOfMessage = isPartOfMessage;\n            // adjustPayloadStartAndCapacity();  N/A\n            this.#writeHeader();\n\n        } else if (param0 instanceof DataView && typeof param1 === \"number\" && param2 instanceof SockAddr) {\n            // C++  Packet(std::unique_ptr<char[]> data, qint64 size, const SockAddr& senderSockAddr)\n            const data = param0;\n            const size = param1;\n            const senderSockAddr = param2;\n\n            super(data, size, senderSockAddr);\n            this.#readHeader();\n            // adjustPayloadStartAndCapacity();  N/A\n            if (this._messageData.obfuscationLevel !== Packet.ObfuscationLevel.NoObfuscation) {\n                console.warn(\"Packet() : Undo obfuscation : Not implemented!\");\n\n                // WEBRTC TODO: Address further C++ code.\n\n            }\n\n        } else if (param0 instanceof Packet) {\n            // C++  Packet(Packet&& other)\n            const packet = param0;\n\n            super(packet);\n            this._messageData.dataPosition = Packet.totalHeaderSize(this._messageData.isPartOfMessage);\n\n        } else {\n            console.error(\"Invalid parameters in Packet constructor!\", typeof param0, typeof param1, typeof param2);\n            super(0);\n        }\n    }\n\n\n    /*@devdoc\n     *  Gets whether the packet is part of a multi-packet message.\n     *  @returns {boolean} <code>true</code> if the packet is part of a multi-packet message, <code>false</code> if it isn't.\n     */\n    isPartOfMessage(): boolean {\n        // C++  bool isPartOfMessage()\n        return this._messageData.isPartOfMessage;\n    }\n\n    /*@devdoc\n     *  Gets whether the packet is sent reliably.\n     *  @returns {boolean} <code>true</code> if the packet is to sent reliably, <code>false</code> if it isn't.\n     */\n    isReliable(): boolean {\n        // C++  bool isPartOfMessage()\n        return this._messageData.isReliable;\n    }\n\n\n    // Reads the packet header information from the data.\n    #readHeader(): void {\n        // C++  void readHeader()\n        const seqNumBitField = this._messageData.data.getUint32(this._messageData.dataPosition, UDT.LITTLE_ENDIAN);\n        assert((seqNumBitField & UDT.CONTROL_BIT_MASK) === 0, \"Packet.readHeader()\", \"This should be a data packet!\");\n        this._messageData.isReliable = (seqNumBitField & UDT.RELIABILITY_BIT_MASK) > 0;\n        this._messageData.isPartOfMessage = (seqNumBitField & UDT.MESSAGE_BIT_MASK) > 0;\n        this._messageData.obfuscationLevel\n            = (seqNumBitField & UDT.OBFUSCATION_LEVEL_BIT_MASK) >> UDT.OBFUSCATION_LEVEL_OFFSET;\n        this._messageData.sequenceNumber = seqNumBitField & UDT.SEQUENCE_NUMBER_BIT_MASK;\n        this._messageData.dataPosition += 4;\n\n        if (this._messageData.isPartOfMessage) {\n            console.warn(\"Multi-packet messages not yet implemented!\");\n\n            // WEBRTC TODO: Address further C++ code.\n\n            this._messageData.dataPosition += 8;\n        } else {\n            this._messageData.messageNumber = 0;\n            this._messageData.packetPosition = Packet.PacketPosition.ONLY;\n            this._messageData.messagePartNumber = 0;\n        }\n    }\n\n    // Writes the packet header information to the data.\n    #writeHeader(): void {\n        // C++  void writeHeader()\n        let seqNumBitField = this._messageData.sequenceNumber;\n        if (this._messageData.isReliable) {\n            seqNumBitField |= UDT.RELIABILITY_BIT_MASK;\n        }\n        if (this._messageData.isPartOfMessage) {\n            seqNumBitField |= UDT.MESSAGE_BIT_MASK;\n        }\n        if (this._messageData.obfuscationLevel !== Packet.ObfuscationLevel.NoObfuscation) {\n            seqNumBitField |= this._messageData.obfuscationLevel << UDT.OBFUSCATION_LEVEL_OFFSET;\n        }\n        this._messageData.data.setUint32(this._messageData.dataPosition, seqNumBitField, UDT.LITTLE_ENDIAN);\n        this._messageData.dataPosition += 4;\n\n        if (this._messageData.isPartOfMessage) {\n            let messageNumberAndBitField = this._messageData.messageNumber;\n            messageNumberAndBitField |= this._messageData.packetPosition << UDT.PACKET_POSITION_OFFSET;\n            this._messageData.data.setUint32(this._messageData.dataPosition, messageNumberAndBitField, UDT.LITTLE_ENDIAN);\n            this._messageData.dataPosition += 4;\n\n            this._messageData.data.setUint32(this._messageData.dataPosition, this._messageData.messagePartNumber,\n                UDT.LITTLE_ENDIAN);\n            this._messageData.dataPosition += 4;\n        }\n    }\n\n}\n\nexport default Packet;\n","//\n//  NLPacket.ts\n//\n//  Created by David Rowe on 8 Jun 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport HMACAuth from \"./HMACAuth\";\nimport Packet from \"./udt/Packet\";\nimport PacketType, { PacketTypeValue } from \"./udt/PacketHeaders\";\nimport UDT from \"./udt/UDT\";\nimport { LocalID } from \"../networking/NetworkPeer\";\nimport Node from \"../networking/Node\";\nimport assert from \"../shared/assert\";\n\n\n/*@devdoc\n *  The <code>NLPacket</code> class implements a \"node list\" Vircadia protocol packet. Contains payload data, unlike a basic\n *  {@link Packet}.\n *  <p>See also: {@link BasePacket} and {@link Packet}.\n *  <p>C++ <code>NLPacket : public Packet</code></p>\n *  @class NLPacket\n *  @extends Packet\n *  @param {PacketType|Packet} type|packet - The type of NLPacket to create.\n *      <p>A base Packet to create the NLPacket from.</p>\n *      <p>Note: The {@link MessageData} from the base packet is reused in-place, not copied.</p>\n *  @param {number|unused} size - The size of the packet in bytes. If <code>-1</code>, a packet of the maximum size is created\n *      (though not all of it need be sent). <strong>Default Value:</strong> <code>-1</code>\n *      <p>Unused.</p>\n *  @param {boolean|unused} isReliable - <code>true</code> if the packet is to be sent reliably, <code>false</code> if it isn't.\n *      <strong>Default Value:</strong> <code>false</code\n *      <p>Unused.</p>\n *  @param {boolean|unused} isPartOfMessage - <code>true</code> if the packet is part of a message, <code>false</code> if it\n *      isn't. <strong>Default Value:</strong> <code>false</code>\n *      <p>Unused.</p>\n *  @param {PacketVersion|unused} version - The version of the NLPacket to create. <strong>Default Value:</strong>\n *      <code>0</code>\n *      <p>Unused.</p>\n */\nclass NLPacket extends Packet {\n    // C++  NLPacket : public Packet\n\n    /*@devdoc\n     *  Creates a new NLPacket &mdash; an alternative to using <code>new NLPacket(...)</code>.\n     *  <p><em>Static</em></p>\n     *  @static\n     *  @param {PacketType} type - The type of packet to create.\n     *  @param {number} [size=-1] - The size of the packet to create, in bytes. If <code>-1</code> the packet isn't created at a\n     *      fixed size.\n     *  @param {boolean} [isReliable=false] - <code>true</code> if the packet is to be sent reliably, <code>false</code> if it\n     *      isn't.\n     *  @param {boolean} [isPartOfMessage=false] - <code>true</code> if the packet is part of a multi-packet message,\n     *      <code>false</code> if it isn't.\n     *  @param {PacketVersion} [version=0] - The version of the packet type.\n     *  @returns {NLPacket} A new NLPacket.\n     */\n    static create(type: PacketTypeValue, size = -1, isReliable = false, isPartOfMessage = false, version = 0): NLPacket {\n        // C++  NLPacket* create(PacketType type, qint64 size = -1, bool isReliable = false, bool isPartOfMessage = false,\n        //                       PacketVersion version = 0);\n        return new NLPacket(type, size, isReliable, isPartOfMessage, version);\n    }\n\n    /*@devdoc\n     *  Creates a new NLPacket from a base {@link Packet}.\n     *  <p>Note: The {@link MessageData} from the original packet is reused in-place, not copied.</p>\n     *  <p><em>Static</em></p>\n     *  @static\n     *  @param {Packet} packet - The base packet to create the NLPacket from.\n     */\n    static fromBase(packet: Packet): NLPacket {\n        // C++  NLPacket* fromBase(Packet* packet)\n        return new NLPacket(packet);\n    }\n\n\n    static readonly #NUM_BYTES_PACKET_TYPE = 1;\n    static readonly #NUM_BYTES_PACKET_VERSION = 1;\n    static readonly #NUM_BYTES_LOCALID = 2;\n    static readonly #NUM_BYTES_MD5_HASH = 16;\n\n    static #localHeaderSize(type: PacketTypeValue): number {\n        // C++  int localHeaderSize(PacketType type)\n        const nonSourced = PacketType.getNonSourcedPackets().has(type);\n        const nonVerified = PacketType.getNonVerifiedPackets().has(type);\n        const optionalSize = (nonSourced ? 0 : NLPacket.#NUM_BYTES_LOCALID)\n            + (nonSourced || nonVerified ? 0 : NLPacket.#NUM_BYTES_MD5_HASH);\n        return 2 + optionalSize;  // C++: sizeof(PacketType) + sizeof(PacketVersion) + optionalSize\n    }\n\n    static #hashForPacketAndHMAC(packet: Packet, hash: HMACAuth): Uint8Array {\n        // C++  QByteArray hashForPacketAndHMAC(const udt::Packet& packet, HMACAuth& hash)\n        const offset = Packet.totalHeaderSize(packet.isPartOfMessage()) + NLPacket.#NUM_BYTES_PACKET_TYPE\n            + NLPacket.#NUM_BYTES_PACKET_VERSION + NLPacket.#NUM_BYTES_LOCALID + NLPacket.#NUM_BYTES_MD5_HASH;\n        const hashResult = new Uint8Array(NLPacket.#NUM_BYTES_MD5_HASH);\n        hash.calculateHash(hashResult, packet.getMessageData().buffer, offset, packet.getDataSize() - offset);\n        return hashResult;\n    }\n\n\n    constructor(\n        param0: number | Packet,\n        param1: number | undefined = undefined,\n        param2: boolean | undefined = undefined,\n        param3: boolean | undefined = undefined,\n        param4: number | undefined = undefined) {\n\n        if (typeof param0 === \"number\") {\n            // C++  NLPacket(PacketType type, qint64 size = -1, bool isReliable = false, bool isPartOfMessage = false,\n            //               PacketVersion version = 0)\n            const type = param0;\n            const size = param1 ? param1 : -1;\n            const isReliable = param2 ? param2 : false;\n            const isPartOfMessage = param3 ? param3 : false;\n            const version = param4 ? param4 : 0;\n\n            super(size === -1 ? -1 : NLPacket.#localHeaderSize(type) + size, isReliable, isPartOfMessage);\n            this._messageData.type = type;\n            this._messageData.version = version === 0 ? PacketType.versionForPacketType(type) : version;\n            this.adjustPayloadStartAndCapacity(NLPacket.#localHeaderSize(type));\n            this.#writeTypeAndVersion();\n\n        } else if (param0 instanceof Packet) {\n            // C++  NLPacket(Packet&& packet)\n            const packet = param0;\n\n            super(packet);\n            this.#readType();\n            this.#readVersion();\n            this.#readSourceID();\n            this.adjustPayloadStartAndCapacity(NLPacket.#localHeaderSize(this._messageData.type));\n\n        } else {\n            console.error(\"Invalid parameters in Packet constructor!\", typeof param0, typeof param1, typeof param2,\n                typeof param3, typeof param4);\n            super(0, false, false);\n        }\n    }\n\n\n    /*@devdoc\n     *  Gets the type of the packet.\n     *  @returns {PacketType} The type of the packet.\n     */\n    getType(): PacketTypeValue {\n        // C++  PacketType getType()\n        return this._messageData.type;\n    }\n\n    /*@devdoc\n     *  Gets the version of the packet.\n     *  @returns {PacketVersion} The version of the packet.\n     */\n    getVersion(): number {\n        // C++  PacketVersion getVersion()\n        return this._messageData.version;\n    }\n\n    /*@devdoc\n     *  Gets the ID of the node that is the source of the packet.\n     *  @returns {number} The source ID of the packet.\n     */\n    getSourceID(): number {\n        // C++  LocalID getSourceID()\n        return this._messageData.sourceID;\n    }\n\n    /*@devdoc\n     *  Writes a source ID directly into the packet without using or advancing the current write position.\n     *  @param {LocalID} sourceID - The source ID.\n     */\n    writeSourceID(sourceID: LocalID): void {\n        // C++  void writeSourceID(LocalID sourceID)\n        assert(!PacketType.getNonSourcedPackets().has(this._messageData.type));\n        const offset = Packet.totalHeaderSize(this.isPartOfMessage()) + 2;\n        this._messageData.data.setUint16(offset, sourceID, UDT.LITTLE_ENDIAN);  // Yes, different endian-ness from reading!\n        this._messageData.sourceID = sourceID;\n    }\n\n    /*@devdoc\n     *  Calculates the message authentication hash and writes it into the packet header.\n     *  @param {HMACAuth} hmacAuth - The message authentication object to use for calculating the hash.\n     */\n    writeVerificationHash(hmacAuth: HMACAuth): void {\n        // C++  void writeVerificationHash(HMACAuth & hmacAuth)\n        assert(!PacketType.getNonSourcedPackets().has(this._messageData.type)\n            && !PacketType.getNonVerifiedPackets().has(this._messageData.type));\n\n        const offset = Packet.totalHeaderSize(this.isPartOfMessage()) + NLPacket.#NUM_BYTES_PACKET_TYPE\n            + NLPacket.#NUM_BYTES_PACKET_VERSION + NLPacket.#NUM_BYTES_LOCALID;\n\n        const verificationHash = NLPacket.#hashForPacketAndHMAC(this, hmacAuth);\n        this._messageData.buffer.set(verificationHash, offset);\n    }\n\n\n    #readType(): void {\n        // C++  void readType()\n        const messageData = this._messageData;\n        this._messageData.type = messageData.data.getUint8(messageData.dataPosition);\n        messageData.dataPosition += 1;\n    }\n\n    #readVersion(): void {\n        // C++  void readVersion()\n        const messageData = this._messageData;\n        messageData.version = messageData.data.getUint8(messageData.dataPosition);\n        messageData.dataPosition += 1;\n    }\n\n    #readSourceID(): void {\n        // C++  void readSourceID()\n        const messageData = this._messageData;\n        if (PacketType.getNonSourcedPackets().has(messageData.type)) {\n            messageData.sourceID = Node.NULL_LOCAL_ID;\n        } else {\n            messageData.sourceID = messageData.data.getUint16(messageData.dataPosition, UDT.LITTLE_ENDIAN);\n            messageData.dataPosition += 2;\n        }\n    }\n\n    #writeTypeAndVersion(): void {\n        // C++  void writeTypeAndVersion()\n        const messageData = this._messageData;\n        const headerOffset = Packet.totalHeaderSize(messageData.isPartOfMessage);\n        messageData.data.setUint8(headerOffset, messageData.type);\n        messageData.data.setUint8(headerOffset + 1, messageData.version);\n    }\n\n}\n\nexport default NLPacket;\n","//\n//  PingReply.ts\n//\n//  Created by David Rowe on 7 Sep 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport PacketType from \"../udt/PacketHeaders\";\nimport UDT from \"../udt/UDT\";\nimport NLPacket from \"../NLPacket\";\n\n\ntype PingReplyDetails = {\n    pingType: number,\n    timestampPing: bigint,\n    timestampReply: bigint\n};\n\n\nconst PingReply = new class {\n    // C++  N/A\n\n    /*@devdoc\n     *  Information needed for {@link PacketScribe|writing} a {@link PacketType(1)|PingReply} packet.\n     *  @typedef {object} PacketScribe.PingReplyDetails\n     *  @property {PingType} pingType - The type of ping.\n     *  @property {bigint} timestampPing - The time at which the originating ping packet was created, in usec.\n     *  @property {bigint} timestampReply - The time at which the ping reply packet was created, in usec.\n     */\n\n\n    /*@devdoc\n     *  Writes a {@link PacketType(1)|PingReply} packet, ready for sending.\n     *  @function PacketScribe.PingReply&period;write\n     *  @param {PacketScribe.PingReplyDetails} info - The information needed for writing the packet.\n     *  @returns {NLPacket}\n     */\n    write(info: PingReplyDetails): NLPacket {  /* eslint-disable-line class-methods-use-this */\n        // C++  NLPacket* LimitedNodeList::constructPingReplyPacket(ReceivedMessage& message)\n\n        const packet = NLPacket.create(PacketType.PingReply);\n        const messageData = packet.getMessageData();\n        const data = messageData.data;\n        let dataPosition = messageData.dataPosition;\n\n        /* eslint-disable @typescript-eslint/no-magic-numbers */\n\n        data.setUint8(dataPosition, info.pingType);\n        dataPosition += 1;\n        data.setBigUint64(dataPosition, info.timestampPing, UDT.BIG_ENDIAN);\n        dataPosition += 8;\n        data.setBigUint64(dataPosition, info.timestampReply, UDT.BIG_ENDIAN);\n        dataPosition += 8;\n\n        /* eslint-enable @typescript-eslint/no-magic-numbers */\n\n        messageData.dataPosition = dataPosition;\n        messageData.packetSize = dataPosition;\n\n        return packet;\n\n    }\n\n}();\n\nexport default PingReply;\nexport type { PingReplyDetails };\n","//\n//  AudioConstants.ts\n//\n//  Created by David Rowe on 11 Sep 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\n/*@devdoc\n *  The <code>AudioConstants</code> namespace provides the values of audio constants used in the SDK.\n *  <p>C++: <code>AudioConstants</code></p>\n *\n *  @namespace AudioConstants\n *\n *  @property {number} SAMPLE_RATE - <code>24000</code> - The audio sample rate, in Hz.\n *\n *  @property {number} STEREO - <code>2</code> - The number of audio channels for stereo.\n *\n *  @property {number} NETWORK_FRAME_SAMPLES_STEREO - <code>480</code> - The number of samples in a network packet for a stereo\n *      channel.\n *  @property {number} NETWORK_FRAME_SAMPLES_PER_CHANNEL - <code>240</code> - The number of samples in a network packet per\n *      channel.\n *\n *  @property {number} NETWORK_FRAME_SECS - <code>0.01</code> - The interval between audio network packets, in seconds.\n *  @property {number} NETWORK_FRAME_MSECS - <code>10</code> - The interval between audio network packets, in milliseconds.\n */\nconst AudioConstants = new class {\n    // C++  AudioConstants\n\n    /* eslint-disable @typescript-eslint/no-magic-numbers */\n\n    readonly SAMPLE_RATE = 24000;\n\n    readonly STEREO = 2;\n\n    readonly NETWORK_FRAME_SAMPLES_STEREO = 480;\n    readonly NETWORK_FRAME_SAMPLES_PER_CHANNEL = 240;\n\n    readonly NETWORK_FRAME_SECS = this.NETWORK_FRAME_SAMPLES_PER_CHANNEL / this.SAMPLE_RATE;\n    readonly NETWORK_FRAME_MSECS = this.NETWORK_FRAME_SECS * 1000;\n\n}();\n\nexport { AudioConstants as default };\n","//\n//  PacketScribe.ts\n//\n//  Created by David Rowe on 13 Jun 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\n// In packet number order.\nimport DomainList from \"./DomainList\";\nimport Ping from \"./Ping\";\nimport PingReply from \"./PingReply\";\nimport MixedAudio from \"./MixedAudio\";\nimport MicrophoneAudioNoEcho from \"./MicrophoneAudioNoEcho\";\nimport SilentAudioFrame from \"./SilentAudioFrame\";\nimport DomainListRequest from \"./DomainListRequest\";\nimport DomainConnectionDenied from \"./DomainConnectionDenied\";\nimport DomainConnectRequest from \"./DomainConnectRequest\";\nimport DomainDisconnectRequest from \"./DomainDisconnectRequest\";\nimport DomainServerRemovedNode from \"./DomainServerRemovedNode\";\nimport NegotiateAudioFormat from \"./NegotiateAudioFormat\";\nimport SelectedAudioFormat from \"./SelectedAudioFormat\";\n\n\n/*@devdoc\n *  The <code>PacketScribe</code> namespace provides packet reading and writing functions.\n *  <p>C++: N/A</p>\n *  @namespace PacketScribe\n *  @property {function} DomainList.read -\n *      {@link PacketScribe.DomainList&period;read|DomainList&period;read}\n *  @property {function} Ping.read -\n *      {@link PacketScribe.Ping&period;read|Ping&period;read}\n *  @property {function} PingReply.write -\n *      {@link PacketScribe.PingReply&period;write|PingReply&period;write}\n *  @property {function} MixedAudio.read -\n *      {@link PacketScribe.MixedAudio&period;read|MixedAudio&period;read}\n *  @property {function} MicrophoneAudioNoEcho.write -\n *      {@link PacketScribe.MicrophoneAudioNoEcho&period;write|MixedAudio&period;write}\n *  @property {function} SilentAudioFrame.read -\n *      {@link PacketScribe.SilentAudioFrame&period;read|SilentAudioFrame&period;read}\n *  @property {function} SilentAudioFrame.write -\n *      {@link PacketScribe.SilentAudioFrame&period;write|SilentAudioFrame&period;write}\n *  @property {function} DomainListRequest.write -\n *      {@link PacketScribe.DomainListRequest&period;write|DomainListRequest&period;write}\n *  @property {function} DomainConnectionDenied.read -\n *      {@link PacketScribe.DomainConnectionDenied&period;read|DomainConnectionDenied&period;read}\n *  @property {function} DomainConnectRequest.write -\n *      {@link PacketScribe.DomainConnectRequest&period;write|DomainConnectRequest&period;write}\n *  @property {function} DomainDisconnectRequest.write -\n *      {@link PacketScribe.DomainDisconnectRequest&period;write|DomainDisconnectRequest&period;write}\n *  @property {function} DomainServerRemovedNode.read -\n *      {@link PacketScribe.DomainServerRemovedNode&period;read|DomainServerRemovedNode&period;read}\n *  @property {function} NegotiateAudioFormat.write -\n *      {@link PacketScribe.NegotiateAudioFormat&period;write|NegotiateAudioFormat&period;write}\n *  @property {function} SelectedAudioFormat.read -\n *      {@link PacketScribe.SelectedAudioFormat&period;read|SelectedAudioFormat&period;read}\n */\n\n// WEBRTC TODO: Implement similar in C++ to collect all packet reading/writing into the networking library code (and revise this\n// namespace's description accordingly).\n\n// WEBRTC TODO: Add further packets to the Packets namespace as they are implemented.\n\nconst PacketScribe = {\n    // In packet number order.\n    DomainList,\n    Ping,\n    PingReply,\n    MixedAudio,\n    MicrophoneAudioNoEcho,\n    SilentAudioFrame,\n    DomainListRequest,\n    DomainConnectionDenied,\n    DomainConnectRequest,\n    DomainDisconnectRequest,\n    DomainServerRemovedNode,\n    NegotiateAudioFormat,\n    SelectedAudioFormat\n};\n\nexport default PacketScribe;\n","//\n//  MixedAudio.ts\n//\n//  Created by David Rowe on 14 Sep 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport UDT from \"../udt/UDT\";\nimport AudioConstants from \"../../audio/AudioConstants\";\nimport assert from \"../../shared/assert\";\n\n\ntype MixedAudioDetails = {\n    sequenceNumber: number,\n    codecName: string,\n    numAudioSamples: number,\n    audioBuffer: DataView\n};\n\n\nconst MixedAudio = new class {\n    // C++  N/A\n\n    /*@devdoc\n     *  Information returned by {@link PacketScribe|reading} a {@link PacketType(1)|MixedAudio} packet.\n     *  @typedef {object} PacketScribe.MixedAudioDetails\n     *  @property {number} sequenceNumber - The sequence number of the audio packet. It starts at <code>0</code> for each\n     *      connection to the audio mixer, incrementing each time an audio packet is sent. The value wraps around to\n     *      <code>0</code> after <code>65535</code>.</p>\n     *      <p>The sequence number for the audio mixer sending audio packets to the user client is shared among the following\n     *      packets: <code>MixedAudio</code> and <code>SilentAudioFrame</code>.\n     *  @property {string} codecName - The name of the audio codec used, e.g., <code>\"opus\"</code>.\n     *  @property {number} numAudioSamples - The number of audio samples in the packet. This number is always <code>240</code>\n     *      and the samples are always stereo.\n     *  @property {DataView} audioBuffer - The encoded audio data comprising the samples per the {@link AudioConstants},\n     *      i.e., 240 frames being 10ms of audio data. The number of bytes depends on the codec used &mdash; 960 bytes for PCM\n     *      (240 frames, each a stereo pair of 2-byte samples), significantly fewer bytes for other codecs.\n     */\n\n    /*@devdoc\n     *  Reads a {@link PacketType(1)|MixedAudio} packet.\n     *  @function PacketScribe.MixedAudio&period;read\n     *  @param {DataView} data - The {@link Packets|MixedAudio} message data to read.\n     *  @returns {PacketScribe.MixedAudioDetails} The mixed audio information.\n     */\n    read(data: DataView): MixedAudioDetails {  /* eslint-disable-line class-methods-use-this */\n        // C++  int InboundAudioStream::parseData(ReceivedMessage& message)\n\n        /* eslint-disable @typescript-eslint/no-magic-numbers */\n\n        const textDecoder = new TextDecoder();\n\n        let dataPosition = 0;\n\n        const sequenceNumber = data.getUint16(dataPosition, UDT.LITTLE_ENDIAN);\n        dataPosition += 2;\n\n        const codecNameSize = data.getUint32(dataPosition, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n        const codecName = textDecoder.decode(new Uint8Array(data.buffer, data.byteOffset + dataPosition, codecNameSize));\n        dataPosition += codecNameSize;\n\n        const numAudioSamples = AudioConstants.NETWORK_FRAME_SAMPLES_PER_CHANNEL;\n\n        // A DataView is used in order to defer how to use the buffer contents per the codec used, i.e., avoid unnecessary\n        // copying of the buffer data.\n        const audioBuffer = new DataView(data.buffer, data.byteOffset + dataPosition);\n        dataPosition += audioBuffer.byteLength;\n\n        /* eslint-ENable @typescript-eslint/no-magic-numbers */\n\n        assert(dataPosition === data.byteLength);\n\n        return {\n            sequenceNumber,\n            codecName,\n            numAudioSamples,\n            audioBuffer\n        };\n\n    }\n\n}();\n\nexport default MixedAudio;\nexport type { MixedAudioDetails };\n","//\n//  MicrophoneAudioNoEcho.ts\n//\n//  Created by David Rowe on 26 Sep 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport PacketType from \"../udt/PacketHeaders\";\nimport UDT from \"../udt/UDT\";\nimport NLPacket from \"../NLPacket\";\nimport assert from \"../../shared/assert\";\nimport { vec3 } from \"../../shared/Vec3\";\nimport { quat } from \"../../shared/Quat\";\n\n\ntype MicrophoneAudioNoEchoDetails = {\n    sequenceNumber: number,\n    codecName: string,\n    isStereo: boolean,\n    audioPosition?: vec3,\n    audioOrientation?: quat,\n    avatarBoundingBoxCorner?: vec3,\n    avatarBoundingBoxScale?: vec3,\n    audioBuffer: Uint8Array\n};\n\n\nconst MicrophoneAudioNoEcho = new class {\n    // C++  N/A\n\n    /*@devdoc\n     *  Information needed for {@link PacketScribe|writing} a {@link PacketType(1)|MicrophoneAudioNoEcho} packet.\n     *  @typedef {object} PacketScribe.MicrophoneAudioNoEchoDetails\n     *  @property {number} sequenceNumber - The sequence number of the audio packet. It starts at <code>0</code> for each\n     *      connection to the audio mixer, incrementing each time an audio packet is sent. The value wraps around to\n     *      <code>0</code> after <code>65535</code>.</p>\n     *      <p>The sequence number for the client sending audio packets to the audio mixer is shared among the following\n     *      packets: <code>MicrophoneAudioWithEcho</code>, <code>MicrophoneAudioNoEcho</code>, and\n     *      <code>SilentAudioFrame</code>.\n     *      The sequence number for the audio mixer sending audio packets to the user client is shared among the following\n     *      packets: <code>MixedAudio</code> and <code>MicrophoneAudioNoEcho</code>.\n     *  @property {string} codecName - The name of the audio codec used, e.g., <code>\"opus\"</code>.\n     *  @property {boolean} isStereo - <code>true</code> if the audio data is stereo, <code>false</code> if mono.\n     *  @property {vec3} [audioPosition] - The position of the audio source in the domain. The user client sends this to the\n     *      audio mixer.\n     *  @property {quat} [audioOrientation] - The orientation of the audio source in the domain. The user client sends this to\n     *      the audio mixer.\n     *  @property {vec3} [avatarBoundingBoxCorner] - The position of the minimum-xyz corner of the axis-aligned bounding box\n     *      containing the user's avatar. The user client sends this to the audio mixer.\n     *  @property {vec3} [avatarBoundingBoxScale] - The size of the axis-aligned bounding box containing the user's avatar. The\n     *      user client sends this to the audio mixer.\n     *  @property {Uint8Array} audioBuffer - The encoded audio data comprising the samples per the {@link AudioConstants},\n     *      i.e., 240 frames being 10ms of audio data. The number of bytes depends on the number of channels and the codec used\n     *      &mdash; e.g., 960 bytes for PCM stereo (240 frames, each a stereo pair of 2-byte samples), significantly fewer bytes\n     *      for other codecs.\n     */\n\n\n    /*@devdoc\n     *  Writes a {@link PacketType(1)|MicrophoneAudioNoEcho} packet, ready for sending.\n     *  @function PacketScribe.MicrophoneAudioNoEcho&period;write\n     *  @param {PacketScribe.MicrophoneAudioNoEchoDetails} info - The information needed for writing the packet.\n     *  @returns {NLPacket}\n     */\n    write(info: MicrophoneAudioNoEchoDetails): NLPacket {  /* eslint-disable-line class-methods-use-this */\n        // C++  void AbstractAudioInterface::emitAudioPacket(const void* audioData, size_t bytes, quint16& sequenceNumber,\n        //      bool isStereo, const Transform& transform, glm::vec3 avatarBoundingBoxCorner, glm:: vec3 avatarBoundingBoxScale,\n        //      PacketType packetType, QString codecName)\n\n        const packet = NLPacket.create(PacketType.MicrophoneAudioNoEcho);\n        const messageData = packet.getMessageData();\n        const data = messageData.data;\n        let dataPosition = messageData.dataPosition;\n\n        /* eslint-disable @typescript-eslint/no-magic-numbers */\n\n        data.setUint16(dataPosition, info.sequenceNumber, UDT.LITTLE_ENDIAN);\n        dataPosition += 2;\n\n        const codecName = info.codecName;\n        data.setUint32(dataPosition, codecName.length, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n        for (let i = 0, length = codecName.length; i < length; i++) {\n            data.setUint8(dataPosition, codecName.charCodeAt(i));\n            dataPosition += 1;\n        }\n\n        data.setUint8(dataPosition, info.isStereo ? 1 : 0);\n        dataPosition += 1;\n\n        assert(info.audioPosition !== undefined && info.audioOrientation !== undefined\n            && info.avatarBoundingBoxCorner !== undefined && info.avatarBoundingBoxScale !== undefined);\n\n        data.setFloat32(dataPosition, info.audioPosition.x, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n        data.setFloat32(dataPosition, info.audioPosition.y, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n        data.setFloat32(dataPosition, info.audioPosition.z, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n\n        data.setFloat32(dataPosition, info.audioOrientation.x, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n        data.setFloat32(dataPosition, info.audioOrientation.y, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n        data.setFloat32(dataPosition, info.audioOrientation.z, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n        data.setFloat32(dataPosition, info.audioOrientation.w, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n\n        data.setFloat32(dataPosition, info.avatarBoundingBoxCorner.x, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n        data.setFloat32(dataPosition, info.avatarBoundingBoxCorner.y, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n        data.setFloat32(dataPosition, info.avatarBoundingBoxCorner.z, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n\n        data.setFloat32(dataPosition, info.avatarBoundingBoxScale.x, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n        data.setFloat32(dataPosition, info.avatarBoundingBoxScale.y, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n        data.setFloat32(dataPosition, info.avatarBoundingBoxScale.z, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n\n        const dataArray = new Uint8Array(data.buffer);\n        dataArray.set(info.audioBuffer, dataPosition);\n        dataPosition += info.audioBuffer.byteLength;\n\n        /* eslint-enable @typescript-eslint/no-magic-numbers */\n\n        messageData.dataPosition = dataPosition;\n        messageData.packetSize = dataPosition;\n\n        return packet;\n    }\n\n}();\n\nexport default MicrophoneAudioNoEcho;\nexport type { MicrophoneAudioNoEchoDetails };\n","//\n//  SilentAudioFrame.ts\n//\n//  Created by David Rowe on 11 Sep 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport PacketType from \"../udt/PacketHeaders\";\nimport UDT from \"../udt/UDT\";\nimport NLPacket from \"../NLPacket\";\nimport assert from \"../../shared/assert\";\nimport { vec3 } from \"../../shared/Vec3\";\nimport { quat } from \"../../shared/Quat\";\n\n\ntype SilentAudioFrameDetails = {\n    sequenceNumber: number,\n    codecName: string,\n    numSilentSamples: number,\n    audioPosition?: vec3,\n    audioOrientation?: quat,\n    avatarBoundingBoxCorner?: vec3,\n    avatarBoundingBoxScale?: vec3\n};\n\n\nconst SilentAudioFrame = new class {\n    // C++  N/A\n\n    /*@devdoc\n     *  Information needed for {@link PacketScribe|writing} or returned by {@link PacketScribe|reading} a\n     *  {@link PacketType(1)|SilentAudioFrame} packet.\n     *  @typedef {object} PacketScribe.SilentAudioFrameDetails\n     *  @property {number} sequenceNumber - The sequence number of the audio packet. It starts at <code>0</code> for each\n     *      connection to the audio mixer, incrementing each time an audio packet is sent. The value wraps around to\n     *      <code>0</code> after <code>65535</code>.</p>\n     *      <p>The sequence number for the client sending audio packets to the audio mixer is shared among the following\n     *      packets: <code>MicrophoneAudioWithEcho</code>, <code>MicrophoneAudioNoEcho</code>, and\n     *      <code>SilentAudioFrame</code>.\n     *      The sequence number for the audio mixer sending audio packets to the user client is shared among the following\n     *      packets: <code>MixedAudio</code> and <code>SilentAudioFrame</code>.\n     *  @property {string} codecName - The name of the audio codec used, e.g., <code>\"opus\"</code>.\n     *  @property {number} numSilentSamples - The number of silent samples the packet represents. <code>480</code> for stereo,\n     *      <code>240</code> for mono.\n     *  @property {vec3} [audioPosition] - The position of the audio source in the domain. The user client sends this to the\n     *      audio mixer.\n     *  @property {quat} [audioOrientation] - The orientation of the audio source in the domain. The user client sends this to\n     *      the audio mixer.\n     *  @property {vec3} [avatarBoundingBoxCorner] - The position of the minimum-xyz corner of the axis-aligned bounding box\n     *      containing the user's avatar. The user client sends this to the audio mixer.\n     *  @property {vec3} [avatarBoundingBoxScale] - The size of the axis-aligned bounding box containing the user's avatar. The\n     *      user client sends this to the audio mixer.\n     */\n\n\n    /*@devdoc\n     *  Reads a {@link PacketType(1)|SilentAudioFrame} packet.\n     *  @function PacketScribe.SilentAudioFrame&period;read\n     *  @param {DataView} data - The {@link Packets|SilentAudioFrame} message data to read.\n     *  @returns {PacketScribe.SilentAudioFrameDetails} The silent audio frame information.\n     */\n    read(data: DataView): SilentAudioFrameDetails {  /* eslint-disable-line class-methods-use-this */\n        // C++  int InboundAudioStream::parseData(ReceivedMessage& message)\n        //      void AudioMixerSlave::sendSilentPacket(const SharedNodePointer& node, AudioMixerClientData& data)\n\n        /* eslint-disable @typescript-eslint/no-magic-numbers */\n\n        const textDecoder = new TextDecoder();\n\n        let dataPosition = 0;\n\n        const sequenceNumber = data.getUint16(dataPosition, UDT.LITTLE_ENDIAN);\n        dataPosition += 2;\n\n        const codecNameSize = data.getUint32(dataPosition, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n        const codecName = textDecoder.decode(new Uint8Array(data.buffer, data.byteOffset + dataPosition, codecNameSize));\n        dataPosition += codecNameSize;\n\n        // FIXME: AudioMixerSlave::sendSilentPacket() currently writes a 4-byte value instead of a 2--byte value/\n        const numSilentSamples = data.getUint32(dataPosition, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n\n        /* eslint-disable @typescript-eslint/no-magic-numbers */\n\n        assert(dataPosition === data.byteLength);\n\n        return {\n            sequenceNumber,\n            codecName,\n            numSilentSamples\n        };\n    }\n\n    /*@devdoc\n     *  Writes a {@link PacketType(1)|SilentAudioFrame} packet, ready for sending.\n     *  @function PacketScribe.SilentAudioFrame&period;write\n     *  @param {PacketScribe.SilentAudioFrameDetails} info - The information needed for writing the packet.\n     *  @returns {NLPacket}\n     */\n    write(info: SilentAudioFrameDetails): NLPacket {  /* eslint-disable-line class-methods-use-this */\n        // C++  void AbstractAudioInterface::emitAudioPacket(const void* audioData, size_t bytes, quint16& sequenceNumber,\n        //      bool isStereo, const Transform& transform, glm::vec3 avatarBoundingBoxCorner, glm:: vec3 avatarBoundingBoxScale,\n        //      PacketType packetType, QString codecName)\n\n        const packet = NLPacket.create(PacketType.SilentAudioFrame);\n        const messageData = packet.getMessageData();\n        const data = messageData.data;\n        let dataPosition = messageData.dataPosition;\n\n        /* eslint-disable @typescript-eslint/no-magic-numbers */\n\n        data.setUint16(dataPosition, info.sequenceNumber, UDT.LITTLE_ENDIAN);\n        dataPosition += 2;\n\n        const codecName = info.codecName;\n        data.setUint32(dataPosition, codecName.length, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n        for (let i = 0, length = codecName.length; i < length; i++) {\n            data.setUint8(dataPosition, codecName.charCodeAt(i));\n            dataPosition += 1;\n        }\n\n        data.setUint16(dataPosition, info.numSilentSamples, UDT.LITTLE_ENDIAN);\n        dataPosition += 2;\n\n        assert(info.audioPosition !== undefined && info.audioOrientation !== undefined\n            && info.avatarBoundingBoxCorner !== undefined && info.avatarBoundingBoxScale !== undefined);\n\n        data.setFloat32(dataPosition, info.audioPosition.x, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n        data.setFloat32(dataPosition, info.audioPosition.y, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n        data.setFloat32(dataPosition, info.audioPosition.z, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n\n        data.setFloat32(dataPosition, info.audioOrientation.x, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n        data.setFloat32(dataPosition, info.audioOrientation.y, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n        data.setFloat32(dataPosition, info.audioOrientation.z, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n        data.setFloat32(dataPosition, info.audioOrientation.w, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n\n        data.setFloat32(dataPosition, info.avatarBoundingBoxCorner.x, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n        data.setFloat32(dataPosition, info.avatarBoundingBoxCorner.y, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n        data.setFloat32(dataPosition, info.avatarBoundingBoxCorner.z, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n\n        data.setFloat32(dataPosition, info.avatarBoundingBoxScale.x, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n        data.setFloat32(dataPosition, info.avatarBoundingBoxScale.y, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n        data.setFloat32(dataPosition, info.avatarBoundingBoxScale.z, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n\n        /* eslint-enable @typescript-eslint/no-magic-numbers */\n\n        messageData.dataPosition = dataPosition;\n        messageData.packetSize = dataPosition;\n\n        return packet;\n    }\n\n}();\n\nexport default SilentAudioFrame;\nexport type { SilentAudioFrameDetails };\n","//\n//  DomainListRequest.ts\n//\n//  Created by David Rowe on 28 Jul 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport PacketType from \"../udt/PacketHeaders\";\nimport UDT from \"../udt/UDT\";\nimport NLPacket from \"../NLPacket\";\nimport SockAddr from \"../SockAddr\";\nimport { NodeTypeValue } from \"../../networking/NodeType\";\nimport assert from \"../../shared/assert\";\nimport \"../../shared/DataViewExtensions\";\n\n\ntype DomainListRequestDetails = {\n    currentTime: bigint,\n    ownerType: NodeTypeValue,\n    publicSockAddr: SockAddr,\n    localSockAddr: SockAddr,\n    nodeTypesOfInterest: Set<NodeTypeValue>,\n    placeName: string,\n    isDomainConnected: boolean,\n    username: string | undefined,\n    usernameSignature: Uint8Array | undefined,\n    domainUsername: string | undefined,\n    domainTokens: string | undefined\n};\n\n\nconst DomainListRequest = new class {\n\n    /*@devdoc\n     *  Information needed for {@link PacketScribe|writing} a {@link PacketType(1)|DomainListRequest} packet.\n     *  @typedef {object} PacketScribe.DomainListRequestDetails\n     *  @property {bigint} currentTime - The current Unix time, in usec.\n     *  @property {NodeType} ownerType - The type of this node, i.e., <code>NodeType.Agent</code> for a web client.\n     *  @property {SockAddr} publicSockAddr - The web client's public Internet address.\n     *  @property {SockAddr} localSockAddr - The web client's local network address.\n     *  @property {Set<NodeType>} nodeTypesOfInterest - The types of domain server nodes that the web client wants to use.\n     *  @property {string} placeName - The domain's place name from {@link AddressManager} if known, otherwise an empty string.\n     *  @property {boolean} isDomainConnected - <code>true</code> if currently connected to the domain, <code>false</code> if\n     *      not connected.\n     *  @property {string} [username] - If not connected then the user's metaverse user name, otherwise <code>\"\"</code>.\n     *  @property {Uint8Array} [usernameSignature] - If not connected then the login signature of the domain requires login and\n     *      the signature is known, otherwise an empty value.\n     *  @property {string} [domainUsername] - If not connected and the domain has its own login, the domain login user name.\n     *  @property {string} [domainTokens] - If not connected and the domain has its own login, the domain login OAuth2 token(s)\n     *      as <code>&lt;access-token&gt;:&lt;refresh-token&gt;</code>.\n     */\n\n    /*@devdoc\n     *  Writes a {@link PacketType(1)|DomainListRequest} packet, ready for sending.\n     *  @function PacketScribe.DomainListRequest&period;write\n     *  @param {PacketScribe.DomainListRequestDetails} info - The information needed for writing the packet.\n     *  @returns {NLPacket}\n     */\n    write(info: DomainListRequestDetails): NLPacket {  /* eslint-disable-line class-methods-use-this */\n        // C++  NodeList::sendDomainServerCheckIn()\n\n        const packet = NLPacket.create(PacketType.DomainListRequest);\n        const messageData = packet.getMessageData();\n        const data = messageData.data;\n        let dataPosition = messageData.dataPosition;\n\n        // WEBRTC TODO: Address further C++ code.\n\n        /* eslint-disable @typescript-eslint/no-magic-numbers */\n\n        data.setBigUint64(dataPosition, info.currentTime, UDT.BIG_ENDIAN);\n        dataPosition += 8;\n\n        data.setUint8(dataPosition, info.ownerType.charCodeAt(0));\n        dataPosition += 1;\n\n        data.setUint8(dataPosition, info.publicSockAddr.getType());\n        dataPosition += 1;\n        data.setUint8(dataPosition, 0);  // IP4\n        dataPosition += 1;\n        data.setUint32(dataPosition, info.publicSockAddr.getAddress(), UDT.BIG_ENDIAN);\n        dataPosition += 4;\n        data.setUint16(dataPosition, info.publicSockAddr.getPort(), UDT.BIG_ENDIAN);\n        dataPosition += 2;\n\n        data.setUint8(dataPosition, info.localSockAddr.getType());\n        dataPosition += 1;\n        data.setUint8(dataPosition, 0);  // IP4\n        dataPosition += 1;\n        data.setUint32(dataPosition, info.localSockAddr.getAddress(), UDT.BIG_ENDIAN);\n        dataPosition += 4;\n        data.setUint16(dataPosition, info.localSockAddr.getPort(), UDT.BIG_ENDIAN);\n        dataPosition += 2;\n\n        data.setUint32(dataPosition, info.nodeTypesOfInterest.size, UDT.BIG_ENDIAN);\n        dataPosition += 4;\n        for (const nodeType of info.nodeTypesOfInterest.values()) {\n            data.setUint8(dataPosition, nodeType.charCodeAt(0));\n            dataPosition += 1;\n        }\n\n        data.setUint32(dataPosition, info.placeName.length * 2, UDT.BIG_ENDIAN);\n        dataPosition += 4;\n        for (let i = 0; i < info.placeName.length; i += 1) {\n            data.setUint16(dataPosition, info.placeName.charCodeAt(i), UDT.BIG_ENDIAN);\n            dataPosition += 2;\n        }\n\n        if (!info.isDomainConnected) {\n\n            assert(info.username !== undefined && info.usernameSignature !== undefined,\n                \"DomainListRequest.write() missing info for connected case!\");\n\n            data.setUint32(dataPosition, info.username.length, UDT.BIG_ENDIAN);\n            dataPosition += 4;\n            for (let i = 0; i < info.username.length; i += 1) {\n                data.setUint16(dataPosition, info.username.charCodeAt(i), UDT.BIG_ENDIAN);\n                dataPosition += 2;\n            }\n\n            data.setUint32(dataPosition, info.usernameSignature.byteLength, UDT.BIG_ENDIAN);\n            dataPosition += 4;\n            for (let i = 0; i < info.usernameSignature.byteLength; i++) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                data.setUint8(dataPosition, info.usernameSignature[i]!);\n                dataPosition += 1;\n            }\n\n            if (info.domainUsername !== undefined && info.domainTokens !== undefined) {\n\n                data.setUint32(dataPosition, info.domainUsername.length, UDT.BIG_ENDIAN);\n                dataPosition += 4;\n                for (let i = 0; i < info.domainUsername.length; i += 1) {\n                    data.setUint16(dataPosition, info.domainUsername.charCodeAt(i), UDT.BIG_ENDIAN);\n                    dataPosition += 2;\n                }\n\n                data.setUint32(dataPosition, info.domainTokens.length, UDT.BIG_ENDIAN);\n                dataPosition += 4;\n                for (let i = 0; i < info.domainTokens.length; i += 1) {\n                    data.setUint16(dataPosition, info.domainTokens.charCodeAt(i), UDT.BIG_ENDIAN);\n                    dataPosition += 2;\n                }\n\n            }\n\n        }\n\n        /* eslint-enable @typescript-eslint/no-magic-numbers */\n\n        messageData.dataPosition = dataPosition;\n        messageData.packetSize = dataPosition;\n\n        return packet;\n    }\n\n}();\n\nexport default DomainListRequest;\nexport type { DomainListRequestDetails };\n","//\n//  DomainConnectionDenied.ts\n//\n//  Created by David Rowe on 2 Aug 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport UDT from \"../udt/UDT\";\nimport assert from \"../../shared/assert\";\n\n\ntype DomainConnectionDeniedDetails = {\n    reasonCode: number,\n    reasonMessage: string,\n    extraInfo: string\n};\n\n\nconst DomainConnectionDenied = new class {\n    // C++  N/A\n\n    /*@devdoc\n     *  Information returned by {@link PacketScribe|reading} a {@link PacketType(1)|DomainConnectionDenied} packet.\n     *  @typedef {object} PacketScribe.DomainConnectionDeniedDetails\n     *  @property {ComainHandler.ConnectionRefusedReason} reasonCode - The reason that the client was refused connection to the\n     *      domain.\n     *  @property {string} reasonMessage - A description of the reason.\n     *  @property {string} etraInfo - Extra information about the reason.\n     */\n\n    /*@devdoc\n     *  Reads a {@link PacketType(1)|DomainConnectionDenied} packet.\n     *  @function PacketScribe.DomainConnectionDenied&period;read\n     *  @param {DataView} data - The {@link Packets|DomainConnectionDenied} message data to read.\n     *  @returns {PacketScribe.DomainConnectionDeniedDetails} Information on the domain connection denied condition.\n     */\n    read(data: DataView): DomainConnectionDeniedDetails {  /* eslint-disable-line class-methods-use-this */\n        // C++  void DomainHandler::processDomainServerConnectionDeniedPacket(QSharedPointer<ReceivedMessage> message)\n\n        const textDecoder = new TextDecoder();\n\n        /* eslint-disable @typescript-eslint/no-magic-numbers */\n\n        let dataPosition = 0;\n\n        const reasonCode = data.getUint8(dataPosition);\n        dataPosition += 1;\n\n        const reasonSize = data.getUint16(dataPosition, UDT.LITTLE_ENDIAN);\n        dataPosition += 2;\n        const reasonMessage = textDecoder.decode(new Uint8Array(data.buffer, data.byteOffset + dataPosition, reasonSize));\n        dataPosition += reasonSize;\n\n        const extraInfoSize = data.getUint16(dataPosition, UDT.LITTLE_ENDIAN);\n        dataPosition += 2;\n        const extraInfo = textDecoder.decode(new Uint8Array(data.buffer, data.byteOffset + dataPosition, extraInfoSize));\n        dataPosition += extraInfoSize;\n\n        /* eslint-enable @typescript-eslint/no-magic-numbers */\n\n        assert(dataPosition === data.byteLength, \"ERROR: Length mismatch reading DomainConnectionDenied message!\");\n\n        return {\n            reasonCode,\n            reasonMessage,\n            extraInfo\n        };\n    }\n\n}();\n\nexport default DomainConnectionDenied;\nexport type { DomainConnectionDeniedDetails };\n","//\n//  DomainConnectRequest.ts\n//\n//  Created by David Rowe on 7 Jun 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport PacketType from \"../udt/PacketHeaders\";\nimport UDT from \"../udt/UDT\";\nimport NLPacket from \"../NLPacket\";\nimport SockAddr from \"../SockAddr\";\nimport { NodeTypeValue } from \"../../networking/NodeType\";\nimport assert from \"../../shared/assert\";\nimport Uuid from \"../../shared/Uuid\";\n\nimport \"../../shared/DataViewExtensions\";\n\n\ntype DomainConnectRequestDetails = {\n    connectUUID: Uuid,\n    protocolVersionSig: Uint8Array,\n    hardwareAddress: string,\n    machineFingerprint: Uuid,\n    compressedSystemInfo: Uint8Array,\n    connectReason: number,\n    previousConnectionUptime: bigint,\n    currentTime: bigint,\n    ownerType: NodeTypeValue,\n    publicSockAddr: SockAddr,\n    localSockAddr: SockAddr,\n    nodeTypesOfInterest: Set<NodeTypeValue>,\n    placeName: string,\n    isDomainConnected: boolean,\n    username: string | undefined,\n    usernameSignature: Uint8Array | undefined,\n    domainUsername: string | undefined,\n    domainTokens: string | undefined\n};\n\n\nconst DomainConnectRequest = new class {\n\n    /*@devdoc\n     *  Information needed for {@link PacketScribe|writing} a {@link PacketType(1)|DomainConnectRequest} packet.\n     *  @typedef {object} PacketScribe.DomainConnectRequestDetails\n     *  @property {Uuid} connectUUID - If ICE was used to discover the domain server, the ICE client's UUID, otherwise\n     *      <code>Uuid.NULL</code>. (For a web client, use <code>Uuid.NULL</code>.)\n     *  @property {Uint8Array} protocolVersionSig - The protocol version signature from {@link protocolVersionsSignature}.\n     *  @property {string} hardwareAddress - The client's MAC address if possible, otherwise <code>\"\"</code>.\n     *  @property {Uuid} machineFingerprint - The machine fingerprint from {@link FingerprintUtils}.\n     *  @property {Uint8Array} compressedSystemInfo - Compressed information about the machine from {@link Platform} if it won't\n     *     cause the packet to overflow, otherwise an empty value.\n     *  @property {LimitedNodeList.ConnectReason} connectReason - The reason for sending this DomainConnectRequest.\n     *  @property {bigint} previousConnectionUptime - How long the client was previously connected to the domain, in usec.\n     *      <code>0</code> if not previously connected.\n     *  @property {bigint} currentTime - The current Unix time, in usec.\n     *  @property {NodeType} ownerType - The type of this node, i.e., <code>NodeType.Agent</code> for the web client.\n     *  @property {SockAddr} publicSockAddr - The web client's public Internet address.\n     *  @property {SockAddr} localSockAddr - The web client's local network address.\n     *  @property {Set<NodeType>} nodeTypesOfInterest - The types of domain server nodes that the web client wants to use.\n     *  @property {string} placeName - The domain's place name from {@link AddressManager} if known, otherwise an empty string.\n     *  @property {boolean} isDomainConnected - <code>true</code> if currently connected to the domain, <code>false</code> if\n     *      not connected.\n     *  @property {string} [username] - If not connected, the user's metaverse user name.\n     *  @property {Uint8Array} [usernameSignature] - If not connected then the login signature of the domain requires login and\n     *      the signature is known, otherwise an empty value.\n     *  @property {string} [domainUsername] - If not connected and the domain has its own login, the domain login user name.\n     *  @property {string} [domainTokens] - If not connected and the domain has its own login, the domain login OAuth2 token(s)\n     *      as <code>&lt;access-token&gt;:&lt;refresh-toklen&gt;</code>.\n     */\n\n    /*@devdoc\n     *  Writes a {@link PacketType(1)|DomainConnectRequest} packet, ready for sending.\n     *  @function PacketScribe.DomainConnectRequest&period;write\n     *  @param {PacketScribe.DomainConnectRequestDetails} info - The information needed for writing the packet.\n     *  @returns {NLPacket}\n     */\n    write(info: DomainConnectRequestDetails): NLPacket {  /* eslint-disable-line class-methods-use-this */\n        // C++  NodeList::sendDomainServerCheckIn()\n\n        const packet = NLPacket.create(PacketType.DomainConnectRequest);\n        const messageData = packet.getMessageData();\n        const data = messageData.data;\n        let dataPosition = messageData.dataPosition;\n\n        // WEBRTC TODO: Address further C++ code.\n\n        /* eslint-disable @typescript-eslint/no-magic-numbers */\n\n        // WebRTC-connected domain handler doesn't use ICE so ignore ICE client ID code.\n        data.setBigUint128(dataPosition, info.connectUUID.value(), UDT.BIG_ENDIAN);\n        dataPosition += 16;\n\n        data.setUint32(dataPosition, info.protocolVersionSig.byteLength, UDT.BIG_ENDIAN);\n        dataPosition += 4;\n        for (let i = 0; i < info.protocolVersionSig.byteLength; i++) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            data.setUint8(dataPosition + i, info.protocolVersionSig[i]!);\n        }\n        dataPosition += info.protocolVersionSig.byteLength;\n\n        data.setUint32(dataPosition, info.hardwareAddress.length, UDT.BIG_ENDIAN);\n        dataPosition += 4;\n        for (let i = 0; i < info.hardwareAddress.length; i++) {\n            data.setUint16(dataPosition, info.hardwareAddress.charCodeAt(i), UDT.BIG_ENDIAN);\n            dataPosition += 2;\n        }\n\n        data.setBigUint128(dataPosition, info.machineFingerprint.value(), UDT.BIG_ENDIAN);\n        dataPosition += 16;\n\n        data.setUint32(dataPosition, info.compressedSystemInfo.byteLength, UDT.BIG_ENDIAN);\n        dataPosition += 4;\n        for (let i = 0; i < info.compressedSystemInfo.byteLength; i++) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            data.setUint8(dataPosition, info.compressedSystemInfo[i]!);\n            dataPosition += 1;\n        }\n\n        data.setUint32(dataPosition, info.connectReason, UDT.BIG_ENDIAN);\n        dataPosition += 4;\n\n        data.setBigUint64(dataPosition, info.previousConnectionUptime, UDT.BIG_ENDIAN);\n        dataPosition += 8;\n\n        data.setBigUint64(dataPosition, info.currentTime, UDT.BIG_ENDIAN);\n        dataPosition += 8;\n\n        data.setUint8(dataPosition, info.ownerType.charCodeAt(0));\n        dataPosition += 1;\n\n        data.setUint8(dataPosition, info.publicSockAddr.getType());\n        dataPosition += 1;\n        data.setUint8(dataPosition, 0);  // IP4\n        dataPosition += 1;\n        data.setUint32(dataPosition, info.publicSockAddr.getAddress(), UDT.BIG_ENDIAN);\n        dataPosition += 4;\n        data.setUint16(dataPosition, info.publicSockAddr.getPort(), UDT.BIG_ENDIAN);\n        dataPosition += 2;\n\n        data.setUint8(dataPosition, info.localSockAddr.getType());\n        dataPosition += 1;\n        data.setUint8(dataPosition, 0);  // IP4\n        dataPosition += 1;\n        data.setUint32(dataPosition, info.localSockAddr.getAddress(), UDT.BIG_ENDIAN);\n        dataPosition += 4;\n        data.setUint16(dataPosition, info.localSockAddr.getPort(), UDT.BIG_ENDIAN);\n        dataPosition += 2;\n\n        data.setUint32(dataPosition, info.nodeTypesOfInterest.size, UDT.BIG_ENDIAN);\n        dataPosition += 4;\n        for (const nodeType of info.nodeTypesOfInterest.values()) {\n            data.setUint8(dataPosition, nodeType.charCodeAt(0));\n            dataPosition += 1;\n        }\n\n        data.setUint32(dataPosition, info.placeName.length * 2, UDT.BIG_ENDIAN);\n        dataPosition += 4;\n        for (let i = 0; i < info.placeName.length; i += 1) {\n            data.setUint16(dataPosition, info.placeName.charCodeAt(i), UDT.BIG_ENDIAN);\n            dataPosition += 2;\n        }\n\n        if (!info.isDomainConnected) {\n\n            assert(info.username !== undefined && info.usernameSignature !== undefined,\n                \"DomainConnectRequest.write() missing info for connected case!\");\n\n            data.setUint32(dataPosition, info.username.length, UDT.BIG_ENDIAN);\n            dataPosition += 4;\n            for (let i = 0; i < info.username.length; i += 1) {\n                data.setUint16(dataPosition, info.username.charCodeAt(i), UDT.BIG_ENDIAN);\n                dataPosition += 2;\n            }\n\n            data.setUint32(dataPosition, info.usernameSignature.byteLength, UDT.BIG_ENDIAN);\n            dataPosition += 4;\n            for (let i = 0; i < info.usernameSignature.byteLength; i++) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                data.setUint8(dataPosition, info.usernameSignature[i]!);\n                dataPosition += 1;\n            }\n\n            if (info.domainUsername !== undefined && info.domainTokens !== undefined) {\n\n                data.setUint32(dataPosition, info.domainUsername.length, UDT.BIG_ENDIAN);\n                dataPosition += 4;\n                for (let i = 0; i < info.domainUsername.length; i += 1) {\n                    data.setUint16(dataPosition, info.domainUsername.charCodeAt(i), UDT.BIG_ENDIAN);\n                    dataPosition += 2;\n                }\n\n                data.setUint32(dataPosition, info.domainTokens.length, UDT.BIG_ENDIAN);\n                dataPosition += 4;\n                for (let i = 0; i < info.domainTokens.length; i += 1) {\n                    data.setUint16(dataPosition, info.domainTokens.charCodeAt(i), UDT.BIG_ENDIAN);\n                    dataPosition += 2;\n                }\n\n            }\n\n        }\n\n        /* eslint-enable @typescript-eslint/no-magic-numbers */\n\n        messageData.dataPosition = dataPosition;\n        messageData.packetSize = dataPosition;\n        return packet;\n    }\n\n}();\n\nexport default DomainConnectRequest;\nexport type { DomainConnectRequestDetails };\n","//\n//  DomainDisonnectRequest.ts\n//\n//  Created by David Rowe on 26 Jul 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport PacketType from \"../udt/PacketHeaders\";\nimport NLPacket from \"../NLPacket\";\n\n\nconst DomainDisconnectRequest = new class {\n\n    /*@devdoc\n     *  Writes a {@link PacketType(1)|DomainDisconnectRequest} packet, ready for sending.\n     *  @function PacketScribe.DomainDisconnectRequest&period;write\n     *  @returns {NLPacket}\n     */\n    write(): NLPacket {  /* eslint-disable-line class-methods-use-this */\n        // C++  DomainHandler::sendDisconnectPacket()\n\n        const packet = NLPacket.create(PacketType.DomainDisconnectRequest);\n        const messageData = packet.getMessageData();\n        messageData.packetSize = messageData.dataPosition;\n        return packet;\n    }\n\n}();\n\nexport default DomainDisconnectRequest;\n","//\n//  DomainServerRemovedNode.ts\n//\n//  Created by David Rowe on 20 Aug 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport UDT from \"../udt/UDT\";\nimport assert from \"../../shared/assert\";\nimport Uuid from \"../../shared/Uuid\";\n\nimport \"../../shared/DataViewExtensions\";\n\n\ntype DomainServerRemovedNodeDetails = {\n    nodeUUID: Uuid\n};\n\n\nconst DomainServerRemovedNode = new class {\n    // C++  N/A\n\n    /*@devdoc\n     *  Information returned by {@link PacketScribe|reading} a {@link PacketType(1)|DomainServerRemovedNode} packet.\n     *  @typedef {object} PacketScribe.DomainServerRemovedNodeDetails\n     *  @property {Uuid} nodeUUID - The UUID of the assignment client node that has been removed.\n     */\n\n    /*@devdoc\n     *  Reads a {@link PacketType(1)|DomainServerRemovedNode} packet.\n     *  @function PacketScribe.DomainServerRemovedNode&period;read\n     *  @param {DataView} data - The {@link Packets|DomainServerRemovedNode} message data to read.\n     *  @returns {PacketScribe.DomainServerRemovedNodeDetails} Information on the assignment client node removed.\n     */\n    read(data: DataView): DomainServerRemovedNodeDetails {  /* eslint-disable-line class-methods-use-this */\n        // C++  void NodeList::processDomainServerRemovedNode(QSharedPointer<ReceivedMessage> message)\n\n        /* eslint-disable @typescript-eslint/no-magic-numbers */\n\n        let dataPosition = 0;\n\n        const nodeUUID = new Uuid(data.getBigUint128(dataPosition, UDT.BIG_ENDIAN));\n        dataPosition += 16;\n\n        /* eslint-enable @typescript-eslint/no-magic-numbers */\n\n        assert(dataPosition === data.byteLength, \"ERROR: Length mismatch reading DomainServerRemovedNode message!\");\n\n        return {\n            nodeUUID\n        };\n    }\n\n}();\n\nexport default DomainServerRemovedNode;\nexport type { DomainServerRemovedNodeDetails };\n","//\n//  NegotiateAudioFormat.ts\n//\n//  Created by David Rowe on 27 Aug 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport PacketType from \"../udt/PacketHeaders\";\nimport UDT from \"../udt/UDT\";\nimport NLPacket from \"../NLPacket\";\nimport \"../../shared/DataViewExtensions\";\n\n\ntype NegotiateAudioFormatDetails = {\n    codecs: Array<string>\n};\n\n\nconst NegotiateAudioFormat = new class {\n\n    /*@devdoc\n     *  Information needed for {@link PacketScribe|writing} a {@link PacketType(1)|NegotiateAudioFormat} packet.\n     *  @typedef {object} PacketScribe.NegotiateAudioFormatDetails\n     *  @property {string[]} codecs - The names of the audio codecs that the user client can use, e.g., <code>\"opus\"</code>.\n     */\n\n    /*@devdoc\n     *  Writes a {@link PacketType(1)|NegotiateAudioFormat} packet, ready for sending.\n     *  @function PacketScribe.NegotiateAudioFormat&period;write\n     *  @param {PacketScribe.NegotiateAudioFormatDetails} info - The information needed for writing the packet.\n     *  @returns {NLPacket}\n     */\n    write(info: NegotiateAudioFormatDetails): NLPacket {  /* eslint-disable-line class-methods-use-this */\n        // C++  void AudioClient::negotiateAudioFormat()\n\n        const packet = NLPacket.create(PacketType.NegotiateAudioFormat);\n        const messageData = packet.getMessageData();\n        const data = messageData.data;\n        let dataPosition = messageData.dataPosition;\n\n        /* eslint-disable @typescript-eslint/no-magic-numbers */\n\n        data.setUint8(dataPosition, info.codecs.length);\n        dataPosition += 1;\n\n        for (const codec of info.codecs) {\n            data.setUint32(dataPosition, codec.length, UDT.LITTLE_ENDIAN);\n            dataPosition += 4;\n            for (let i = 0; i < codec.length; i++) {\n                data.setUint8(dataPosition, codec.charCodeAt(i));\n                dataPosition += 1;\n            }\n        }\n\n        /* eslint-enable @typescript-eslint/no-magic-numbers */\n\n        messageData.dataPosition = dataPosition;\n        messageData.packetSize = dataPosition;\n\n        return packet;\n    }\n\n}();\n\nexport default NegotiateAudioFormat;\nexport type { NegotiateAudioFormatDetails };\n","//\n//  SelectedAudioFormat.ts\n//\n//  Created by David Rowe on 10 Sep 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport UDT from \"../udt/UDT\";\nimport assert from \"../../shared/assert\";\n\n\ntype SelectedAudioFormatDetails = {\n    selectedCodecName: string\n};\n\n\nconst SelectedAudioFormat = new class {\n    // C++  N/A\n\n    /*@devdoc\n     *  Information returned by {@link PacketScribe|reading} a {@link PacketType(1)|SelectedAudioFormat} packet.\n     *  @typedef {object} PacketScribe.SelectedAudioFormatDetails\n     *  @property {string} selectedCodecName - The name of the audio codec selected for use.\n     */\n\n\n    /*@devdoc\n     *  Reads a {@link PacketType(1)|SelectedAudioFormat} packet.\n     *  @function PacketScribe.SelectedAudioFormat&period;read\n     *  @param {DataView} data - The {@link Packets|SelectedAudioFormat} message data to read.\n     *  @returns {PacketScribe.SelectedAudioFormatDetails} The audio codec selected for use.\n     */\n    read(data: DataView): SelectedAudioFormatDetails {  /* eslint-disable-line class-methods-use-this */\n        // C++  void AudioClient::handleSelectedAudioFormat(ReceivedMessage* message)\n\n        const textDecoder = new TextDecoder();\n\n        /* eslint-disable @typescript-eslint/no-magic-numbers */\n\n        let dataPosition = 0;\n\n        const selectedCodecNameSize = data.getUint32(dataPosition, UDT.LITTLE_ENDIAN);\n        dataPosition += 4;\n        const selectedCodecName = textDecoder.decode(new Uint8Array(data.buffer, data.byteOffset + dataPosition,\n            selectedCodecNameSize));\n        dataPosition += selectedCodecNameSize;\n\n        /* eslint-enable @typescript-eslint/no-magic-numbers */\n\n        assert(dataPosition === data.byteLength, \"ERROR: Length mismatch reading SelectedAudioFormat packet!\");\n\n        return {\n            selectedCodecName\n        };\n    }\n\n}();\n\nexport default SelectedAudioFormat;\nexport type { SelectedAudioFormatDetails };\n","//\n//  DomainHandler.ts\n//\n//  Created by David Rowe on 5 Jun 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport { LocalID } from \"./NetworkPeer\";\nimport NodeList from \"./NodeList\";\nimport SockAddr from \"./SockAddr\";\nimport Signal from \"../shared/Signal\";\nimport Uuid from \"../shared/Uuid\";\nimport PacketScribe from \"./packets/PacketScribe\";\nimport ReceivedMessage from \"./ReceivedMessage\";\n\n\n/*@devdoc\n *  The <code>DomainHandler</code> class handles the connection to and the features of a domain.\n *  <p>C++: <code>DomainHandler : QObject</code></p>\n *  @class DomainHandler\n *  @param {NodeList} parent - The parent {@link NodeList} object.\n *\n *  @property {DomainHandler.ConnectionRefusedReasons} ConnectionRefusedReason - The reasons that a client may be refused\n *      connection to a domain.\n *      <em>Static. Read-only.</em>\n */\nclass DomainHandler {\n    // C++  DomainHandler : public QObject\n\n    /*@devdoc\n     *  <p>The reasons that a client may be refused connection to a domain.</p>\n     *  <table>\n     *      <thead>\n     *          <tr><th>Reason</th><th>Value</th><th>Description</th></tr>\n     *      </thead>\n     *  <tbody>\n     *      <tr><td>Unknown</td><td><code>0</code></td>\n     *          <td>Some unknown reason.</td></tr>\n     *      <tr><td>ProtocolMismatch</td><td><code>1</code></td>\n     *          <td>The communications protocols of the domain and your client are not the same.</td></tr>\n     *      <tr><td>LoginErrorMetaverse</td><td><code>2</code></td>\n     *          <td>You could not be logged into the domain per your metaverse login.</td></tr>\n     *      <tr><td>NotAuthorizedMetaverse</td><td><code>3</code></td>\n     *          <td>You are not authorized to connect to the domain per your metaverse login.</td></tr>\n     *      <tr><td>TooManyUsers</td><td><code>4</code></td>\n     *          <td>The domain already has its maximum number of users.</td></tr>\n     *      <tr><td>TimedOut</td><td><code>5</code></td>\n     *          <td>Connecting to the domain timed out.</td></tr>\n     *      <tr><td>LoginErrorDomain</td><td><code>6</code></td>\n     *          <td>You could not be logged into the domain per your domain login.</td></tr>\n     *      <tr><td>NotAuthorizedDomain</td><td><code>7</code></td>\n     *          <td>You are not authorized to connect to the domain per your domain login.</td></tr>\n     *   </tbody>\n     * </table>\n     * @typedef {number} DomainHandler.ConnectionRefusedReason\n     */\n    /*@devdoc\n     *  The reasons that a client may be refused connection to a domain.\n     *  @typedef {object} DomainHandler.ConnectionRefusedReasons\n     *  @property {number} Unknown - <code>0</code>:\n     *      Some unknown reason.\n     *  @property {number} ProtocolMismatch - <code>1</code>:\n     *      The communications protocols of the domain and your client are not the same.\n     *  @property {number} LoginErrorMetaverse - <code>2</code>:\n     *      You could not be logged into the domain per your metaverse login.\n     *  @property {number} NotAuthorizedMetaverse - <code>3</code>:\n     *      You are not authorized to connect to the domain per your metaverse login.\n     *  @property {number} TooManyUsers - <code>4</code>:\n     *      The domain already has its maximum number of users.\n     *  @property {number} TimedOut - <code>5</code>:\n     *      Connecting to the domain timed out.\n     *  @property {number} LoginErrorDomain - <code>6</code>:\n     *      You could not be logged into the domain per your domain login.\n     *  @property {number} NotAuthorizedDomain - <code>7</code>:\n     *      You are not authorized to connect to the domain per your domain login.\n     */\n    static readonly ConnectionRefusedReason = new class {\n        readonly Unknown = 0;\n        readonly ProtocolMismatch = 1;\n        readonly LoginErrorMetaverse = 2;\n        readonly NotAuthorizedMetaverse = 3;\n        readonly TooManyUsers = 4;\n        readonly TimedOut = 5;\n        readonly LoginErrorDomain = 6;\n        readonly NotAuthorizedDomain = 7;\n    }();\n\n\n    #_domainURL = \"\";\n    #_sockAddr = new SockAddr();  // For WebRTC, the port is the critical part.\n    #_isConnected = false;\n    #_localID = 0;\n    #_uuid = new Uuid(Uuid.NULL);\n\n    #_errorDomainURL = \"\";\n    #_domainConnectionRefusals: Set<string> = new Set();\n\n    #_connectedToDomain = new Signal();\n    #_disconnectedFromDomain = new Signal();\n    #_domainConnectionRefused = new Signal();\n\n    // Context objects.\n    #_nodeList;\n\n\n    constructor(parent: NodeList) {\n        // C++  DomainHandler(QObject* parent = 0);\n        this.#_nodeList = parent;\n        this.#_sockAddr.setObjectName(\"DomainServer\");\n\n        // WEBRTC TODO: Address further C++ code.\n\n    }\n\n\n    /*@devdoc\n     *  Sets the domain's UUID.\n     *  @param {Uuid} uuid - The domain's UUID.\n     */\n    setUUID(uuid: Uuid): void {\n        // C++  void setUUID(const QUuid& uuid)\n        this.#_uuid = uuid;\n\n        // WEBRTC TODO: Address further C++ code.\n    }\n\n    /*@devdoc\n     *  Gets the domain's UUID.\n     *  @returns {Uuid} The domain's UUID.\n     */\n    getUUID(): Uuid {\n        // C++ QUuid& getUUID()\n        return this.#_uuid;\n    }\n\n    /*@devdoc\n     *  Sets the domain's local ID.\n     *  @param {LocalID} localID - The domain's local ID.\n     */\n    setLocalID(localID: LocalID): void {\n        // C++ void setLocalID(LocalID localID)\n        this.#_localID = localID;\n    }\n\n    /*@devdoc\n     *  Gets the domain's local ID.\n     *  @returns {LocalID} The domain's local ID.\n     */\n    getLocalID(): LocalID {\n        // C++  LocalID getLocalID()\n        return this.#_localID;\n    }\n\n    /*@devdoc\n     *  Gets the current domain's URL.\n     *  <p>Note: The web app uses the domain's URL rather than its IP address.<p>\n     *  @returns {string} The current domain's URL.\n     */\n    getURL(): string {\n        // C++  N/A\n\n        // WEBRTC TODO: Revisit using URL versus IP address..\n\n        return this.#_domainURL;\n    }\n\n    /*@devdoc\n     *  Gets the domain's address.\n     *  @returns {SockAddr} The domain's address.\n     */\n    getSockAddr(): SockAddr {\n        // C++  SockAddr& getSockAddr()\n        return this.#_sockAddr;\n    }\n\n    /*@devdoc\n     *  Sets the domain's network port.\n     *  @param {number} port - The domain's network port.\n     */\n    setPort(port: number): void {\n        // C++  void setPort(quint16 port)\n        this.#_sockAddr.setPort(port);\n    }\n\n    /*@devdoc\n     *  Gets the domain's network port.\n     *  @returns {number} The domain's network port.\n     */\n    getPort(): number {\n        // C++  unsigned short getPort()\n        return this.#_sockAddr.getPort();\n    }\n\n    /*@devdoc\n     *  Gets whether the client is connected to the domain.\n     *  @returns {boolean} <code>true</code> if connect to the domain, <code>false</code> if not connected.\n     */\n    isConnected(): boolean {\n        // C++  bool isConnected()\n        return this.#_isConnected;\n    }\n\n    /*@devdoc\n     *  Sets whether the client is connected to the domain.\n     *  @param {boolean} isConnected - <code>true</code> if the client is connected to the domain, <code>false</code> if it\n     *      isn't.\n     *  @param {boolean} forceDisconnect - <code>true</code> if any partly open communications channels to the domain server\n     *      should be closed (e.g., if currently trying to connect), <code>false</code> if they need not be.\n     */\n    setIsConnected(isConnected: boolean, forceDisconnect = false): void {\n        // C++  void setIsConnected(bool isConnected)\n        //      The extra forceDisconnect parameter is used to cause the WebRTC signaling channel to be closed.\n        if (this.#_isConnected !== isConnected) {\n            this.#_isConnected = isConnected;\n            if (this.#_isConnected) {\n\n                // WEBRTC TODO: Address further C++ code.\n\n                this.connectedToDomain.emit(this.#_domainURL);\n\n                // WEBRTC TODO: Address further C++ code.\n\n            } else {\n                this.disconnectedFromDomain.emit();\n            }\n        } else if (!this.#_isConnected && forceDisconnect) {\n            // Close the WebRTC communications channel.\n            this.disconnectedFromDomain.emit();\n        }\n    }\n\n    /*@devdoc\n     *  Disconnects the user client from the Domain Server.\n     *  @param {string} reason - The reason for disconnecting.\n     *  @param {boolean} forceDisconnect - <code>true</code> if any partly open communications channels to the domain server\n     *      should be closed (e.g., if currently trying to connect), <code>false</code> if they need not be.\n     */\n    disconnect(reason: string, forceDisconnect = false): void {\n        // C++  void DomainHandler::disconnect(QString reason)\n        //      The extra forceDisconnect parameter is used to cause the WebRTC signaling channel to be closed.\n        if (this.#_isConnected) {\n            this.#sendDisconnectPacket();\n        }\n\n        // clear member variables that hold the connection state to a domain\n        this.#_uuid = new Uuid(Uuid.NULL);\n\n        // WEBRTC TODO: Address further C++ code.\n\n        // WEBRTC TODO: Should C++ clear _domainConnectionRefusals also?\n        this.#_domainConnectionRefusals.clear();  // Re-report any refusals if retry connecting to the same domain.\n\n        console.log(\"[networking] Disconnecting from domain server.\");\n        console.log(\"[networking] REASON:\", reason);\n        this.setIsConnected(false, forceDisconnect);\n    }\n\n    /*@devdoc\n     *  Gets whether the client's connection to the domain server has timed out &mdash; it hasn't been responding to\n     *  DomainConnectRequest and DomainListRequest packets for a while.\n     *  @returns {boolean} <code>true</code> if the client's connection to the domain server has timed out, <code>false</code>\n     *      if it hasn't.\n     */\n    // eslint-disable-next-line class-methods-use-this\n    checkInPacketTimeout(): boolean {\n        // C++  bool checkInPacketTimeout()\n\n        // WEBRTC TODO: Address further C++ code. And add an integration test.\n\n        return false;\n    }\n\n    /*@devdoc\n     *  Disconnects from the domain and restart the connection process.\n     *  @param {string} reason - The reason for the  reset.\n     */\n    softReset(reason: string): void {\n        // C++  void softReset(QString reason) {\n        console.log(\"[networking] Resetting current domain connection information.\");\n        this.disconnect(reason);\n\n        // WEBRTC TODO: Address further C++ code.\n\n    }\n\n\n    /*@devdoc\n     *  Processes a {@link PacketType(1)|DomainConnectionDenied} message received from the domain server.\n     *  @function DomainHandler.processDomainServerConnectionDeniedPacket\n     *  @type {Listener}\n     *  @param {ReceivedMessage} message - The DomainConnectionDenied message.\n     */\n    processDomainServerConnectionDeniedPacket = (message: ReceivedMessage): void => {\n        // C++  void DomainHandler::processDomainServerConnectionDeniedPacket(ReceivedMessage* message)\n\n        const info = PacketScribe.DomainConnectionDenied.read(message.getMessage());\n        const sanitizedExtraInfo = info.extraInfo.toLowerCase().startsWith(\"http\") ? \"\" : info.extraInfo;\n        console.warn(\"[networking] The domain-server denied a connection request: \", info.reasonMessage, \"extraInfo:\",\n            sanitizedExtraInfo);\n\n        if (!this.#_domainConnectionRefusals.has(info.reasonMessage)) {\n            this.#_domainConnectionRefusals.add(info.reasonMessage);\n            this.setRedirectErrorState(this.#_errorDomainURL, info.reasonMessage, info.reasonCode, info.extraInfo);\n        }\n\n        // WEBRTC TODO: Address further C++ code.\n\n    };\n\n\n    /*@devdoc\n     *  Sets the current domain's URL and pending ID.\n     *  @function DomainHandler.setURLAndID\n     *  @type {Slot}\n     *  @param {string} url - The domain's URL.\n     *  @param {Uuid} id - The domain's pending ID.\n     */\n    // eslint-disable-next-line\n    // @ts-ignore\n    setURLAndID = (domainURL: string, domainID: Uuid): void => {  // eslint-disable-line\n        // C++  void setURLAndID(QUrl domainURL, QUuid domainID)\n\n        // WEBRTC TODO: Address further C++ code.\n\n        if (this.#_domainURL !== domainURL) {\n            this.#hardReset(\"Changing domain URL\");\n\n            // WEBRTC TODO: Address further C++ code.\n\n            this.#_domainURL = domainURL;\n\n            // WEBRTC TODO: Address further C++ code.\n\n        }\n\n        // WEBRTC TODO: Address further C++ code.\n\n    };\n\n    /*@devdoc\n     *  Acts upon a domain connection refusal, triggering a\n     *  {@link DomainHandler.domainConnectionRefused|domainConnectionRefused} signal to be emitted.\n     *  @function DomainHandler.setRedirectErrorState\n     *  @type {Slot}\n     *  @param {string} errorUrl - Not currently used.\n     *  @param {string} reasonMessage - The reason that the client was refused connection to the domain.\n     *  @param {DomainHandler.ConnectionRefusedReason} reasonCode - The reason code for the refusal.\n     *  @param {string} extraInfo - Extra information about the refusal.\n     */\n    // eslint-disable-next-line\n    // @ts-ignore\n    setRedirectErrorState = (errorUrl: string, reasonMessage = \"\", reasonCode = -1, extraInfo = \"\"): void => {\n        // C++  void setRedirectErrorState(QUrl errorUrl, QString reasonMessage = \"\", int reasonCode = -1,\n        //          const QString& extraInfo = \"\")\n\n        // WEBRTC TODO: Address further C++ code.\n        this.#_domainConnectionRefused.emit(reasonMessage, reasonCode, extraInfo);\n    };\n\n\n    /*@devdoc\n     *  Triggered when the client connects to then domain.\n     *  @function DomainHandler.connectedToDomain\n     *  @param {string} domainURL - The domain's URL.\n     *  @returns {Signal}\n     */\n    get connectedToDomain(): Signal {\n        // C++  void connectedToDomain(QUrl domainURL)\n        return this.#_connectedToDomain;\n    }\n\n    /*@devdoc\n     *  Triggered when the client disconnects from the domain.\n     *  @function DomainHandler.disconnectedFromDomain\n     *  @returns {Signal}\n     */\n    get disconnectedFromDomain(): Signal {\n        // C++  void disconnectedFromDomain()\n        return this.#_disconnectedFromDomain;\n    }\n\n    /*@devdoc\n     *  Triggered when the client is refused connection to a domain.\n     *  @function DomainHandler.domainConnectionRefused\n     *  @param {string} reasonMessage - The reason that the client was refused connection to the domain.\n     *  @param {DomainHandler.ConnectionRefusedReason} reasonCode - The reason code for the refusal.\n     *  @param {string} extraInfo - Extra information about the refusal.\n     *  @returns {Signal}\n     */\n    get domainConnectionRefused(): Signal {\n        // C++  void domainConnectionRefused(QString reasonMessage, int reasonCode, const QString& extraInfo);\n        return this.#_domainConnectionRefused;\n    }\n\n\n    #sendDisconnectPacket(): void {\n        // C++  void sendDisconnectPacket()\n        const packet = PacketScribe.DomainDisconnectRequest.write();\n        this.#_nodeList.sendUnreliablePacket(packet, this.#_sockAddr);\n    }\n\n    #hardReset(reason: string): void {\n        // C++  void DomainHandler::hardReset(QString reason)\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this.softReset(reason);\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this.#_domainURL = \"\";\n        this.#_sockAddr = new SockAddr();\n        this.#_domainConnectionRefusals.clear();\n\n        // WEBRTC TODO: Address further C++ code.\n    }\n\n}\n\nexport default DomainHandler;\n","//\n//  FingerprintUtils.ts\n//\n//  Created by David Rowe on 14 Jun 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport Uuid from \"../shared/Uuid\";\n\n\n/*@devdoc\n *  The <code>FingerPrintUtils</code> namespace identifies the computer running this code with an anonymous fingerprint.\n *  <p>C++: <code>FingerprintUtils</code>\n *  @namespace FingerprintUtils\n */\nconst FingerprintUtils = new class {\n    // C++  FingerprintUtils\n\n    // Dummy value for now.\n    // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n    readonly #_machineFingerprint = new Uuid(213897485297723222451865858523432009088n);\n\n    // WEBRTC TODO: Address further C++ code.\n\n    /*@devdoc\n     *  Gets the machine fingerprint.\n     *  @function FingerprintUtils.getMachineFingerprint\n     *  @returns {Uuid} Machine fingerprint.\n     */\n    getMachineFingerprint() {\n        // C++  QUuid getMachineFingerprint()\n\n        // WEBRTC TODO: Address further C++ code.\n\n        return this.#_machineFingerprint;\n    }\n\n}();\n\nexport default FingerprintUtils;\n","//\n//  ContextManager.ts\n//\n//  Created by David Rowe on 7 Aug 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\n\ntype DependencyType = {\n    contextItemType: string,\n    new(...args: any[]): object  // eslint-disable-line @typescript-eslint/no-explicit-any, @typescript-eslint/ban-types\n};\n\ntype DependencyObject = {\n    //\n};\n\n// A context, mapping class names to class instances.\ntype Context = Map<string, DependencyObject>;\n\n// All the contexts.\ntype ContextTable = Array<Context>;\n\n\n/*@devdoc\n *  The <code>ContextManager</code> namespace manages sets of related objects. Such a set forms a \"context\" and may be accessed\n *  globally via its context ID.\n *  <p>A context is used to manage the \"global\" objects particular to a domain server connection, so that the context objects\n *  can be used in the different APIs while keeping those for different domain server connections separate.</p>\n *  <p>C++: N/A</p>\n *  @namespace ContextManager\n */\nconst ContextManager = new class {\n    // C++  N/A but similar to DependencyManager - ContextManager manages sets of dependencies.\n\n    /*@devdoc\n     *  In order to be added to a context, the class must include a static <code>contextItemType</code> property.\n     *  <p>In theory, the <code>&lt;class&gt;.name</code> should be able to be used, however, upon minification and packaging\n     *  this property can become unavailable. Hence the need for the <code>contextItemType</code> property.</p>\n     *  @typedef {class} ContextManager.DependencyType\n     *  @property {string} contextItemType - A static property containing the context item's type name. This should be the same\n     *      as the class name.\n     *      <p><em>Static.</em></p>\n     */\n\n\n    #_contexts: ContextTable = [];\n\n\n    /*@devdoc\n     *  Creates a new context.\n     *  @function ContextManager.createContext\n     *  @returns {number} The ID of the context created.\n     */\n    createContext(): number {\n        // C++  N/A\n        this.#_contexts.push(new Map());\n        return this.#_contexts.length - 1;\n    }\n\n    /*@devdoc\n     *  Gets an object from a context.\n     *  @function ContextManager.get\n     *  @param {number} contextID - The ID of the context.\n     *  @param {ContextManager.DependencyType} dependencyType - The type of the object to get.\n     *  @returns {object} The requested object.\n     *  @throws Throws an error if the context ID is invalid or an object of the specified type cannot be found in the context.\n     */\n    // Errors are thrown because this is internal code and it is reasonable to expect that it is correctly used.\n    get(contextID: number, dependencyType: DependencyType): DependencyObject {\n        const context = this.#_contexts[contextID];\n        if (!context) {\n            throw Error(`ContextManager.get(): Cannot find context ${contextID}!`);\n        }\n        const contextItemType = dependencyType.contextItemType;\n        if (typeof contextItemType !== \"string\" || contextItemType.length === 0) {\n            throw Error(`ContextManager.set(): Cannot find an object without a valid contextItemType property!`);\n        }\n        const dependencyObject = context.get(contextItemType);\n        if (!dependencyObject) {\n            throw Error(`ContextManager.get(): Cannot find object of type ${contextItemType}!`);\n        }\n        return dependencyObject;\n    }\n\n    /*@devdoc\n     *  Creates and adds a new object to a context.\n     *  @function ContextManager.set\n     *  @param {number} contextID - The ID of the context.\n     *  @param {ContextManager.DependencyType} dependencyType - The type of the new object to create and add. The new object is\n     *      created using using <code>new()</code>.\n     *  @param {...any} dependencyParams - Optional parameters to use when creating the new object.\n     *  @throws Throws an error of the context ID is invalid or an object of the specified type already exists in the context.\n     */\n    // Errors are thrown because this is internal code and it is reasonable to expect that it is correctly used.\n    set(contextID: number, dependencyType: DependencyType, ...args: unknown[]): void {\n        const context = this.#_contexts[contextID];\n        if (!context) {\n            throw Error(`ContextManager.set(): Cannot find context ${contextID}!`);\n        }\n        const contextItemType = dependencyType.contextItemType;\n        if (typeof contextItemType !== \"string\" || contextItemType.length === 0) {\n            throw Error(`ContextManager.set(): Cannot add an object without a valid contextItemType property!`);\n        }\n        if (context.get(contextItemType) !== undefined) {\n            throw Error(`ContextManager.set(): Cannot add another object of type ${contextItemType}!`);\n        }\n        const newDependency = new dependencyType(...args);  // eslint-disable-line new-cap\n        context.set(contextItemType, newDependency);\n    }\n\n}();\n\nexport default ContextManager;\n","//\n//  PacketReceiver.ts\n//\n//  Created by David Rowe on 8 Jun 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport NLPacket from \"./NLPacket\";\nimport Node from \"./Node\";\nimport NodeList from \"./NodeList\";\nimport ReceivedMessage from \"./ReceivedMessage\";\nimport Packet from \"./udt/Packet\";\nimport { PacketTypeValue } from \"./udt/PacketHeaders\";\nimport ContextManager from \"../shared/ContextManager\";\n\n\ntype Listener = (message: ReceivedMessage, sendingNode?: Node) => void;\n\ntype ListenerReference = {\n    listener: Listener,\n    sourced: boolean,\n    deliverPending: boolean  // Augment the listener reference instead of encapsulating it per C++.\n};\n\n\n/*@devdoc\n *  The <code>PacketReceiver</code> class maps received packets 1 : 1 with \"listener\" methods, and invokes the appropriate\n *  listener when called upon to do so for a received packet.\n *  <p>C++: <code>PacketReceiver : public QObject</code>\n *  @class PacketReceiver\n *  @param {number} contextID - The {@link ContextManager} context ID.\n */\nclass PacketReceiver {\n    // C++  PacketReceiver : public QObject\n\n    /*@devdoc\n     *  A method that processes a received message of a particular type.\n     *  @typedef {Slot} Listener\n     *  @param {ReceivedMessage} message - The received message.\n     *  @param {Node} [sendingNode] - The sending node if a sourced message, <code>undefined</code> if an unsourced message.\n     */\n\n    /*@devdoc\n     *  A reference to a packet listener method along with an indication of whether the listener is for sourced messages or\n     *  unsourced messages. A sourced message is one which includes the ID of the node it was sent from.\n     *  @typedef {object} PacketReceiver.ListenerReference\n     *  @property {PacketReceiver.Listener} listener - The listener method.\n     *  @property {boolean} sourced - <code>true</code> if the listener handles sourced messages, <code>false</code> if it\n     *      handles unsourced messages.\n     *  @property {boolean} deliverPending - <code>true</code> if packets should be delivered to the listener as soon as they\n     *      are received, <code>false</code> if packets should be accumulated into a multi-packet message and the message\n     *      be delivered to the listener when complete.\n     */\n\n\n    /*@devdoc\n     *  Creates a reference to a listener method, marking the method as being for unsourced packets.\n     *  <p>Note: If the listener uses <code>this</code> then the correct <code>this</code> must be bound to it, e.g., by\n     *  declaring the function as an arrow function or applying <code>.bind(this)</code> in the constructor of the class that\n     *  implements the listener function.</p>\n     *  <p><em>Static</em></p>\n     *  @static\n     *  @param {Listener} listener - The listener method that will handle a particular type of packet.\n     *  @returns {PacketReceiver.ListenerReference} A reference to the listener method.\n     */\n    static makeUnsourcedListenerReference(listener: Listener): ListenerReference {\n        // C++  ListenerReference* makeUnsourcedListenerReference(QObject*, function*(ReceivedMessage*))\n        // The proper deliverPending property value is set when the listener is registered.\n        return { listener, sourced: false, deliverPending: false };\n    }\n\n    /*@devdoc\n     *  Creates a reference to a listener method, marking the method as being for sourced packets.\n     *  <p>Note: If the listener uses <code>this</code> then the correct <code>this</code> must be bound to it, e.g., by\n     *  declaring the function as an arrow function or applying <code>.bind(this)</code> in the constructor of the class that\n     *  implements the listener function.</p>\n     *  <p><em>Static</em></p>\n     *  @static\n     *  @param {Listener} listener - The listener method that will handle a particular type of packet.\n     *  @returns {PacketReceiver.ListenerReference} A reference to the listener method.\n     */\n    static makeSourcedListenerReference(listener: Listener): ListenerReference {\n        // C++  ListenerReference* makeSourcedListenerReference(QObject*, function*(ReceivedMessage*, Node*))\n        return { listener, sourced: true, deliverPending: false };\n    }\n\n\n    #_contextID;\n\n    #_messageListenerMap: Map<PacketTypeValue, ListenerReference> = new Map();\n\n\n    constructor(contextID: number) {\n        this.#_contextID = contextID;\n    }\n\n\n    /*@devdoc\n     *  Registers a listener function to invoke for a particular {@link PacketType(1)|PacketType}.\n     *  @param {PacketType} packetType - The type of packet.\n     *  @param {PacketReceiver.ListenerReference} listener - The reference to the listener function.\n     *  @param {boolean} deliverPending - <code>true</code> if packets should be delivered to the listener as soon as they\n     *      are received, <code>false</code> if packets should be accumulated into a multi-packet message and the message\n     *      be delivered to the listener when complete.\n     *  @returns {boolean} <code>true</code> if the listener was successfully registered, <code>false</code> if it wasn't.\n     */\n    registerListener(packetType: PacketTypeValue, listener: ListenerReference, deliverPending = false): boolean {\n        // C++  bool registerListener(PacketType type, const ListenerReferencePointer& listener, bool deliverPending = false);\n\n        // WEBRTC TODO: Address further C++ code.\n\n        listener.deliverPending = deliverPending;\n\n        this.#_messageListenerMap.set(packetType, listener);\n        return true;\n\n        // WEBRTC TODO: Address further C++ code.\n    }\n\n    /*@devdoc\n     *  Invokes the listener registered for an {@link NLPacket} per its PacketType.\n     *  @function PacketReceiver.handleVerifiedPacket\n     *  @type {Slot}\n     *  @param {Packet} packet - The packet. It is treated as an NLPacket.\n     */\n    handleVerifiedPacket = (packet: Packet): void => {\n        // C++  void handleVerifiedPacket(Packet* packet);\n\n        // WEBRTC TODO: This method is incorrectly named - it handles both verified and unverified packets?\n\n        // WEBRTC TODO: Address further code.\n\n        const nlPacket = NLPacket.fromBase(packet);\n        const receivedMessage = new ReceivedMessage(nlPacket);\n        this.#handleVerifiedMessage(receivedMessage, true);\n    };\n\n\n    // eslint-disable-next-line\n    // @ts-ignore\n    #handleVerifiedMessage(receivedMessage: ReceivedMessage, justReceived: boolean): void {  // eslint-disable-line\n        // C++  void handleVerifiedMessage(ReceivedMessage* receivedMessage, bool justReceived)\n\n        // WEBRTC TODO: This method is incorrectly named - it handles both verified and unverified packets?\n\n        const messageListener = this.#_messageListenerMap.get(receivedMessage.getType());\n        if (messageListener) {\n\n            // WEBRTC TODO: Address further code.\n\n            if (messageListener.sourced) {\n                let matchingNode = null;\n                if (receivedMessage.getSourceID() !== Node.NULL_LOCAL_ID) {\n                    const nodeList = ContextManager.get(this.#_contextID, NodeList) as NodeList;\n                    matchingNode = nodeList.nodeWithLocalID(receivedMessage.getSourceID());\n                }\n                if (matchingNode) {\n                    messageListener.listener(receivedMessage, matchingNode);\n                } else {\n                    console.error(\"Could not find node for message type:\", receivedMessage.getType());\n                    // WEBRTC TODO: Add string name of packet type to message.\n                }\n            } else {\n                messageListener.listener(receivedMessage);\n            }\n\n        } else {\n            console.error(\"Could not find listener for message type:\", receivedMessage.getType());\n            // WEBRTC TODO: Add string name of packet type to message.\n\n            // WEBRTC TODO: Address further code.\n\n        }\n    }\n\n}\n\nexport default PacketReceiver;\n","//\n//  ReceivedMessage.ts\n//\n//  Created by David Rowe on 10 Jun 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport NLPacket from \"./NLPacket\";\nimport SockAddr from \"./SockAddr\";\nimport Packet from \"./udt/Packet\";\nimport { PacketTypeValue } from \"./udt/PacketHeaders\";\n\n\n/*@devdoc\n *  The <code>ReceivedMessage</code> class provides information on a Vircadia protocol message received via one or more Vircadia\n *  protocol packets.\n *  <p>The likes of C++'s <code>readPrimitive()</code> and <code>readString()</code> are not implemented because it's better to\n *  in-line such methods in the packet readers/writers for packet handling speed.</p>\n *  <p>C++: <code>ReceivedMessage : public QObject </code>\n *  @class ReceivedMessage\n *  @param {NLPacket} packet - The first (and possibly only) packet that forms the message.\n */\nclass ReceivedMessage {\n    // C++  ReceivedMessage : public QObject\n\n    #_messageData;\n\n\n    constructor(packet: NLPacket) {\n        // C++  ReceivedMessage(NLPacket& packet)\n        this.#_messageData = packet.getMessageData();  // Reference the data already collected; no need to copy it.\n        this.#_messageData.packetType = this.#_messageData.type;\n        this.#_messageData.numPackets = 1;\n        this.#_messageData.isComplete = this.#_messageData.packetPosition === Packet.PacketPosition.ONLY;\n        this.#_messageData.firstPacketReceiveTime = this.#_messageData.receiveTime;\n\n        // WEBRTC TODO: May need to add equivalent of C++ ReceivedMessage::_data that contains just the payload.\n        //              And as part of this, implement the payload start etc. members and calculations.\n\n    }\n\n\n    /*@devdoc\n     *  Gets the type of the message.\n     *  @returns {PacketType} The type of the packet(s) used to form the message.\n     */\n    getType(): PacketTypeValue {\n        // C++  PacketType getType()\n        return this.#_messageData.packetType;\n    }\n\n    /*@devdoc\n     *  Gets the sender's address.\n     *  @returns {SockAddr} The sender's address if known, a null SockAddr if not known.\n     */\n    getSenderSockAddr(): SockAddr {\n        // C++  SockAddr getSenderSockAddr()\n        return this.#_messageData.senderSockAddr ? this.#_messageData.senderSockAddr : new SockAddr();\n    }\n\n    /*@devdoc\n     *  Gets the local ID of the node that is the source of the message.\n     *  @returns {number} The ID of the node that is the source of the packet if known (i.e., it is a sourced message),\n     *      {@link Node|Node.NULL_LOCAL_ID} if not known.\n     */\n    getSourceID(): number {\n        return this.#_messageData.sourceID;\n    }\n\n    /*@devdoc\n     *  Gets the raw message data, excluding the Packet and NLPacket protocol headers.\n     *  @returns {DataView} The raw message data.\n     */\n    getMessage(): DataView {\n        // C++  QByteArray getMessage()\n        return new DataView(this.#_messageData.data.buffer, this.#_messageData.dataPosition);\n    }\n\n}\n\nexport default ReceivedMessage;\n","//\n//  WebRTCSignalingChannel.ts\n//\n//  Created by David Rowe on 17 May 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport { NodeTypeValue } from \"../NodeType\";\n\n\ntype EventCallback = (event: Event) => void;\ntype MessageEventCallback = (data: SignalingMessage) => void;\ntype CloseEventCallback = (event: CloseEvent) => void;\ntype SignalingMessage = { to: NodeTypeValue, from: NodeTypeValue, data: Record<string, unknown>, echo: boolean };\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype JSONParseResult = Record<string, unknown> | Array<any> | string | number | boolean | null;\n\n\n/*@devdoc\n *  The <code>WebRTCSignalingChannel</code> class provides a WebRTC signaling channel for establishing WebRTC data channels with\n *  the domain server and assignment clients.\n *  A single signaling channel is used for establishing all the individual WebRTC data channels between the web client and\n *  each of the domain server and its assignment clients.\n *  <p>A WebSocket is used for the connection and the API is similar to the WebSocket API.</p>\n *  <p>C++: Akin to <code>WebRTCSignalingServer</code> though significantly different.\n *\n *  @class WebRTCSignalingChannel\n *  @param {string} websocketURL - The URL of the domain server's WebRTC signaling channel WebSocket.\n *\n *  @property {WebRTCSignalingChannel.ReadyState} CONNECTING=0 - The connection is opening. <em>Static.</em> <em>Read-only.</em>\n *      <p><em>Static</em></p>\n *      @static\n *  @property {WebRTCSignalingChannel.ReadyState} OPEN=1 - The connection is open. <em>Static.</em> <em>Read-only.</em>\n *      <p><em>Static</em></p>\n *      @static\n *  @property {WebRTCSignalingChannel.ReadyState} CLOSING=2 - The connection is closing. <em>Static.</em> <em>Read-only.</em>\n *      <p><em>Static</em></p>\n *      @static\n *  @property {WebRTCSignalingChannel.ReadyState} CLOSED=3 - The connection is closed. <em>Static.</em> <em>Read-only.</em>\n *      <p><em>Static</em></p>\n *      @static\n *  @property {WebRTCSignalingChannel.ReadyState} readyState - The current state of the signaling channel connection.\n *      <em>Read-only.</em>\n *\n *  @property {WebRTCSignalingChannel~onOpenCallback} onopen - Sets a single function to be called when the signaling channel\n *      opens. <em>Write-only.</em>\n *  @property {WebRTCSignalingChannel~onMessageCallback} onmessage - Sets a single function to be called when a message is\n *      received. <em>Write-only.</em>\n *  @property {WebRTCSignalingChannel~onErrorCallback} onerror - Sets a single function to be called when an error occurs.\n *      <em>Write-only.</em>\n *  @property {WebRTCSignalingChannel~onCloseCallback} onclose - Set s a single function to be called when the signaling channel\n *      closes. <em>Write-only.</em>\n */\nclass WebRTCSignalingChannel {\n    // C++  Related to WebRTCSignalingServer but significantly different.\n\n    /*@devdoc\n     *  The signaling messages are sent and received as JSON objects, with either a WebRTC signaling <code>data</code> payload\n     *  or an </code>echo</code> request. The domain server or assignment client bounces echo requests back for testing\n     *  purposes.\n     *  @typedef {object} WebRTCSignalingChannel.SignalingMessage\n     *  @property {NodeType} [to] - If sending to the domain server, the node that the message is for.\n     *  @property {NodeType} [from] - If receiving from the domain server, the node that the message is from.\n     *  @property {object} [data] - A WebRTC signaling payload.\n     *  @property {string} [echo]- An echo request or response.\n     */\n\n    /*@devdoc\n     *  Called when the signaling channel opens.\n     *  @callback WebRTCSignalingChannel~onOpenCallback\n     *  @param {Event} event - DOM event details.\n     *  @memberOf WebRTCSignalingChannel\n     */\n\n    /*@devdoc\n     *  Called when the signaling channel closes.\n     *  @callback WebRTCSignalingChannel~onCloseCallback\n     *  @param {number} code - The WebSocket close code provided by the server.\n     *  @param {string} reason - The WebSocket close reason provided by the server.\n     *  @param {boolean} wasClean - <code>true</codE> if the WebSocket connection closed cleanly, <code>false</code> if it\n     *      didn't.\n     */\n\n    /*@devdoc\n     *  Called when a WebRTC signaling message is received.\n     *  @callback WebRTCSignalingChannel~onMessageCallback\n     *  @param {WebRTCSignalingChannel.SignalingMessage} message - The WebRTC signaling message received.\n     */\n\n    /*@devdoc\n     *  Called when there's an error in the signaling channel.\n     *  @callback WebRTCSignalingChannel~onErrorCallback\n     *  @param {Event} event - DOM event details.\n     */\n\n\n    /*@devdoc\n     *  The state of a WebRTCSignalingChannel connection.\n     *  <table>\n     *      <thead>\n     *          <tr><th>Name</th><th>Value</th><th>Description</th></tr>\n     *      </thead>\n     *      <tbody>\n     *          <tr><td>CONNECTING</td><td>0</td><td>The connection is opening.</td></tr>\n     *          <tr><td>OPEN</td><td>1</td><td>The connection is open.</td></tr>\n     *          <tr><td>CLOSING</td><td>2</td><td>The connection is closing.</td></tr>\n     *          <tr><td>CLOSED</td><td>3</td><td>The connection is closed.</td></tr>\n     *      </tbody>\n     *  </table>\n     *  @typedef {number} WebRTCSignalingChannel.ReadyState\n     */\n    static readonly CONNECTING = 0;\n    static readonly OPEN = 1;\n    static readonly CLOSING = 2;\n    static readonly CLOSED = 3;\n\n\n    #_websocket: WebSocket | null = null;\n\n\n    constructor(websocketURL: string) {\n        if (typeof websocketURL !== \"string\" || websocketURL === \"\") {\n            console.error(\"WebRTCSignalingChannel: Invalid WebSocket URL!\");\n        }\n        try {\n            this.#_websocket = new WebSocket(websocketURL);\n        } catch (e) {\n            this.#_websocket = null;\n            // WEBRTC TODO: Surface error to DomainServer and assignment client APIs.\n        }\n    }\n\n\n    get readyState(): number {\n        return this.#_websocket ? this.#_websocket.readyState : WebRTCSignalingChannel.CLOSED;\n    }\n\n    set onopen(callback: EventCallback) {\n        if (this.#_websocket) {\n            this.#_websocket.onopen = callback;\n        }\n    }\n\n    set onmessage(callback: MessageEventCallback) {\n        if (this.#_websocket) {\n            this.#_websocket.onmessage = function (event) {\n                WebRTCSignalingChannel.#handleMessage(event, callback);\n            };\n        }\n    }\n\n    set onclose(callback: CloseEventCallback) {\n        if (this.#_websocket) {\n            this.#_websocket.onclose = callback;\n        }\n    }\n\n    set onerror(callback: EventCallback) {\n        if (this.#_websocket) {\n            this.#_websocket.onerror = callback;\n        }\n    }\n\n\n    /*@devdoc\n     *  Sets a function to be called upon the occurrence of an <code>\"open\"</code>, <code>\"message\"</code>,\n     *  <code>\"error\"</code>, or <code>\"close\"</code> event.\n     *  Note: This enables you to add more than one function to be called upon an event, unlike the <code>onopen</code> etc.\n     *  properties.\n     *  @param {string} eventName - <code>\"open\"</code>, <code>\"message\"</code>, <code>\"error\"</code>, or <code>\"close\"</code>.\n     *  @param {WebRTCSignalingChannel~onOpenCallback|WebRTCSignalingChannel~onMessageCallback\n     *      |WebRTCSignalingChannel~onErrorCallback|WebRTCSignalingChannel~onCloseCallback} callback - The function to be called\n     *      each time the event occurs.\n     */\n    addEventListener(eventName: string, callback: EventCallback | MessageEventCallback | CloseEventCallback): void {\n        if (this.#_websocket) {\n            this.#_websocket.addEventListener(eventName, function (event) {\n                switch (event.type) {\n                    case \"open\":\n                    case \"error\":\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        <EventCallback><unknown>callback(<any>event);\n                        break;\n                    case \"message\":\n                        WebRTCSignalingChannel.#handleMessage(<MessageEvent>event, <MessageEventCallback>callback);\n                        break;\n                    case \"close\":\n                    default:\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        <EventCallback><unknown>callback(<any>event);\n                        break;\n                }\n            });\n        }\n    }\n\n    /*@devdoc\n     *  Sends a message to the domain server or an assignment client on the signaling channel.\n     *  <p>Note: The domain server or assignment client bounces echo requests back for testing purposes.</p>\n     *  @param {WebRTCSignalingChannel.SignalingMessage} message - The message to send.\n     *  @returns {boolean} <code>true</code> if the message was queued to be sent, <code>false</code) if the message wasn't\n     *      queued (e.g., because the signaling channel isn't open).\n     */\n    send(message: object): boolean {  // eslint-disable-line @typescript-eslint/ban-types\n        if (this.#_websocket && this.readyState === WebRTCSignalingChannel.OPEN) {\n            this.#_websocket.send(JSON.stringify(message));\n            return true;\n        }\n\n        console.error(\"WebRTCSignalingChannel: Channel not open for sending!\");\n        if (this.#_websocket && this.#_websocket.onerror) {\n            this.#_websocket.onerror(<Event><unknown>\"Channel not open for sending!\");\n        }\n        return false;\n    }\n\n    /*@devdoc\n     *  Closes the signaling channel.\n     */\n    close(): void {\n        if (this.#_websocket) {\n            this.#_websocket.close();\n            // WEBRTC FIXME: Set _websocket = null once the WebSocket has closed.\n        }\n    }\n\n\n    static #handleMessage(event: MessageEvent, callback: MessageEventCallback): void {\n        let success = false;\n        if (typeof event.data === \"string\") {\n            try {\n                const json = <JSONParseResult>JSON.parse(event.data);\n                if (json && json instanceof Object && !(json instanceof Array)) {\n                    callback(<SignalingMessage>json);\n                    success = true;\n                }\n            } catch (e) {\n                //\n            }\n        }\n        if (!success) {\n            console.error(\"WebRTCSignalingChannel: Invalid message received!\");\n        }\n    }\n\n}\n\nexport default WebRTCSignalingChannel;\nexport type { SignalingMessage };\n","//\n//  WebRTCDataChannel.ts\n//\n//  Created by David Rowe on 21 May 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport NodeType, { NodeTypeValue } from \"../NodeType\";\nimport WebRTCSignalingChannel, { SignalingMessage } from \"./WebRTCSignalingChannel\";\n\n\ntype OnOpenCallback = () => void;\ntype OnMessageCallback = (data: ArrayBuffer) => void;\ntype OnCloseCallback = () => void;\ntype OnErrorCallback = (message: string) => void;\n\n\n/*@devdoc\n *  The <code>WebRTCDataChannel</code> class provides a WebRTC data channel used for Vircadia protocol communications with a\n *  domain server or assignment client. It uses a {@link WebRTCSignalingChannel} in the process of establishing the WebRTC\n *  connection.\n *  <p>The API is similar to the WebRTCSignalingChannel and WebSocket APIs.</p>\n *  <p>C++: Akin to <code>WebRTCDataChannels</code> though significantly different.\n *\n *  @class WebRTCDataChannel\n *  @param {NodeType} nodeType - The node type to connect to.\n *  @param {WebRTCSignalingChannel} signalingChannel - The WebRTCSignalingChannel to use in establishing the WebRTC connection\n *      and data channel.\n *\n *  @property {WebRTCDataChannel.ReadyState} CONNECTING=0 - The connection is opening.\n *      <em>Static. Read-only.</em>\n *  @property {WebRTCDataChannel.ReadyState} OPEN=1 - The connection is open.\n *      <em>Static. Read-only.</em>\n *  @property {WebRTCDataChannel.ReadyState} CLOSING=2 - The connection is closing.\n *      <em>Static. Read-only.</em>\n *  @property {WebRTCDataChannel.ReadyState} CLOSED=3 - The connection is closed.\n *      <em>Static. Read-only.</em>\n *  @property {WebRTCDataChannel.ReadyState} readyState - The current state of the data channel connection.\n *      <em>Read-only.</em>\n *\n *  @property {number} id -  The data channel ID. The SDK assigns a unique number to each WebRTC data channel, starting at\n *      <code>1</code>.\n *\n *  @property {WebRTCDataChannel~onOpenCallback} onopen - Sets a single function to be called when the data channel opens.\n *      <em>Write-only.</em>\n *  @property {WebRTCDataChannel~onMessageCallback} onmessage - Sets a single function to be called when a message is\n *      received.\n *      <em>Write-only.</em>\n *  @property {WebRTCDataChannel~onErrorCallback} onerror - Sets a single function to be called when an error occurs.\n *      <em>Write-only.</em>\n *  @property {WebRTCDataChannel~onCloseCallback} onclose - Set s a single function to be called when the data channel closes.\n *      <em>Write-only.</em>\n */\nclass WebRTCDataChannel {\n    // C++  Related to WebRTCDataChannels but significantly different.\n\n    /*@devdoc\n     *  Called when the data channel opens.\n     *  @callback WebRTCDataChannel~onOpenCallback\n     */\n\n    /*@devdoc\n     *  Called when a message is received.\n     *  @callback WebRTCDataChannel~onMessageCallback\n     *  @param {ArrayBuffer} message - The message received.\n     */\n\n    /*@devdoc\n     *  Called when the data channel closes.\n     *  @callback WebRTCDataChannel~onCloseCallback\n     */\n\n    /*@devdoc\n     *  Called when there's an error in the data channel.\n     *  @callback WebRTCDataChannel~onErrorCallback\n     *  @param {string} message - The error message.\n     */\n\n\n    /*@devdoc\n     *  The state of a WebRTCDataChannel connection.\n     *  <table>\n     *      <thead>\n     *          <tr><th>Name</th><th>Value</th><th>Description</th></tr>\n     *      </thead>\n     *      <tbody>\n     *          <tr><td>CONNECTING</td><td>0</td><td>The connection is opening.</td></tr>\n     *          <tr><td>OPEN</td><td>1</td><td>The connection is open.</td></tr>\n     *          <tr><td>CLOSING</td><td>2</td><td>The connection is closing.</td></tr>\n     *          <tr><td>CLOSED</td><td>3</td><td>The connection is closed.</td></tr>\n     *      </tbody>\n     *  </table>\n     *  @typedef {number} WebRTCDataChannel.ReadyState\n     */\n    static readonly CONNECTING = 0;\n    static readonly OPEN = 1;\n    static readonly CLOSING = 2;\n    static readonly CLOSED = 3;\n\n    static readonly #CONFIGURATION = {\n        // WEBRTC TODO: Make configurable in the API.\n        iceServers: [{ urls: \"stun:ice.vircadia.com:7337\" }]\n    };\n\n\n    #_nodeType = NodeType.Unassigned;\n    #_signalingChannel: WebRTCSignalingChannel | null = null;\n\n    #_peerConnection: RTCPeerConnection | null = null;\n    #_dataChannel: RTCDataChannel | null = null;\n    #_dataChannelID = 0;\n    #_readyState = WebRTCDataChannel.CLOSED;\n\n    #_onopenCallback: OnOpenCallback | null = null;\n    #_onmessageCallback: OnMessageCallback | null = null;\n    #_oncloseCallback: OnCloseCallback | null = null;\n    #_onerrorCallback: OnErrorCallback | null = null;\n\n\n    constructor(nodeType: NodeTypeValue, signalingChannel: WebRTCSignalingChannel) {\n        this.#_nodeType = nodeType;\n        this.#_signalingChannel = signalingChannel;\n        this.#_readyState = WebRTCDataChannel.CONNECTING;\n        setTimeout(() => {\n            // Defer connecting by scheduling it in the event queue, so that WebRTCDataChannel event handlers can be hooked up\n            // immediately after the object is created.\n            this.#connect();\n        }, 0);\n    }\n\n\n    get nodeType(): NodeTypeValue {\n        return this.#_nodeType;\n    }\n\n    get readyState(): number {\n        return this.#_readyState;\n    }\n\n    set id(id: number) {\n        this.#_dataChannelID = id;\n    }\n\n    get id(): number {\n        return this.#_dataChannelID;\n    }\n\n    set onopen(callback: OnOpenCallback) {\n        this.#_onopenCallback = callback;\n    }\n\n    set onmessage(callback: OnMessageCallback) {\n        this.#_onmessageCallback = callback;\n    }\n\n    set onclose(callback: OnCloseCallback) {\n        this.#_oncloseCallback = callback;\n    }\n\n    set onerror(callback: OnErrorCallback) {\n        this.#_onerrorCallback = callback;\n    }\n\n\n    /*@devdoc\n     *  <strong class=\"important\">Not implemented.</strong>\n     *  @param {string} eventName - <code>\"open\"</code>, <code>\"message\"</code>, <code>\"error\"</code>, or <code>\"close\"</code>.\n     *  @param {WebRTCDataChannel~onOpenCallback|WebRTCDataChannel~onMessageCallback|WebRTCDataChannel~onCloseCallback\n     *      |WebRTCDataChannel~onErrorCallback} callback\n     */\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    // eslint-disable-next-line\n    addEventListener(event: string, callback: OnOpenCallback | OnMessageCallback | OnCloseCallback | OnErrorCallback): void {\n        const errorMessage = \"WebRTCDataChannel.addEventListener(): Not implemented!\";\n        console.error(errorMessage);\n        if (this.#_onerrorCallback) {\n            this.#_onerrorCallback(errorMessage);\n        }\n    }\n\n    /*@devdoc\n     *  Sends a message to the domain server or an assignment client on the data channel.\n     *  <p>Note: The domain server or assignment client bounces echo requests &mdash; a message starting with\n     *  <code>\"echo:\"</code> &mdash; back for testing purposes.</p>\n     *  @param {ArrayBuffer|ArrayBufferView|Blob|string} message - The message to send.\n     *  @returns {boolean} <code>true</code> if the message was sent, <code>false</code) if the message wasn't sent (e.g.,\n     *      because the signaling channel isn't open).\n     */\n    send(message: ArrayBuffer | ArrayBufferView | Blob | string): boolean {\n        if (this.#_dataChannel && this.#_readyState === WebRTCDataChannel.OPEN) {\n            this.#_dataChannel.send(<any>message);  // eslint-disable-line @typescript-eslint/no-explicit-any\n            return true;\n        }\n\n        const errorMessage = \"WebRTCDataChannel: Data channel not open for sending!\";\n        console.error(errorMessage);\n        if (this.#_onerrorCallback) {\n            this.#_onerrorCallback(errorMessage);\n        }\n        return false;\n    }\n\n    /*@devdoc\n     *  Closes the data channel.\n     */\n    close(): void {\n        this.#_readyState = WebRTCDataChannel.CLOSING;\n        if (this.#_dataChannel) {\n            this.#_dataChannel.close();\n        }\n        if (this.#_peerConnection) {\n            this.#_peerConnection.close();\n        } else {\n            this.#_readyState = WebRTCDataChannel.CLOSED;\n            this.#_dataChannel = null;\n            this.#_peerConnection = null;\n        }\n    }\n\n\n    // Starts making a WebRTC connection.\n    #start(): void {\n\n        // Create new peer connection object.\n        this.#_peerConnection = new RTCPeerConnection(WebRTCDataChannel.#CONFIGURATION);\n\n        // Send ICE candidates to the domain server.\n        this.#_peerConnection.onicecandidate = ({ candidate }) => {\n            if (candidate  // The candidate is sometimes null for unknown reasons; don't send this.\n                && this.#_signalingChannel && this.#_signalingChannel.readyState === WebRTCSignalingChannel.OPEN) {\n                this.#_signalingChannel.send({ to: this.#_nodeType, data: candidate });\n            }\n        };\n\n        // Generate an offer.\n        this.#_peerConnection.onnegotiationneeded = async () => {\n            if (!this.#_peerConnection || !this.#_signalingChannel\n                || this.#_signalingChannel.readyState !== WebRTCSignalingChannel.OPEN) {\n                return;\n            }\n            try {\n                // Create offer.\n                const offer = await this.#_peerConnection.createOffer();\n                await this.#_peerConnection.setLocalDescription(offer);\n\n                // Send offer to domain server.\n                this.#_signalingChannel.send({\n                    to: this.#_nodeType,\n                    data: { description: this.#_peerConnection.localDescription }\n                });\n            } catch (err) {\n                const errorMessage = \"WebRTCDataChannel: Error during offer negotiation: \" + <string>err;\n                console.error(errorMessage);\n                if (this.#_onerrorCallback) {\n                    this.#_onerrorCallback(errorMessage);\n                }\n            }\n        };\n\n        // Observe connection state changes.\n        this.#_peerConnection.onconnectionstatechange = () => {\n            let errorMessage = \"\";\n            switch (this.#_peerConnection ? this.#_peerConnection.connectionState : \"\") {\n                case \"new\":\n                case \"connecting\":\n                    // The connection is being established.\n                    this.#_readyState = WebRTCDataChannel.CONNECTING;\n                    break;\n                case \"connected\":\n                    // The connection has become fully connected.\n                    // However, _readyState isn't set to OPEN until the data channel has been connected.\n                    break;\n                case \"disconnected\":\n                case \"failed\":\n                case \"closed\":\n                    // One or more transports has terminated or is in error.\n                    this.#_readyState = WebRTCDataChannel.CLOSED;\n                    this.#_peerConnection = null;\n                    if (this.#_oncloseCallback) {\n                        this.#_oncloseCallback();\n                    }\n                    break;\n                default:\n                    // Unexpected condition.\n                    errorMessage = \"WebRTCDataChannel: Unexpected connection state: \"\n                        + (this.#_peerConnection ? this.#_peerConnection.connectionState : \"undefined\");\n                    console.error(errorMessage);\n                    if (this.#_onerrorCallback) {\n                        this.#_onerrorCallback(errorMessage);\n                    }\n            }\n        };\n\n        // Create the data channel.\n        // ordered = false and maxRetransmits = 0 creates an unreliable and unordered data channel, like UDP.\n        this.#_dataChannel = this.#_peerConnection.createDataChannel(\"label\", {\n            protocol: \"protocol\",\n            negotiated: false,\n            ordered: false,\n            maxRetransmits: 0\n        });\n        this.#_dataChannel.binaryType = \"arraybuffer\";\n        this.#_dataChannel.onopen = () => {\n            this.#_readyState = WebRTCDataChannel.OPEN;\n            if (this.#_onopenCallback) {\n                this.#_onopenCallback();\n            }\n        };\n        this.#_dataChannel.onmessage = ({ data }) => {\n            if (this.#_onmessageCallback) {\n                this.#_onmessageCallback(data);\n            }\n        };\n        // FIXME: Enable the following code once RTCDataChannel.onclosing is defined in lib.dom.d.ts.\n        /*\n        this.#_dataChannel.onclosing = () => {\n            this.#_readyState = WebRTCDataChannel.CLOSING;\n        };\n        */\n        this.#_dataChannel.onclose = () => {\n            this.#_readyState = WebRTCDataChannel.CLOSING;  // CLOSED state will happen when the peer connection is closed.\n            this.#_dataChannel = null;\n            if (this.#_peerConnection) {\n                this.#_peerConnection.close();\n            }\n        };\n\n    }  // start\n\n    // Instigates the WebRTC connection process.\n    #connect(): void {\n\n        // Signaling channel must be open.\n        if (!this.#_signalingChannel || this.#_signalingChannel.readyState !== WebRTCSignalingChannel.OPEN) {\n            this.#_readyState = WebRTCDataChannel.CLOSED;\n            const errorMessage = \"WebRTCDataChannel: Signaling channel not open!\";\n            console.error(errorMessage);\n            if (this.#_onerrorCallback) {\n                this.#_onerrorCallback(errorMessage);\n            }\n            return;\n        }\n\n        // Respond to signaling channel messages.\n        this.#_signalingChannel.addEventListener(\"message\", ({ from, data, echo }: SignalingMessage) => {\n            (async () => {\n                const description = data ? <RTCSessionDescriptionInit>data[\"description\"] : null;\n                const candidate = data ? <RTCIceCandidateInit>data[\"candidate\"] : null;\n\n                // Ignore messages not directed at this data channel.\n                if (from !== this.#_nodeType) {\n                    return;\n                }\n\n                // Start a new peer connection if necessary.\n                if (!this.#_peerConnection && (description || candidate)) {\n                    this.#start();\n                }\n\n                try {\n                    if (description) {\n                        if (!this.#_peerConnection) {\n                            const errorMessage = \"WebRTCDataChannel: Peer connection is closed!\";\n                            console.error(errorMessage);\n                            if (this.#_onerrorCallback) {\n                                this.#_onerrorCallback(errorMessage);\n                            }\n                            return;\n                        }\n\n                        // Add remote connection information to peer connection.\n                        await this.#_peerConnection.setRemoteDescription(description);\n\n                        // We got an offer; reply with an answer.\n                        if (description.type === \"offer\" && this.#_signalingChannel) {\n                            await this.#_peerConnection.setLocalDescription(description);\n                            this.#_signalingChannel.send({\n                                description: this.#_peerConnection.localDescription\n                            });\n                        }\n                    } else if (candidate) {\n                        // Add ICE candidate to peer connection.\n                        if (this.#_peerConnection) {\n                            await this.#_peerConnection.addIceCandidate(candidate);\n                        }\n                    } else if (echo) {\n                        // Ignore signaling channel \"echo\" messages.\n                        // Nothing to do.\n                    } else {\n                        // Unexpected message.\n                        const errorMessage = \"WebRTCDataChannel: Unexpected signaling channel message!\";\n                        console.error(errorMessage);\n                        if (this.#_onerrorCallback) {\n                            this.#_onerrorCallback(errorMessage);\n                        }\n                    }\n                } catch (err) {\n                    const errorMessage = \"WebRTCDataChannel: Error processing signaling channel message!\";\n                    console.error(errorMessage);\n                    if (this.#_onerrorCallback) {\n                        this.#_onerrorCallback(errorMessage);\n                    }\n                }\n            })();\n        });\n\n        // Start the WebRTC connection process.\n        this.#start();\n\n    }  // #connect\n\n}\n\nexport default WebRTCDataChannel;\n","//\n//  WebRTCSocket.ts\n//\n//  Created by David Rowe on 28 Jun 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport WebRTCDataChannel from \"./WebRTCDataChannel\";\nimport WebRTCSignalingChannel from \"./WebRTCSignalingChannel\";\nimport { NodeTypeValue } from \"../NodeType\";\nimport SockAddr from \"../SockAddr\";\nimport Signal from \"../../shared/Signal\";\n\n\ntype WebRTCSocketDatagram = { buffer: ArrayBuffer | undefined, sender: SockAddr | undefined };\n\ntype WebRTCDataChannelsByNodeType = Map<NodeTypeValue, { channelID: number, webrtcDataChannel: WebRTCDataChannel }>;\ntype WebRTCDataChannelsByChannelID = Map<number, { nodeType: NodeTypeValue, webrtcDataChannel: WebRTCDataChannel }>;\n\n\n/*@devdoc\n *  The <code>WebRTCSocket</code> class provides a one-to-many UDP-style socket wrapper for {@link WebRTCDataChannel} and\n *  {@link WebRTCSignalingChannel}. It uses these to provide WebRTC data channels to the domain server and assignment clients\n *  of a particular domain. The domain server and assignment clients are all considered to be at the same IP address (that of\n *  the domain server's WebRTC signaling channel) even though they may be at different IP addresses. The port numbers\n *  (internally-assigned WebRTC data channel IDs) distinguish the different connections.\n *  <p>C++: <code>WebRTCSocket : public QObject</code></p>\n *  <p>The JavaScript differs from the C++ because the JavaScript client explicitly connects to specific domains rather than\n *  accepting incoming connections.</p>\n *\n *  @class WebRTCSocket\n *  @property {WebRTCSocket.State} UNCONNECTED - There is no connection to the node on the domain.</td></tr>\n *  @property {WebRTCSocket.State} SIGNALING - A WebRTC signaling channel is open or being established.</td></tr>\n *  @property {WebRTCSocket.State} CONNECTING - A WebRTC data channel is being established.</td></tr>\n *  @property {WebRTCSocket.State} CONNECTED - There is a connection to the node on the domain.</td></tr>\n */\nclass WebRTCSocket {\n    // C++  WebRTCSocket : public QObject\n    //      WebRTCDataChannels : public QObject - incorporates some functionality from this.\n\n    /*@devdoc\n     *  Received datagram data and information.\n     *  @typedef {object} WebRTCSocket.Datagram\n     *  @property {ArrayBuffer} buffer - The datagram data.\n     *  @property {SockAddr} sender - The sender that the datagram was received from.\n     */\n\n\n    /*@devdoc\n     *  The state of a WebRTCDataChannel connection.\n     *  <table>\n     *      <thead>\n     *          <tr><th>Name</th><th>Value</th><th>Description</th></tr>\n     *      </thead>\n     *      <tbody>\n     *          <tr><td>UNCONNECTED</td><td>0</td><td>There is no connection to the node on the domain.</td></tr>\n     *          <tr><td>SIGNALING</td><td>1</td><td>A WebRTC signaling channel is open or being established.</td></tr>\n     *          <tr><td>CONNECTING</td><td>2</td><td>A WebRTC data channel is being established.</td></tr>\n     *          <tr><td>CONNECTED</td><td>3</td><td>There is a connection to the node on the domain.</td></tr>\n     *      </tbody>\n     *  </table>\n     *  @typedef {number} WebRTCSocket.State\n     */\n    static readonly UNCONNECTED = 0;\n    static readonly SIGNALING = 1;\n    static readonly CONNECTING = 2;\n    static readonly CONNECTED = 3;\n\n\n    // A single WebRTC signaling channel connected to the domain server for use in establishing WebRTC connections with both the\n    // domain server and each assignment client.\n    #_webrtcSignalingChannel: WebRTCSignalingChannel | null = null;\n    #_webrtcSignalingChannelAddress = \"\";\n\n    // A WebRTC data channel per domain server and assignment client node.\n    #_webrtcDataChannelsByNodeType: WebRTCDataChannelsByNodeType = new Map();\n    #_webrtcDataChannelsByChannelID: WebRTCDataChannelsByChannelID = new Map();\n\n    // WebRTC data channel IDs are assigned by us and are the equivalent of UDP ports.\n    // WEBRTC TODO: Move into WebRTCDataChannel and make read-only.\n    // WEBRTC TODO: Reimplement as a generator function?\n    #_lastDataChannelID = 0;  // First data channel ID is 1.\n\n    #_receivedQueue: Array<{ channelID: number, message: ArrayBuffer }> = [];\n\n    #_readyRead = new Signal();\n\n\n    constructor() {  // eslint-disable-line @typescript-eslint/no-useless-constructor\n        // C++  WebRTCSocket(QObject* parent)\n\n        // WEBRTC TODO: Address further C++ code.\n\n    }\n\n\n    /*@devdoc\n     *  Gets the state of the socket for a specified domain and node type.\n     *  @param {string} url - The URL of the domain.\n     *  @param {NodeType} nodeType - The node type.\n     *  @returns {WebRTCSocket.State} The state of the socket for the node type on the domain.\n     */\n    state(url: string, nodeType: NodeTypeValue): number {\n        // C++  N/A\n        if (url !== this.#_webrtcSignalingChannelAddress) {\n            return WebRTCSocket.UNCONNECTED;\n        }\n\n        if (this.#_webrtcDataChannelsByNodeType.has(nodeType)) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            switch (this.#_webrtcDataChannelsByNodeType.get(nodeType)!.webrtcDataChannel.readyState) {\n                case WebRTCDataChannel.OPEN:\n                    return WebRTCSocket.CONNECTED;\n                case WebRTCDataChannel.CONNECTING:\n                    return WebRTCSocket.CONNECTING;\n                default:\n                    // Fall through.\n            }\n        }\n        if (this.#_webrtcSignalingChannel !== null) {\n            switch (this.#_webrtcSignalingChannel.readyState) {\n                case WebRTCSignalingChannel.OPEN:\n                    return WebRTCSocket.SIGNALING;\n                case WebRTCSignalingChannel.CONNECTING:\n                    return WebRTCSocket.SIGNALING;\n                default:\n                    // Fall through.\n            }\n        }\n        return WebRTCSocket.UNCONNECTED;\n    }\n\n    /*@devdoc\n     *  Called when a connection is successfully established.\n     *  @callback WebRTCSocket~connectToHostCallback\n     *  @param {number} socketID - The WebRTC data channel ID of the socket connection. This is considered to be the \"port\"\n     *      number.\n     */\n    /*@devdoc\n     *  Connect to a specific type of node on a domain. If the domain is different to the one currently connected to, all\n     *  connections to the current domain are closed.\n     *  @param {string} url - The URL of the domain to connect to.\n     *  @param {NodeType} nodeType - The type of node to connect to.\n     *  @param {WebRTCSocket~connectToHostCallback} callback - Function to call when the connection has been established.\n     */\n    connectToHost(url: string, nodeType: NodeTypeValue, callback: (socketID: number) => void): void {\n        // C++  N/A\n\n        // Close any current connections if for a different URL.\n        if (url !== this.#_webrtcSignalingChannelAddress) {\n            this.#closeWebRTCDataChannels();\n            this.#closeWebRTCSignalingChannel();\n        }\n\n        // Adopt the URL.\n        this.#_webrtcSignalingChannelAddress = url.trim();\n        if (url.length === 0) {\n            return;\n        }\n\n        // Open signaling channel if not already open, and data channel.\n        if (this.#_webrtcSignalingChannel === null\n                || this.#_webrtcSignalingChannel.readyState === WebRTCSignalingChannel.CLOSED) {\n            this.#openWebRTCSignalingChannel(() => {\n                this.#openWebRTCDataChannel(nodeType, callback);\n            });\n        } else {\n            this.#openWebRTCDataChannel(nodeType, callback);\n        }\n    }\n\n    /*@devdoc\n     *  Immediately closes all connections and clears the receive queue and without waiting for any outgoing data to complete\n     *  being sent.\n     */\n    abort(): void {\n        // C++  N/A\n        this.#closeWebRTCDataChannels();\n        this.#closeWebRTCSignalingChannel();\n        while (this.#_receivedQueue.length > 0) {\n            this.#_receivedQueue.pop();\n        }\n    }\n\n\n    /*@devdoc\n     *  Gets whether there are any datagrams waiting to be read.\n     *  @returns {boolean} <code>true</code> if there is a datagram waiting to be read, <code>false</code> if there isn't.\n     */\n    hasPendingDatagrams(): boolean {\n        // C++  bool hasPendingDatagrams()\n        return this.#_receivedQueue.length > 0;\n    }\n\n    /*@devdoc\n     *  Reads the next datagram, up to a maximum number of bytes.\n     *  Any remaining data in the datagram is lost.\n     *  @param {WebRTCSocket.Datagram} datagram The destination object to read the datagram into.\n     *  @param {number} [maxSize=-1] The maximum number of bytes to read. <code>-1</code> to read all bytes in the datagram.\n     *  @returns {number} The number of bytes read on success; <code>-1</code> if reading unsuccessful.\n     */\n    readDatagram(datagram: WebRTCSocketDatagram, maxSize = -1): number {\n        // C++  qint64 readDatagram(char* data, qint64 maxSize, QHostAddress* address = nullptr, quint16* port = nullptr);\n\n        // WEBRTC TODO: Address further C++.\n\n        const data = this.#_receivedQueue.shift();\n        if (data) {\n            const length = maxSize >= 0 ? Math.min(data.message.byteLength, maxSize) : data.message.byteLength;\n\n            if (length === data.message.byteLength) {\n                datagram.buffer = data.message;\n            } else {\n                datagram.buffer = data.message.slice(0, length);\n            }\n\n            datagram.sender = new SockAddr();\n            datagram.sender.setPort(data.channelID);\n\n            return length;\n        }\n\n        // WEBRTC TODO: Address further C++.\n\n        return -1;\n    }\n\n    /*@devdoc\n     *  Sends a datagram on a data channel.\n     *  @param {ArrayBuffer} datagram The datagram to send.\n     *  @param {number} port The data channel ID.\n     *  @returns {number} The number of bytes if successfully sent, otherwise <code>-1</code>.\n     */\n    writeDatagram(datagram: ArrayBuffer, port: number): number {\n        // C++  qint64 writeDatagram(const QByteArray& datagram, quint16 port);\n\n        // WEBRTC TODO: Address further code.\n\n        const dataChannel = this.#_webrtcDataChannelsByChannelID.get(port);\n        if (dataChannel && dataChannel.webrtcDataChannel.send(datagram)) {\n            return datagram.byteLength;\n        }\n\n        // WEBRTC TODO: Address further code.\n\n        return -1;\n    }\n\n\n    /*@devdoc\n     *  Triggered each time new data becomes available for reading.\n     *  @function WebRTCSocket.readyRead\n     *  @returns {Signal}\n     */\n    get readyRead(): Signal {\n        // C++  void readyRead()\n        return this.#_readyRead;\n    }\n\n\n    #openWebRTCSignalingChannel(callback: () => void): void {\n        // C++  WebRTC-specific method\n        this.#_webrtcSignalingChannel = new WebRTCSignalingChannel(this.#_webrtcSignalingChannelAddress);\n        this.#_webrtcSignalingChannel.onopen = callback;\n    }\n\n    #closeWebRTCSignalingChannel(): void {\n        // C++  N/A\n        if (this.#_webrtcSignalingChannel) {\n            this.#_webrtcSignalingChannel.close();\n            this.#_webrtcSignalingChannel = null;\n        }\n    }\n\n    #openWebRTCDataChannel(nodeType: NodeTypeValue, callback: (socketID: number) => void): void {\n        // C++  WebRTC-specific method\n        if (this.#_webrtcSignalingChannel === null) {\n            return;\n        }\n        const webrtcDataChannel = new WebRTCDataChannel(nodeType, this.#_webrtcSignalingChannel);\n        webrtcDataChannel.onopen = () => {\n            this.#_lastDataChannelID += 1;\n            const channelID = this.#_lastDataChannelID;\n            webrtcDataChannel.id = channelID;\n            this.#_webrtcDataChannelsByNodeType.set(nodeType, { channelID, webrtcDataChannel });\n            this.#_webrtcDataChannelsByChannelID.set(channelID, { nodeType, webrtcDataChannel });\n            if (callback) {\n                callback(channelID);\n            }\n        };\n        webrtcDataChannel.onmessage = (message) => {\n            const channelID = webrtcDataChannel.id;\n            this.#_receivedQueue.push({ channelID, message });\n            this.#_readyRead.emit();\n        };\n    }\n\n    #closeWebRTCDataChannels(): void {\n        // C++  WebRTC-specific method\n        this.#_webrtcDataChannelsByNodeType.forEach((dataChannel) => {\n            if (dataChannel.webrtcDataChannel) {\n                dataChannel.webrtcDataChannel.close();\n            }\n        });\n        this.#_webrtcDataChannelsByNodeType = new Map();\n        this.#_webrtcDataChannelsByChannelID = new Map();\n    }\n\n}\n\nexport default WebRTCSocket;\nexport type { WebRTCSocketDatagram };\n","//\n//  Socket.ts\n//\n//  Created by David Rowe on 28 Jun 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport Packet from \"./Packet\";\nimport UDT from \"./UDT\";\nimport { NodeTypeValue } from \"../NodeType\";\nimport SockAddr from \"../SockAddr\";\nimport { default as WebRTCSocket, WebRTCSocketDatagram } from \"../webrtc/WebRTCSocket\";\nimport assert from \"../../shared/assert\";\n\n\n/*@devdoc\n *  Called to handle a received packet.\n *  @callback Socket~handlePacketCallback\n *  @param {Packet} packet - The received packet to handle.\n */\ntype PacketHandlerCallback = (packet: Packet) => void;\n\n\n/*@devdoc\n *  The <code>Socket</code> class provides a one-to-many socket used to communicate with a domain's domain server and\n *  assignment clients. Internally, a {@link WebRTCSocket} is used for the network connections.\n *  <p>C++: <code>Socket : public QObject</code></p>\n *  @class Socket\n *  @property {Socket.ConnectionState} UNCONNECTED - There is no connection.\n *      <em>Static. Read-only.</em>\n *  @property {Socket.ConnectionState} CONNECTING - A connection is being made.\n *      <em>Static. Read-only.</em>\n *  @property {Socket.ConnectionState} CONNECTED - A connection has been established.\n *      <em>Static. Read-only.</em>\n */\nclass Socket {\n    // C++  Socket : public QObject\n\n    /*@devdoc\n     *  The state of a socket connection.\n     *  <table>\n     *      <thead>\n     *          <tr><th>Name</th><th>Value</th><th>Description</th></tr>\n     *      </thead>\n     *      <tbody>\n     *          <tr><td>UNCONNECTED</td><td>0</td><td>There is no connection.</td></tr>\n     *          <tr><td>CONNECTING</td><td>1</td><td>A connection is being made.</td></tr>\n     *          <tr><td>CONNECTED</td><td>2</td><td>A connection has been established.</td></tr>\n     *      </tbody>\n     *  </table>\n     *  @typedef {number} Socket.ConnectionState\n     */\n    static readonly UNCONNECTED = 0;\n    static readonly CONNECTING = 1;\n    static readonly CONNECTED = 2;\n\n    static readonly #WEBRTCSOCKET_TO_SOCKET_STATES = [\n        Socket.UNCONNECTED,\n        Socket.UNCONNECTED,\n        Socket.CONNECTING,\n        Socket.CONNECTED\n    ];\n\n\n    // Use WebRTCSocket directly without going through an intermediary NetworkSocket as is done in C++.\n    #_webrtcSocket: WebRTCSocket;\n\n    // WEBRTC TODO: Address further C++ code.\n\n    #_packetHandler: PacketHandlerCallback | null = null;\n\n\n    constructor() {\n        // C++  Socket(QObject* parent = 0, bool shouldChangeSocketOptions = true)\n        // All parameters are unused in TypeScript code so don't implement.\n\n        this.#_webrtcSocket = new WebRTCSocket();\n\n        // Connect signals.\n        this.#_webrtcSocket.readyRead.connect(this.readPendingDatagrams);\n\n        // WEBRTC TODO: Address further C++ code.\n\n    }\n\n\n    /*@devdoc\n     *  Gets the state of the connection to a node.\n     *  @param {string} URL - The URL of the domain server.\n     *  @param {NodeType} nodeType - The type of node.\n     *  @returns {Socket.ConnectionState} The state of the connection.\n     */\n    getSocketState(url: string, nodeType: NodeTypeValue): number {\n        // C++  N/A\n        return Socket.#WEBRTCSOCKET_TO_SOCKET_STATES[this.#_webrtcSocket.state(url.trim(), nodeType)] as number;\n    }\n\n    /*@devdoc\n     *  Called when a socket is successfully opened.\n     *  @callback Socket~openSocketCallback\n     *  @param {number} socketID - The ID of the socket connection. This is considered to be the \"port\" number.\n     */\n    /*@devdoc\n     *  Opens a connection to a node.\n     *  @param {string} URL - The URL of the domain server.\n     *  @param {NodeType} nodeType - The type of node to connect to.\n     *  @param {Socket~openSocketCallback} callback - Function to call when the connection has been opened.\n     */\n    // Note: Not called \"openConnection\" because a \"Connection\" is a distinct type of object.\n    openSocket(url: string, nodeType: NodeTypeValue, callback: (socketID: number) => void): void {\n        // C++  N/A\n        this.#_webrtcSocket.connectToHost(url, nodeType, callback);\n    }\n\n\n    /*@devdoc\n     *  Clears all connections and closes the socket, without waiting for reading and writing to complete.\n     */\n    clearConnections(): void {\n        // C++  void clearConnections()\n\n        // WEBRTC TODO: Address further C++ code.\n\n        // Close WebRTC signaling and data channels.\n        this.#_webrtcSocket.abort();\n    }\n\n\n    /*@devdoc\n     *  Clears any connection with a given address.\n     *  @param {SockAddr} sockAddr - The address to clear the connection for.\n     */\n    // eslint-disable-next-line\n    // @ts-ignore\n    cleanupConnection(sockAddr: SockAddr): void {  // eslint-disable-line\n        // C++  void cleanupConnection(SockAddr sockAddr) {\n\n        // WEBRTC TODO: Address further C++ code.\n\n    }\n\n\n    /*@devdoc\n     *  Sends a packet to a destination.\n     *  @param {Packet} packet - The packet to send.\n     *  @param {SockAddr} sockAddr - The destination to send the packet to.\n     *  @returns {number} The number of bytes if successfully sent, otherwise <code>-1</code>.\n     */\n    writePacket(packet: Packet, sockAddr: SockAddr): number {\n        // C++  qint64 writePacket(const Packet& packet, const SockAddr& sockAddr)\n        assert(!packet.isReliable());\n\n        // WEBRTC TODO: Address further C++ code.\n\n        return this.writeDatagram(packet.getMessageData().data.buffer, packet.getDataSize(), sockAddr);\n    }\n\n    /*@devdoc\n     *  Sends a datagram to a destination.\n     *  @param {ArrayBuffer} data - The datagram to send.\n     *  @param {number} size - The maximum number of bytes to send.\n     *  @param {SockAddr} sockAddr - The destination to send the datagram to.\n     *  @returns {number} The number of bytes if successfully sent, otherwise <code>-1</code>.\n     */\n    writeDatagram(data: ArrayBuffer, size: number, sockAddr: SockAddr): number {\n        // C++  qint64 writeDatagram(const char* data, qint64 size, const SockAddr& sockAddr);\n\n        const datagram = data.byteLength <= size ? data : data.slice(0, size);\n\n        // C++  qint64 writeDatagram(const QByteArray& datagram, const SockAddr& sockAddr);\n        // In-line this method because it's only called by the parent.\n\n        // WEBRTC TODO: Address further C++ code.\n\n        const bytesWritten = this.#_webrtcSocket.writeDatagram(datagram, sockAddr.getPort());\n\n        // WEBRTC TODO: Address further C++ code.\n\n        return bytesWritten;\n    }\n\n    /*@devdoc\n     *  Sets the function called to handle a received packet.\n     *  @param {Socket~handlePacketCallback} handler - The function to call to handle the received packet.\n     */\n    setPacketHandler(handler: PacketHandlerCallback): void {\n        // C++  void setPacketHandler(PacketHandler handler)\n        this.#_packetHandler = (packet: Packet) => {\n            handler(packet);\n        };\n    }\n\n\n    /*@devdoc\n     *  Handles a change in the target node's address.\n     *  @function Socket.handleRemoteAddressChange\n     *  @type {Slot}\n     *  @param {SockAddr} previousAddress - The previous address of the target node.\n     *  @param {SockAddr} currentAddress - The current address of the target node.\n     */\n    handleRemoteAddressChange = (previousAddress: SockAddr, currentAddress: SockAddr): void => {\n        // C++  void handleRemoteAddressChange(SockAddr previousAddress, SockAddr currentAddress)\n\n        console.log(\"[networking] Remote address changes from\", previousAddress.toString(), \"to\", currentAddress.toString());\n        console.warn(\"handleRemoteAddressChange() : Not implemented!\");\n\n        // WEBRTC TODO: Address further C++ code.\n\n    };\n\n    /*@devdoc\n     *  Reads datagrams from the {@link WebRTCSocket} and forwards them to the packet handler to process.\n     *  @function Socket.readPendingDatagrams\n     *  @type {Slot}\n     */\n    readPendingDatagrams = (): void => {\n        // C++  void readPendingDatagrams();\n\n        // WEBRTC TODO: Address further C++ code.\n\n        while (this.#_webrtcSocket.hasPendingDatagrams()) {  // WEBRTC TODO: Further C++ code in condition.\n\n            // WEBRRTC TODO: Address further C++ code.\n\n            const datagram: WebRTCSocketDatagram = { buffer: undefined, sender: undefined };\n            const sizeRead = this.#_webrtcSocket.readDatagram(datagram);\n            if (sizeRead <= 0) {\n                continue;  // eslint-disable-line no-continue\n            }\n\n            const dataView = new DataView(<ArrayBuffer>datagram.buffer);\n\n            // WEBRTC TODO: Address further C++ code.\n\n            const receiveTime = Date.now();\n\n            const isControlPacket = dataView.getUint32(0, UDT.LITTLE_ENDIAN) & UDT.CONTROL_BIT_MASK;\n            if (isControlPacket) {\n\n                // WEBRTC TODO: Address further C++ code.\n\n                console.warn(\"Control packets not yet implemented!\");\n\n            } else {\n\n                const packet = Packet.fromReceivedPacket(dataView, dataView.byteLength, <SockAddr>datagram.sender);\n                const messageData = packet.getMessageData();\n                messageData.receiveTime = receiveTime;\n\n                // WEBRTC TODO: Address further C++ code.\n\n                if (packet.isReliable()) {\n                    console.warn(\"Reliable packets not yet implemented!\");\n\n                    // WEBRTC TODO: Address further C++ code.\n\n                    return;\n                }\n\n                // WEBRTC TODO: Address further C++ code.\n\n                if (messageData.isPartOfMessage) {\n                    console.warn(\"Multi-packet messages not yet implemented!\");\n\n                    // WEBRTC TODO: Address further C++ code.\n\n                } else if (this.#_packetHandler) {\n                    this.#_packetHandler(packet);\n                }\n\n            }\n        }\n    };\n\n}\n\nexport default Socket;\n","//\n//  LimitedNodeList.ts\n//\n//  Created by David Rowe on 7 Jun 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport HMACAuth from \"./HMACAuth\";\nimport { LocalID } from \"./NetworkPeer\";\nimport NLPacket from \"./NLPacket\";\nimport Node from \"./Node\";\nimport NodePermissions from \"./NodePermissions\";\nimport NodeType, { NodeTypeValue } from \"./NodeType\";\nimport PacketReceiver from \"./PacketReceiver\";\nimport SockAddr from \"./SockAddr\";\nimport SocketType from \"./SocketType\";\nimport PacketType from \"./udt/PacketHeaders\";\nimport Socket from \"./udt/Socket\";\nimport assert from \"../shared/assert\";\nimport Signal from \"../shared/Signal\";\nimport Uuid from \"../shared/Uuid\";\n\n\ntype NewNodeInfo = {\n    // C++  NewNodeInfo\n    type: NodeTypeValue,\n    uuid: Uuid,\n    publicSocket: SockAddr,\n    localSocket: SockAddr,\n    permissions: NodePermissions,\n    isReplicated: boolean,\n    sessionLocalID: LocalID,\n    connectionSecretUUID: Uuid\n};\n\n\n/*@devdoc\n *  The <code>LimitedNodeList</code> class manages all the network nodes (assignment clients) that the client is connected to.\n *  This includes their presence and communications with them via the Vircadia protocol.\n *  <p>See also: {@link NodeList}.</p>\n *  <p>C++: <code>LimitedNodeList : public QObject, public Dependency</code></p>\n *  @class LimitedNodeList\n *  @param {number} contextID - The {@link ContextManager} context ID.\n *\n *  @property {LimitedNodeList.ConnectReason} ConnectReason - Connect reason values.\n *  @property {number} INVALID_PORT=-1 - Invalid port.\n */\nclass LimitedNodeList {\n    // C++  LimitedNodeList : public QObject, public Dependency\n\n    /*@devdoc\n     *  Assignment client node information received in {@link PacketScribe.DomainListDetails} packet data.\n     *  @typedef {object} LimitedNodeList.NewNodeInfo\n     *  @property {NodeType} type - The type of node.\n     *  @property {Uuid} uuid - The UUID of the node.\n     *  @property {SockAddr} publicSocket - The public socket address.\n     *  @property {SockAddr} localSocket - The local socket address.\n     *  @property {NodePermissions} permissions - The permissions granted to the user for the node.\n     *  @property {boolean} isReplicated - <code>true</code> if the node is replicated, <code>false</code> if it isn't.\n     *  @property {LocalID} sessionLocalID - The local ID of the node at the domain server.\n     *  @property {Uuid} connectionSecretUUID - The secret for the client connection to the node.\n     */\n\n\n    /*@devdoc\n     *  The reason for requesting a connection to a domain.\n     *  <table>\n     *      <thead>\n     *          <tr><th>Name</th><th>Value</th><th>Description</th></tr>\n     *      </thead>\n     *      <tbody>\n     *          <tr><td>Connect</td><td>0</td><td>The client wants to connect to the domain.</td></tr>\n     *          <tr><td>SilentDomainDisconnect</td><td>1</td><td>Communications with the domain have been disrupted.</td></tr>\n     *          <tr><td>Awake</td><td>2</td><td>The system is waking up from sleep or hibernation.</td></tr>\n     *      </tbody>\n     *  </table>\n     *  @typedef {number} LimitedNodeList.ConnectReason\n     */\n    static ConnectReason = {\n        // C++  enum ConnectReason : quint32\n        Connect: 0,\n        SilentDomainDisconnect: 1,\n        Awake: 2\n    };\n\n    static readonly INVALID_PORT = -1;\n\n\n    protected _nodeSocket = new Socket();\n    protected _localSockAddr = new SockAddr();\n    protected _publicSockAddr = new SockAddr();\n    protected _packetReceiver;\n    protected _useAuthentication = true;\n\n\n    static readonly #ERROR_SENDING_PACKET_BYTES = -1;\n\n    readonly #NULL_CONNECTION_ID = -1;\n    readonly #SOLO_NODE_TYPES = new Set([\n        NodeType.AvatarMixer,\n        NodeType.AudioMixer,\n        NodeType.AssetServer,\n        NodeType.EntityServer,\n        NodeType.MessagesMixer,\n        NodeType.EntityScriptServer\n    ]);\n\n    #_sessionUUID = new Uuid(Uuid.NULL);\n    #_sessionLocalID: LocalID = 0;\n\n    #_nodeHash: Map<bigint, Node> = new Map();  // Map<Uuid, Node>\n\n    #_nodeAdded = new Signal();\n    #_nodeActivated = new Signal();\n    #_nodeSocketUpdated = new Signal();\n    #_nodeKilled = new Signal();\n\n\n    constructor(contextID: number) {\n        // C++  LimitedNodeList(int socketListenPort = INVALID_PORT, int dtlsListenPort = INVALID_PORT);\n\n        this._packetReceiver = new PacketReceiver(contextID);\n\n        // WEBRTC TODO: Address further C++ code.\n\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this._nodeSocket.setPacketHandler(this._packetReceiver.handleVerifiedPacket);  // handleVerifiedPacket is bound.\n\n        // WEBRTC TODO: Address further C++ code.\n\n        // Bind Slot methods.\n        this.reset.bind(this);\n    }\n\n\n    /*@devdoc\n     *  Sends a a solitary packet to an address, unreliably. The packet cannot be part of a multi-packet message.\n     *  @param {NLPacket} packet - The packet to send.\n     *  @param {SockAddr} sockAddr - The address to send it to.\n     *  @param {HMACAuth} [hmacAuth=null] - The hash-based message authentication code.\n     *  @returns {number} The number of bytes sent.\n     */\n    sendUnreliablePacket(packet: NLPacket, sockAddr: SockAddr, hmacAuth: HMACAuth | null = null): number {\n        // C++  qint64 sendUnreliablePacket(const NLPacket& packet, const SockAddr& sockAddr, HMACAuth* hmacAuth = nullptr)\n\n        assert(!packet.isPartOfMessage(), \"Cannot send a part-message packet unreliably!\");\n        assert(!packet.isReliable(), \"Cannot send a reliable packet unreliably!\");\n        assert(sockAddr.getType() === SocketType.WebRTC, \"Destination is not a WebRTC socket!\");\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this.#fillPacketHeader(packet, hmacAuth);\n\n        return this._nodeSocket.writePacket(packet, sockAddr);\n    }\n\n    /*@devdoc\n     *  Sends a solitary packet to an address, reliably or unreliably depending on the packet. The packet cannot be part of a\n     *  multi-packet message.\n     *  @param {NLPacket} packet - The packet to send.\n     *  @param {SockAddr|Node} sockAddr|destinationNode - The address to send the packet to.\n     *      <p>The packet's destination node.</p>\n     *  @param {HMACAuth|SockAddr} [hmacAuth|overridenSockAddr=null] - The message authentication object to use.\n     *      <p>The address to send the packet to, over-riding that of the <code>node</code>.\n     *  @returns {number} The number of bytes sent, or <code>-1</code> if none sent.\n     */\n    sendPacket(packet: NLPacket, param1: SockAddr | Node, param2: HMACAuth | SockAddr | null = null): number {\n        // C++  qint64 sendPacket(NLPacket* packet, const SockAddr& sockAddr, HMACAuth* hmacAuth = nullptr)\n        //      qint64 sendPacket(NLPacket* packet, const Node& destinationNode)\n        //      qint64 sendPacket(NLPacket* packet, const Node& destinationNode, const SockAddr& overridenSockAddr);\n\n        if (param1 instanceof SockAddr) {\n            assert(param2 instanceof HMACAuth || param2 === null);\n            const sockAddr = param1;\n            const hmacAuth = param2 as HMACAuth | null;  // eslint-disable-line @typescript-eslint/no-unnecessary-type-assertion\n\n            if (packet.isReliable()) {\n\n                console.warn(\"sendPacket() : isReliable : Not implemented!\");\n\n                // WEBRTC TODO: Address further C++ code.\n\n                return 0;\n\n            }\n\n            const size = this.sendUnreliablePacket(packet, sockAddr, hmacAuth);\n\n            // WEBRTC TODO: Address further C++ code.\n\n            return size;\n\n        }\n\n        if (param1 instanceof Node && param2 === null) {\n            const destinationNode = param1;\n\n            const activeSocket = destinationNode.getActiveSocket();\n            if (activeSocket) {\n                return this.sendPacket(packet, activeSocket, destinationNode.getAuthenticateHash());\n            }\n\n            console.log(\"[networking] LimitedNodeList.sendPacket called without active socket for node\",\n                NodeType.getNodeTypeName(destinationNode.getType()), \"- not sending\");\n            return LimitedNodeList.#ERROR_SENDING_PACKET_BYTES;\n        }\n\n        if (param1 instanceof Node && param2 instanceof SockAddr) {\n            const destinationNode = param1;\n            const overridenSockAddr = param2;\n\n            if (overridenSockAddr.isNull() && !destinationNode.getActiveSocket()) {\n                console.log(\"[networking] LimitedNodeList.sendPacket called without active socket for node\",\n                    destinationNode.getUUID(), \". Not sending.\");\n                return LimitedNodeList.#ERROR_SENDING_PACKET_BYTES;\n            }\n\n            // Use the node's active socket as the destination socket if there is no overridden socket address.\n            let destinationSockAddr = overridenSockAddr.isNull() ? destinationNode.getActiveSocket() : overridenSockAddr;\n            if (destinationSockAddr === null) {\n                destinationSockAddr = new SockAddr();\n            }\n\n            return this.sendPacket(packet, destinationSockAddr, destinationNode.getAuthenticateHash());\n\n        }\n\n        console.error(\"Invalid parameters in LimiteNodeList.sendPacket()!\", typeof packet, typeof param1, typeof param2);\n        return LimitedNodeList.#ERROR_SENDING_PACKET_BYTES;\n    }\n\n    /*@devdoc\n     *  Gets the assignment client node of a specified type, if present.\n     *  @param {NodeTypeValue} nodeType - The type of assignment client node to get.\n     *  @returns {Node|null} The node of the requested type if there is one, <code>null</code> if there isn't one.\n     */\n    soloNodeOfType(nodeType: NodeTypeValue): Node | null {\n        // C++  Node* soloNodeOfType(NodeType nodeType)\n        for (const node of this.#_nodeHash.values()) {\n            if (node.getType() === nodeType) {\n                return node;\n            }\n        }\n        return null;\n    }\n\n    /*@devdoc\n     *  Searches for an existing node with a given address.\n     *  @param {SodkAddr} address - The address searched for.\n     *  @returns {Node|null} The node with the given address if found, <code>null</code> if none found.\n     */\n    findNodeWithAddr(addr: SockAddr): Node | null {\n        // C++  Node* findNodeWithAddr(const SockAddr& addr)\n        for (const node of this.#_nodeHash.values()) {\n            if (node.getPublicSocket().isEqualTo(addr) || node.getLocalSocket().isEqualTo(addr)) {\n                return node;\n            }\n        }\n        return null;\n    }\n\n    /*@devdoc\n     *  Adds new or updates existing assignment client node connections.\n     *  @param {Uuid} uuid - The node's UUID.\n     *  @param {NodeType} nodeType - The node's type.\n     *  @param {SockAddr} publicSocket - The node's public socket.\n     *  @param {SockAddr} localSocket - The node's local network socket.\n     *  @param {LocalID} localID - The node's local ID.\n     *  @param {boolean} isReplicated - Whether or not the node is replicated.\n     *  @param {boolean} isUpstream - Whether or not the node is an upstream node.\n     *  @param {Uuid} connectionSecret - The node connection secret.\n     *  @param {NodePermissions} permissions - The node's permissions.\n     *  @returns {Node} The node added or updated.\n     */\n    addOrUpdateNode(uuid: Uuid, nodeType: NodeTypeValue, publicSocket: SockAddr, localSocket: SockAddr, localID: LocalID,\n        isReplicated: boolean, isUpstream: boolean, connectionSecret: Uuid, permissions: NodePermissions): Node {\n        // C++  SharedNodePointer addOrUpdateNode(const QUuid& uuid, NodeType_t nodeType,\n        //                                        const SockAddr& publicSocket, const SockAddr& localSocket,\n        //                                        Node::LocalID localID = Node::NULL_LOCAL_ID, bool isReplicated = false,\n        //                                        bool isUpstream = false, const QUuid& connectionSecret = QUuid(),\n        //                                        const NodePermissions& permissions = DEFAULT_AGENT_PERMISSIONS);\n\n\n        const matchingNode = this.#_nodeHash.get(uuid.value());\n        if (matchingNode) {\n\n            // WebRTC: Retain current public and local socket ports (data channel IDs).\n            publicSocket.setPort(matchingNode.getPublicSocket().getPort());\n            localSocket.setPort(matchingNode.getLocalSocket().getPort());\n\n            matchingNode.setPublicSocket(publicSocket);\n            matchingNode.setLocalSocket(localSocket);\n            matchingNode.setPermissions(permissions);\n            matchingNode.setConnectionSecret(connectionSecret);\n            matchingNode.setIsReplicated(isReplicated);\n            matchingNode.setIsUpstream(isUpstream || NodeType.isUpstream(nodeType));\n            matchingNode.setLocalID(localID);\n            return matchingNode;\n        }\n\n        // If this is a solo node then the domain server has replaced it and any previous node of the type should be killed.\n        if (this.#SOLO_NODE_TYPES.has(nodeType)) {\n            const oldNode = this.soloNodeOfType(nodeType);\n            if (oldNode) {\n\n                // WebRTC: Clean up old node's connection here before removing the node, rather than below.\n                this._nodeSocket.cleanupConnection(oldNode.getPublicSocket());\n                this._nodeSocket.cleanupConnection(oldNode.getLocalSocket());\n\n                this.#removeOldNode(this.soloNodeOfType(nodeType));\n            }\n\n        }\n\n        // WebRTC: Further calls to #removeOldNode() are not needed because user clients are only told of solo nodes, which are\n        // handled above.\n\n        // WebRTC: Old connections are cleaned up before removing any old node, above.\n\n        // WEBRTC TODO: Address further C++ code.\n\n        // Add the new node.\n        const newNode = new Node(uuid, nodeType, publicSocket, localSocket);\n        newNode.setIsReplicated(isReplicated);\n        newNode.setIsUpstream(isUpstream || NodeType.isUpstream(nodeType));\n        newNode.setConnectionSecret(connectionSecret);\n        newNode.setPermissions(permissions);\n        newNode.setLocalID(localID);\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this.#_nodeHash.set(newNode.getUUID().value(), newNode);\n\n        // WEBRTC TODO: Address further C++ code.\n\n        console.log(\"[networking] Added\", NodeType.getNodeTypeName(newNode.getType()));\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this.#_nodeAdded.emit(newNode);\n\n        // Signal when the network connection to the new node is established.\n        if (newNode.getActiveSocket()) {\n            this.#_nodeActivated.emit(newNode);\n        } else {\n            const callback = () => {\n                this.#_nodeActivated.emit(newNode);\n                newNode.socketActivated.disconnect(callback);\n            };\n            newNode.socketActivated.connect(callback);\n        }\n\n        // Signal when the node's socket changes so that we can reconnect.\n        newNode.socketUpdated.connect((previousAddress, currentAddress) => {\n            this.#_nodeSocketUpdated.emit(newNode);\n            this._nodeSocket.handleRemoteAddressChange(previousAddress, currentAddress);\n        });\n\n        return newNode;\n    }\n\n    /*@devdoc\n     *  Gets the node with a specified UUID.\n     *  @param {Uuid} uuid - The UUID of the node to get.\n     *  @returns {Node|null} The node with the specified UUID if found, <code>null</code> if not found.\n     */\n    nodeWithUUID(nodeUUID: Uuid): Node | null {\n        // C++  Node* nodeWithUUID(const QUuid& nodeUUID)\n        const matchingNode = this.#_nodeHash.get(nodeUUID.value());\n        if (!matchingNode) {\n            return null;\n        }\n        return matchingNode;\n    }\n\n    /*@devdoc\n     *  Gets the node with a specified local ID.\n     *  @param {number} localID - The local ID of the node to get.\n     *  @returns {Node|null} The node with the specified local ID if found, <code>null</code> if not found.\n     */\n    nodeWithLocalID(localID: number): Node | null {\n        // C++  Node* nodeWithLocalID(Node::LocalID localID)\n        for (const node of this.#_nodeHash.values()) {\n            if (node.getLocalID() === localID) {\n                return node;\n            }\n        }\n        return null;\n    }\n\n\n    /*@devdoc\n     *  Gets the client's local socket network address.\n     *  @returns {SockAddr} The local socket network address.\n     */\n    getLocalSockAddr(): SockAddr {\n        // C++  SockAddr& getLocalSockAddr()\n\n        // WEBRTC TODO: Set correct value.\n\n        return this._localSockAddr;\n    }\n\n    /*@devdoc\n     *  Gets the client's public socket network address.\n     *  @returns {SockAddr} The local socket network address.\n     */\n    getPublicSockAddr(): SockAddr {\n        // C++  SockAddr& getPublicSockAddr()\n\n        // WEBRTC TODO: Set correct value.\n\n        return this._publicSockAddr;\n    }\n\n    /*@devdoc\n     *  Gets the packet receiver used for handling packets received from the assignment clients.\n     *  @returns {PacketReceiver} The packet receiver.\n     */\n    getPacketReceiver(): PacketReceiver {\n        // C++  PacketReceiver& getPacketReceiver()\n        return this._packetReceiver;\n    }\n\n\n    /*@devdoc\n     *  Gets the node's UUID as assigned by the domain server for the connection session.\n     *  @returns {Uuid} The node's session UUID.\n     */\n    getSessionUUID(): Uuid {\n        // C++  LocalID getSessionUUID()\n        return this.#_sessionUUID;\n    }\n\n    /*@devdoc\n     *  Sets the node's UUID as assigned by the domain server for the connection session.\n     *  @param {Uuid} sessionUUID - The node's session UUID.\n     */\n    setSessionUUID(sessionUUID: Uuid): void {\n        // C++  void setSessionUUID(const QUuid& sessionUUID);\n        this.#_sessionUUID = sessionUUID;\n    }\n\n    /*@devdoc\n     *  Gets the node's local ID as assigned by the domain server for the connection session.\n     *  @returns {LocalID} The node's session local ID.\n     */\n    getSessionLocalID(): LocalID {\n        // C++  LocalID getSessionLocalID()\n        return this.#_sessionLocalID;\n    }\n\n    /*@devdoc\n     *  Sets the node's local ID as assigned by the domain server for the connection session.\n     *  @param {LocalID} sessionLocalID - The node's session local ID.\n     */\n    setSessionLocalID(sessionLocalID: LocalID): void {\n        // C++  void setSessionLocalID(LocalID sessionLocalID);\n        this.#_sessionLocalID = sessionLocalID;\n    }\n\n    /*@devdoc\n     *  Gets whether packet content should be authenticated. The default value is <code>true</code>.\n     *  @returns {boolean} <code>true</code> if packet content should be authenticated, <code>false</code> if it shouldn't be.\n     */\n    getAuthenticatePackets(): boolean {\n        return this._useAuthentication;\n    }\n\n    /*@devdoc\n     *  Sets whether packet content should be authenticated.\n     *  @param {boolean} useAuthentication - <code>true</code> if packet content should be authenticated, <code>false</code> if\n     *      it shouldn't be.\n     */\n    setAuthenticatePackets(useAuthentication: boolean): void {\n        this._useAuthentication = useAuthentication;\n    }\n\n\n    /*@devdoc\n     *  Resets the NodeList, closing all connections and deleting all node data.\n     *  @function LimitedNodeList.reset\n     *  @type {Slot}\n     *  @param {string} reason - The reason for resetting.\n     */\n    // eslint-disable-next-line\n    // @ts-ignore\n    reset(reason: string): void {  // eslint-disable-line @typescript-eslint/no-unused-vars\n        // C++  void reset(QString reason)\n        // Cannot declare this Slot function as an arrow function because derived NodeList class calls this function.\n        this.#eraseAllNodes(reason);\n        this._nodeSocket.clearConnections();\n\n        // WEBRTC TODO: Address further C++ code.\n\n    }\n\n\n    /*@devdoc\n     *  Triggered when a new node is added.\n     *  @function LimitedNodeList.nodeAdded\n     *  @param {Node} node - The node added.\n     *  @returns {Signal}\n     */\n    get nodeAdded(): Signal {\n        // C++  void nodeAdded(Node* node);\n        return this.#_nodeAdded;\n    }\n\n    /*@devdoc\n     *  Triggered when the network connection to a node is established.\n     *  @function LimitedNodeList.nodeActivated\n     *  @param {Node} node - The node that activated.\n     *  @returns {Signal}\n     */\n    get nodeActivated(): Signal {\n        // C++  void nodeActivated(Node* node);\n        return this.#_nodeActivated;\n    }\n\n    /*@devdoc\n     *  Triggered when a node's public or local socket address is updated.\n     *  @function LimitedNodeList.nodeSocketUpdated\n     *  @param {Node} node - The node that had updated its public or local socket address.\n     *  @returns {Signal}\n     */\n    get nodeSocketUpdated(): Signal {\n        // C++  void nodeSocketUpdated(Node* node);\n        return this.#_nodeSocketUpdated;\n    }\n\n    /*@devdoc\n     *  Triggered when a node is killed.\n     *  @function LimitedNodeList.nodeKilled\n     *  @param {Node} node - The node killed.\n     *  @returns {Signal}\n     */\n    get nodeKilled(): Signal {\n        // C++  void nodeKilled(Node* node);\n        return this.#_nodeKilled;\n    }\n\n\n    protected addNewNode(info: NewNodeInfo): void {  // eslint-disable-line class-methods-use-this\n        // C++  void addNewNode(NewNodeInfo info);\n\n        // WEBRTC TODO: Address further C++ code.\n\n        // WebRTC: The public and local SockAddrs provided are the assignment clients' UDP SockAddrs. Use their IP addresses as\n        // nominal WebRTC addresses but leave their ports to be filled in later - either when updating an existing node or when\n        // the WebRTC connection is made (NodeList.#activateSocketFromNodeCommunication()).\n        const publicSocket = new SockAddr(SocketType.WebRTC, info.publicSocket.getAddress(), 0);\n        const localSocket = new SockAddr(SocketType.WebRTC, info.localSocket.getAddress(), 0);\n\n        this.addOrUpdateNode(info.uuid, info.type, publicSocket, localSocket, info.sessionLocalID, info.isReplicated,\n            false, info.connectionSecretUUID, info.permissions);\n\n        // WEBRTC TODO: Address further C++ code.\n\n    }\n\n    // eslint-disable-next-line\n    // @ts-ignore\n    protected handleNodeKill(node: Node, nextConnectionID = this.#NULL_CONNECTION_ID): void {  // eslint-disable-line\n        // C++  void handleNodeKill(const SharedNodePointer& node, ConnectionID nextConnectionID = NULL_CONNECTION_ID)\n\n        // WEBRTC TODO: Address further C++ code.\n\n        console.log(\"[networking] Killed\", NodeType.getNodeTypeName(node.getType()), node.getUUID().stringify(),\n            node.getPublicSocket().toString(), \"/\", node.getLocalSocket().toString());\n\n        // Ping timer N/A.\n\n        this.#_nodeKilled.emit(node);\n\n        const activeSocket = node.getActiveSocket();\n        if (activeSocket) {\n            this._nodeSocket.cleanupConnection(activeSocket);\n        }\n\n        // WEBRTC TODO: Address further C++ code.\n\n    }\n\n    protected killNodeWithUUID(nodeUUID: Uuid, newConnectionID = this.#NULL_CONNECTION_ID): boolean {\n        // C++  bool killNodeWithUUID(const QUuid& nodeUUID, ConnectionID newConnectionID  = NULL_CONNECTION_ID)\n        const matchingNode = this.nodeWithUUID(nodeUUID);\n        if (matchingNode) {\n\n            // WEBRTC TODO: Address further C++ code.\n\n            this.#_nodeHash.delete(matchingNode.getUUID().value());  // eslint-disable-line @typescript-eslint/dot-notation\n            this.handleNodeKill(matchingNode, newConnectionID);\n            return true;\n        }\n        return false;\n    }\n\n\n    #fillPacketHeader(packet: NLPacket, hmacAuth: HMACAuth | null): void {\n        // C++  void fillPacketHeader(const NLPacket& packet, HMACAuth* hmacAuth = nullptr) {\n        if (!PacketType.getNonSourcedPackets().has(packet.getType())) {\n            packet.writeSourceID(this.getSessionLocalID());\n        }\n\n        if (this._useAuthentication && hmacAuth\n                && !PacketType.getNonSourcedPackets().has(packet.getType())\n                && !PacketType.getNonVerifiedPackets().has(packet.getType())) {\n            packet.writeVerificationHash(hmacAuth);\n        }\n    }\n\n    #removeOldNode(node: Node | null): void {\n        // C++  auto removeOldNode = [&](auto node)\n        if (!node) {\n            return;\n        }\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this.#_nodeHash.delete(node.getUUID().value());  // eslint-disable-line @typescript-eslint/dot-notation\n        this.handleNodeKill(node);\n    }\n\n    #eraseAllNodes(reason: string): void {\n        // C++  void eraseAllNodes(QString reason)\n        const killedNodes = [];\n\n        if (this.#_nodeHash.size > 0) {\n            console.log(\"[networking] Removing all nodes from nodes list:\", reason);\n            for (const node of this.#_nodeHash.values()) {\n                killedNodes.push(node);\n            }\n        }\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this.#_nodeHash.clear();\n\n        for (const node of killedNodes) {\n            this.handleNodeKill(node);\n        }\n\n        // WEBRTC TODO: Address further C++ code.\n\n    }\n\n}\n\nexport default LimitedNodeList;\nexport type { NewNodeInfo };\n","//\n//  NodeList.ts\n//\n//  Created by David Rowe on 5 Jun 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport AddressManager from \"./AddressManager\";\nimport DomainHandler from \"./DomainHandler\";\nimport FingerprintUtils from \"./FingerprintUtils\";\nimport LimitedNodeList from \"./LimitedNodeList\";\nimport NLPacket from \"./NLPacket\";\nimport Node from \"./Node\";\nimport NodeType, { NodeTypeValue } from \"./NodeType\";\nimport PacketReceiver from \"./PacketReceiver\";\nimport ReceivedMessage from \"./ReceivedMessage\";\nimport PacketScribe from \"./packets/PacketScribe\";\nimport PacketType, { protocolVersionsSignature } from \"./udt/PacketHeaders\";\nimport Socket from \"./udt/Socket\";\nimport assert from \"../shared/assert\";\nimport ContextManager from \"../shared/ContextManager\";\nimport Uuid from \"../shared/Uuid\";\n\n\n/*@devdoc\n *  The <code>NodeList</code> class manages the domain server plus all the nodes (assignment clients) that the client is\n *  connected to. This includes their presence and communications with them via the Vircadia protocol.\n *  <p>C++: <code>NodeList : LimitedNodeList</code></p>\n *\n *  @class NodeList\n *  @extends LimitedNodeList\n *  @property {string} contextItemType=\"NodeList\" - The type name for use with the {@link ContextManager}.\n *      <p><em>Static. Read-only.</em></p>\n *\n *  @param {number} contextID - The {@link ContextManager} context ID.\n *  @param {NodeType} [ownerType=Agent] - The type of object that the NodeList is being used in.\n */\nclass NodeList extends LimitedNodeList {\n    // C++  NodeList : public LimitedNodeList\n\n    static readonly contextItemType = \"NodeList\";\n\n\n    #_ownerType = NodeType.Agent;\n    #_connectReason = LimitedNodeList.ConnectReason.Connect;\n    #_nodeTypesOfInterest: Set<NodeTypeValue> = new Set();\n\n    #_domainHandler: DomainHandler;\n\n    // Context objects.\n    #_addressManager;\n\n\n    constructor(contextID: number) {\n        // C++  NodeList(int socketListenPort = INVALID_PORT, int dtlsListenPort = INVALID_PORT);\n\n        super(contextID);\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this.#_domainHandler = new DomainHandler(this);\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this.#_addressManager = ContextManager.get(contextID, AddressManager) as AddressManager;\n        this.#_addressManager.possibleDomainChangeRequired.connect(this.#_domainHandler.setURLAndID);\n\n        // WEBRTC TODO: Address further C++ code.\n\n        // clear our NodeList when the domain changes\n        this.#_domainHandler.disconnectedFromDomain.connect(() => {\n            // C++  void resetFromDomainHandler()\n            this.reset(\"Reset from Domain Handler\", true);\n        });\n\n        // WEBRTC TODO: Address further C++ code.\n\n        // Whenever there is a new node connect to it.\n        this.nodeAdded.connect(this.#startNodeHolePunch);\n        this.nodeSocketUpdated.connect(this.#startNodeHolePunch);\n\n        // Whenever we get a new node we may need to re-send our set of ignored nodes to it.\n        this.nodeActivated.connect(this.#maybeSendIgnoreSetToNode);\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this._packetReceiver.registerListener(PacketType.DomainList,\n            PacketReceiver.makeUnsourcedListenerReference(this.processDomainList));\n        this._packetReceiver.registerListener(PacketType.Ping,\n            PacketReceiver.makeSourcedListenerReference(this.processPingPacket));\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this._packetReceiver.registerListener(PacketType.DomainConnectionDenied,\n            PacketReceiver.makeUnsourcedListenerReference(this.#_domainHandler.processDomainServerConnectionDeniedPacket));\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this._packetReceiver.registerListener(PacketType.DomainServerRemovedNode,\n            PacketReceiver.makeUnsourcedListenerReference(this.processDomainServerRemovedNode));\n\n        // WEBRTC TODO: Address further C++ code.\n\n    }\n\n\n    /*@devdoc\n     *  Gets the domain handler used by the NodeList.\n     *  @function NodeList.getDomainHandler\n     *  @returns {DomainHandler} The domain handler.\n     */\n    getDomainHandler(): DomainHandler {\n        // C++  DomainHandler& getDomainHandler()\n        return this.#_domainHandler;\n    }\n\n    /*@devdoc\n     *  Adds node types to the set of those that the NodeList will connect to.\n     *  @function NodeList.addSetOfNodeTypesToNodeInterestSet\n     *  @param {Set<NodeType>} setOfNodeTypes - The node types to add to the interest set.\n     */\n    addSetOfNodeTypesToNodeInterestSet(setOfNodeTypes: Set<NodeTypeValue>): void {\n        // C++  void addSetOfNodeTypesToNodeInterestSet(const NodeSet& setOfNodeTypes)\n        for (const nodeType of setOfNodeTypes) {\n            this.#_nodeTypesOfInterest.add(nodeType);\n        }\n    }\n\n    /*@devdoc\n     *  Gets the node types that the NodeList will connect to.\n     *  @function NodeList.getNodeInterestSet\n     *  @returns {Set<NodeType>} The node types in the interest set.\n     */\n    getNodeInterestSet(): Set<NodeTypeValue> {\n        // C++  NodeSet& getNodeInterestSet() const { return _nodeTypesOfInterest; }\n        return this.#_nodeTypesOfInterest;\n    }\n\n\n    /*@devdoc\n     *  Processes a {@link PacketType(1)|DomainList} message received from the domain server.\n     *  @function NodeList.processDomainList\n     *  @param {ReceivedMessage} message - The DomainList message.\n     *  @type {Listener}\n     */\n    processDomainList = (message: ReceivedMessage): void => {\n        // C++  processDomainList(ReceivedMessage* message)\n\n        // WEBRTC TODO: This should involve a NLPacketList, not just a single NLPacket.\n\n        const info = PacketScribe.DomainList.read(message.getMessage());\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this.setSessionLocalID(info.newLocalID);\n        this.setSessionUUID(info.newUUID);\n\n        // WEBRTC TODO: Address further C++ code.\n\n        if (!this.#_domainHandler.isConnected()) {\n            this.#_domainHandler.setLocalID(info.domainLocalID);\n            this.#_domainHandler.setUUID(info.domainUUID);\n            this.#_domainHandler.setIsConnected(true);\n\n            // WEBRTC TODO: Address further C++ code.\n\n        }\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this.setAuthenticatePackets(info.isAuthenticated);\n\n        for (const node of info.nodes) {\n            // If the public socket address is 0 then it's reachable at the same IP as the domain server.\n            if (node.publicSocket.getAddress() === 0) {\n                node.publicSocket.setAddress(this.#_domainHandler.getSockAddr().getAddress());\n            }\n\n            this.addNewNode(node);\n        }\n\n    };\n\n    /*@devdoc\n     *  Processes a {@link PacketType(1)|DomainServerRemovedNode} message received from the domain server.\n     *  @function NodeList.processDomainServerRemovedNode\n     *  @type {Listener}\n     *  @param {ReceivedMessage} message - The DomainServerRemovedNode message.\n     */\n    processDomainServerRemovedNode = (message: ReceivedMessage): void => {\n        // C++  void processDomainServerRemovedNode(ReceivedMessage* message)\n        const info = PacketScribe.DomainServerRemovedNode.read(message.getMessage());\n        const nodeUUID = info.nodeUUID;\n        console.log(\"[networking] Received packet from domain-server to remove node with UUID\", nodeUUID.stringify());\n        this.killNodeWithUUID(nodeUUID);\n\n        // WEBRTC TODO: Address further C++ code.\n\n    };\n\n    /*@devdoc\n     *  Processes a {@link PacketType(1)|Ping} packet received from an assignment client.\n     *  @function NodeList.processPingPacket\n     *  @type {Listener}\n     *  @param {ReceivedMessage} message - The Ping message.\n     *  @param {Node} sendingNode - The assignment client that sent the ping.\n     */\n    processPingPacket = (message: ReceivedMessage, sendingNode?: Node): void => {\n        // C++  void processPingPacket(ReceivedMessage* message, Node* sendingNode)\n        assert(sendingNode !== undefined);\n\n        const MS_TO_USEC = 1000n;\n\n        const info = PacketScribe.Ping.read(message.getMessage());\n\n        const replyPacket = PacketScribe.PingReply.write({\n            pingType: info.pingType,\n            timestampPing: info.timestamp,\n            timestampReply: BigInt(Date.now()) * MS_TO_USEC\n        });\n        this.sendPacket(replyPacket, sendingNode, message.getSenderSockAddr());\n\n        // WEBRTC TODO: Address further C++ code.\n\n        /*\n        int64_t connectionID;\n        message -> readPrimitive(& connectionID);\n\n        auto it = _connectionIDs.find(sendingNode -> getUUID());\n        if (it != _connectionIDs.end()) {\n            if (connectionID > it -> second) {\n                qDebug() << \"Received a ping packet with a larger connection id (\" << connectionID << \">\" << it -> second\n                    << \") from \" << sendingNode -> getUUID();\n                killNodeWithUUID(sendingNode -> getUUID(), connectionID);\n            }\n        }\n        */\n\n        // WEBRTC TODO: Move this to processPingReplyPacket() when implement sending pings to the assignment client.\n        this.#activateSocketFromNodeCommunication(message, sendingNode);\n\n    };\n\n\n    /*@devdoc\n     *  Resets the LimitedNodeList, closing all connections and deleting all node data.\n     *  @function NodeList.reset\n     *  @type {Slot}\n     *  @param {string} reason - The reason for resetting.\n     *  @param {boolean} [skipDomainHandlerReset=false] - <code>true</code> if should skip clearing DomainHandler information,\n     *      e.g., if the DomainHandler initiated the reset; <code>false</code> if should clear DomainHandler information.\n     */\n    override reset = (reason: string, skipDomainHandlerReset = false): void => {\n        // C++  void reset(QString reason, bool skipDomainHandlerReset = false);\n\n        super.reset(reason);\n\n        // WEBRTC TODO: Address further C++ code.\n\n        if (!skipDomainHandlerReset) {\n            this.#_domainHandler.softReset(reason);\n        }\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this.setSessionUUID(new Uuid());\n        this.setSessionLocalID(0);\n\n        // WEBRTC TODO: Address further C++ code.\n\n    };\n\n    /*@devdoc\n     *  Performs a check-in with the domain server to connect with a {@link PacketType(1)|DomainConnectRequest} packet or keep a\n     *  connection alive with a {@link PacketType(1)|DomainListRequest} packet. This method should be called by the client once\n     *  every second.\n     *  @function NodeList.sendDomainServerCheckIn\n     *  @type {Slot}\n     */\n    sendDomainServerCheckIn = (): void => {\n        // C++  void sendDomainServerCheckIn()\n\n        // WEBRTC TODO: Address further C++ code.\n\n        // The web client uses the domain URL rather than IP address.\n        const domainURL = this.#_domainHandler.getURL();\n        if (!domainURL || this.#_domainHandler.checkInPacketTimeout()) {\n            return;\n        }\n\n        // We don't need to worry about getting our publicSockAddress because WebRTC handles this.\n        // We don't need to worry about the domain handler requiring ICE because WebRTC handles this.\n        // Instead, we open the WebRTC signaling and data channels if not already open.\n\n        // Open a WebRTC data channel to the domain server if not already open.\n        const domainServerSocketState = this._nodeSocket.getSocketState(domainURL, NodeType.DomainServer);\n        if (domainServerSocketState !== Socket.CONNECTED) {\n            console.log(\"[networking] Opening domain server connection. Will not send domain server check-in.\");\n            if (domainServerSocketState === Socket.UNCONNECTED) {\n                this._nodeSocket.openSocket(domainURL, NodeType.DomainServer, (socketID: number) => {\n                    this.#_domainHandler.setPort(socketID);\n                });\n            }\n            return;\n        }\n\n        const isDomainConnected = this.#_domainHandler.isConnected();\n        const domainPacketType = isDomainConnected ? PacketType.DomainListRequest : PacketType.DomainConnectRequest;\n        const domainSockAddr = this.#_domainHandler.getSockAddr();\n\n        if (!isDomainConnected) {\n\n            // WEBRTC TODO: Address further C++ code.\n\n        }\n\n        // WEBRTC TODO: Address further C++ code.\n\n        // Data common to DomainConnectRequest and DomainListRequest.\n        const currentTime = BigInt(Date.now().valueOf());\n        const ownerType = this.#_ownerType;\n        const publicSockAddr = super.getPublicSockAddr();\n        const localSockAddr = super.getLocalSockAddr();\n\n        const nodeTypesOfInterest = this.#_nodeTypesOfInterest;\n        const placeName = this.#_addressManager.getPlaceName();\n        let username = undefined;\n        let usernameSignature = undefined;\n        const domainUsername = undefined;\n        const domainTokens = undefined;\n        if (!isDomainConnected) {\n            username = \"\";\n            usernameSignature = new Uint8Array(new ArrayBuffer(0));\n\n            // WEBRTC TODO: Address further C++ code.\n\n        }\n\n\n        // Create and send packet.\n        let packet: NLPacket | undefined = undefined;\n        if (domainPacketType === PacketType.DomainConnectRequest) {\n\n            // Data unique to DomainConnectRequest.\n            const connectUUID = new Uuid(Uuid.NULL);  // Always Uuid.NULL for a web client.\n            // Ignore ICE code because the Web client didn't use ICE to discover the domain server.\n            const protocolVersionSig = protocolVersionsSignature();\n            // WEBRTC TODO: Get MAC address.\n            const hardwareAddress = \"\";\n            const machineFingerprint = FingerprintUtils.getMachineFingerprint();\n            // WEBRTC TODO: Get compressed system info.\n            const compressedSystemInfo = new Uint8Array(new ArrayBuffer(0));\n            const connectReason = this.#_connectReason;\n            // WEBRTC TODO: Calculate previousConnectionUpdate value.\n            const previousConnectionUptime = BigInt(0);\n\n            // Write the packet.\n            packet = PacketScribe.DomainConnectRequest.write({\n                connectUUID,\n                protocolVersionSig,\n                hardwareAddress,\n                machineFingerprint,\n                compressedSystemInfo,\n                connectReason,\n                previousConnectionUptime,\n                currentTime,\n                ownerType,\n                publicSockAddr,\n                localSockAddr,\n                nodeTypesOfInterest,\n                placeName,\n                isDomainConnected,\n                username,\n                usernameSignature,\n                domainUsername,\n                domainTokens\n            });\n\n        } else {\n\n            packet = PacketScribe.DomainListRequest.write({\n                currentTime,\n                ownerType,\n                publicSockAddr,\n                localSockAddr,\n                nodeTypesOfInterest,\n                placeName,\n                isDomainConnected,\n                username,\n                usernameSignature,\n                domainUsername,\n                domainTokens\n            });\n\n        }\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this.sendPacket(packet, domainSockAddr);\n    };\n\n\n    // eslint-disable-next-line\n    // @ts-ignore\n    #activateSocketFromNodeCommunication(message: ReceivedMessage, sendingNode: Node) {  // eslint-disable-line\n        // C++  void activateSocketFromNodeCommunication(ReceivedMessage& message, const Node* sendingNode)\n\n        // WebRTC: Just use the node's public socket for WebRTC, for now.\n        if (sendingNode.getActiveSocket() === null) {\n            sendingNode.activatePublicSocket();\n        }\n\n        // WEBRTC TODO: Address public, local, and symmetric sockets w.r.t. WebRTC and the Web SDK.\n\n        // WEBRTC TODO: Address further C++ code. Audio mixer.\n    }\n\n\n    // Slot.\n    #startNodeHolePunch = (node: Node): void => {\n        // C++  void startNodeHolePunch(const Node* node);\n        // While we don't need to do hole punching per se because WebRTC handles this, we initiate opening the WebRTC data\n        // channel and adopt the native client's use of pings and replys to coordinate setting up communications with the\n        // assignment client.\n\n        // WebRTC: Initiate opening the WebRTC data channel.\n        if (this._nodeSocket.getSocketState(this.#_domainHandler.getURL(), node.getType()) === Socket.UNCONNECTED) {\n\n            if (!this.#_domainHandler.isConnected()) {\n                // Cannot connect to an assignment client if the domain server isn't connected.\n                return;\n            }\n\n            this._nodeSocket.openSocket(this.#_domainHandler.getURL(), node.getType(), (socketID) => {\n                // We could in theory call #activateSocketFromNodeCommunication() here, however this is too soon for other\n                // user client / assignment client interactions.\n\n                // WebRTC: Fill in the public and local SockAddrs with the port just opened.\n                node.getPublicSocket().setPort(socketID);\n                node.getLocalSocket().setPort(socketID);\n            });\n\n        } else {\n            console.error(\"Unexpected socket state for\", NodeType.getNodeTypeName(node.getType()));\n        }\n\n        // Vircadia clients can never have upstream nodes or downstream nodes so we don't need to cater for these.\n\n        // WEBRTC TODO: Implement the native client's ping timer and response handling to call\n        // #activateSocketFromNodeCommunication().\n        // In the interim we piggyback on the Ping packets received from the assignment client in processPingPacket(). However,\n        // this is most likely makes setting up the connection less responsive.\n\n        // Vircadia clients can never have upstream nodes or downstream nodes so we don't need to cater for these.\n    };\n\n    // Slot.\n    // eslint-disable-next-line\n    // @ts-ignore\n    #maybeSendIgnoreSetToNode = (newNode: Node): void => {  // eslint-disable-line @typescript-eslint/no-unused-vars\n        // C++  void NodeList::maybeSendIgnoreSetToNode(Node* newNode)\n\n        // WEBRTC TODO: Address further C++.\n\n    };\n\n}\n\nexport default NodeList;\n","//\n//  DomainServer.ts\n//\n//  Vircadia Web SDK's Domain Server API.\n//\n//  Created by David Rowe on 8 Jul 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport AddressManager from \"./domain/networking/AddressManager\";\nimport Node from \"./domain/networking/Node\";\nimport NodeList from \"./domain/networking/NodeList\";\nimport NodeType from \"./domain/networking/NodeType\";\nimport ContextManager from \"./domain/shared/ContextManager\";\n\n\n/*@sdkdoc\n *  <table>\n *      <thead>\n *          <tr><th>Name</th><th>Value</th><th>Description</th></tr>\n *      </thead>\n *      <tbody>\n *          <tr><td>DISCONNECTED</td><td>0</td><td>Disconnected from the domain server.</td></tr>\n *          <tr><td>CONNECTING</td><td>1</td><td>Connecting to the domain server.</td></tr>\n *          <tr><td>CONNECTED</td><td>2</td><td>Connected to the domain server.</td></tr>\n *          <tr><td>REFUSED</td><td>3</td><td>Connection to the domain server refused; not connected.</td></tr>\n *          <tr><td>ERROR</td><td>4</td><td>Error connecting to the domain server; not connected.</td></tr>\n *      </tbody>\n *  </table>\n *  @typedef {number} DomainServer.State\n */\nexport enum ConnectionState {\n    DISCONNECTED = 0,\n    CONNECTING,\n    CONNECTED,\n    REFUSED,\n    ERROR\n}\n\ntype OnStateChanged = (state: ConnectionState, info: string) => void;\n\n\n/*@sdkdoc\n *  The <code>DomainServer</code> class provides the interface for connecting to a domain server.\n *\n *  @class DomainServer\n *  @property {DomainServer.State} DISCONNECTED - Disconnected from the domain server.\n *      <em>Static. Read-only.</em>\n *  @property {DomainServer.State} CONNECTING - Connecting to the domain server.\n *      <em>Static. Read-only.</em>\n *  @property {DomainServer.State} CONNECTED - Connected to the domain server.\n *      <em>Static. Read-only.</em>\n *  @property {DomainServer.State} REFUSED - Connection to the domain server refused; not connected to the domain. See\n *      <code>refusalInfo</code> for details.\n *      <em>Static. Read-only.</em>\n *  @property {DomainServer.State} ERROR - Error connecting to the domain server; not connected to the domain. See\n *      <code>errorInfo</code> for details.\n *      <em>Static. Read-only.</em>\n *  @property {number} contextID - Identifies the shared context which the DomainServer and associated assignment client objects\n *      (AudioMixer, AvatarMixer, etc.) use to connect to and interact with a domain. The context ID is assigned when the\n *      DomainServer object is constructed.\n *      <em>Read-only.</em>\n *  @property {string} location - The current location that the DomainServer is connected to or trying to connect to.\n *      <code>\"\"</code> if no location has been set.\n *      <em>Read-only.</em>\n *  @property {DomainServer.State} state - The current state of the connection to the domain server.\n *      <em>Read-only.</em>\n *  @property {string} refusalInfo - A description of the reason if <code>state == DomainServer.REFUSED</code>, otherwise\n *      <code>\"\"</code>.\n *      <em>Read-only.</em>\n *  @property {string} errorInfo - A description of the reason if <code>state == DomainServer.ERROR</code>, otherwise\n *      <code>\"\"</code>.\n *      <em>Read-only.</em>\n *  @property {DomainServer~onStateChanged|null} onStateChanged - Sets a single function to be called when the state of the\n *      connection to the domain server changes. Set to <code>null</code> to remove the callback.\n *      <em>Write-only.</em>\n */\nclass DomainServer {\n    // C++  Application.cpp\n    //      The Web SDK differs from the C++ in that a \"disconnect\" command is explicitly provided to disconnect from the\n    //      current domain and stop the check-ins from being sent; the C++ never stops sending check-ins.\n\n    /*@sdkdoc\n     *  Called when the state of the connection to the domain changes.\n     *  @callback DomainServer~onStateChanged\n     *  @param {DomainServer.State} state - The state of the connection to the domain server connection.\n     *  @param {string} info - Refusal or error information if the state is <code>REFUSAL</code> or <code>ERROR</code>.\n     */\n\n    static get DISCONNECTED(): ConnectionState {\n        return ConnectionState.DISCONNECTED;\n    }\n\n    static get CONNECTING(): ConnectionState {\n        return ConnectionState.CONNECTING;\n    }\n\n    static get CONNECTED(): ConnectionState {\n        return ConnectionState.CONNECTED;\n    }\n\n    static get REFUSED(): ConnectionState {\n        return ConnectionState.REFUSED;\n    }\n\n    static get ERROR(): ConnectionState {\n        return ConnectionState.ERROR;\n    }\n\n    /*@sdkdoc\n     *  Gets the string representing a connection state.\n     *  <p><em>Static</em></p>\n     *  @param {DomainServer.State} state - The state to get the string representation of.\n     *  @returns {string} The string representing the connection state if a valid state, otherwise <code>\"\"</code>.\n     */\n    static stateToString(state: ConnectionState): string {\n        const text = ConnectionState[state];\n        return text ? text : \"\";\n    }\n\n\n    static readonly #DOMAIN_SERVER_CHECK_IN_MSECS = 1000;\n\n\n    #_location = \"\";\n    #_state = DomainServer.DISCONNECTED;\n    #_refusalInfo = \"\";\n    #_errorInfo = \"\";\n    #_onStateChanged: OnStateChanged | null = null;\n\n    #_domainCheckInTimer: ReturnType<typeof setTimeout> | null = null;\n\n    // Context objects.\n    #_contextID;\n    #_nodeList: NodeList;\n    #_addressManager: AddressManager;\n\n    #_DEBUG = false;\n\n\n    constructor() {\n        // C++  Application::Application()\n\n        const contextID = ContextManager.createContext();\n        ContextManager.set(contextID, AddressManager);\n        ContextManager.set(contextID, NodeList, contextID);\n\n        this.#_nodeList = ContextManager.get(contextID, NodeList) as NodeList;\n        this.#_addressManager = ContextManager.get(contextID, AddressManager) as AddressManager;\n        this.#_contextID = contextID;\n\n        // WEBRTC TODO: Address further C++ code.\n\n        const domainHandler = this.#_nodeList.getDomainHandler();\n        domainHandler.connectedToDomain.connect(() => {\n            this.#setState(DomainServer.CONNECTED);\n        });\n        domainHandler.disconnectedFromDomain.connect(() => {\n            if (this.#_state !== DomainServer.DISCONNECTED) {\n                this.#stopDomainServerCheckins();\n                this.#setState(DomainServer.DISCONNECTED);\n            }\n        });\n        domainHandler.domainConnectionRefused.connect(this.#domainConnectionRefused);\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this.#_nodeList.nodeAdded.connect(this.#nodeAdded);\n        this.#_nodeList.nodeActivated.connect(this.#nodeActivated);\n        this.#_nodeList.nodeKilled.connect(this.#nodeKilled);\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this.#_nodeList.addSetOfNodeTypesToNodeInterestSet(new Set([\n\n            // WEBRTC TODO: Configure interest set per AC APIs used.\n\n            NodeType.AudioMixer,\n            NodeType.MessagesMixer,\n            NodeType.AvatarMixer\n        ]));\n\n        // WEBRTC TODO: Address further C++ code.\n\n    }\n\n\n    get location(): string {\n        return this.#_location;\n    }\n\n    get state(): ConnectionState {\n        return this.#_state;\n    }\n\n    get refusalInfo(): string {\n        return this.#_refusalInfo;\n    }\n\n    get errorInfo(): string {\n        return this.#_errorInfo;\n    }\n\n    set onStateChanged(callback: OnStateChanged) {\n        if (typeof callback === \"function\" || callback === null) {\n            this.#_onStateChanged = callback;\n        } else {\n            console.error(\"ERROR: DomainServer.onStateChanged callback not a function or null!\");\n            this.#_onStateChanged = null;\n        }\n    }\n\n    get contextID(): number {\n        return this.#_contextID;\n    }\n\n\n    /*@sdkdoc\n     *  Initiates connection of the user client to a domain server.\n     *  <p>The following types of location are supported:</p>\n     *  <table>\n     *      <tbody>\n     *          <tr><td><code>WebSocket URL and port</code></td><td>For example, <code>ws://127.0.0.1:40102</code></td></tr>\n     *          <tr><td colspan=\"2\">WEBRTC TODO: Support Vircadia URLs instead (<code>hifi://...</code>, place names,\n     *          ...)</td></tr>\n     *      </tbody>\n     *  </table>\n     *  @param {string} location - The location of the domain server to connect to.\n     */\n    connect(location: string): void {\n        // C++  Application.cpp's domainCheckInTimer.\n        //      AddressManager.handleLoockupString() called in many different locations.\n\n        const oldLocation = this.#_location;\n\n        if (typeof location === \"string\") {\n            this.#_location = location.trim();\n        } else {\n            console.error(\"ERROR: DomainServer.connect() location parameter not a string!\");\n            this.#_location = \"\";\n        }\n\n        if (this.#_location === \"\") {\n            this.#stopDomainServerCheckins();\n            this.#_nodeList.getDomainHandler().disconnect(\"Invalid location\");\n            this.#setState(DomainServer.ERROR, \"No location specified.\");\n            return;\n        }\n\n        // If the domain hasn't changed we don't need to restart with a new connection.\n        // WEBRTC TODO: Test the host rather than the full location value. Perhaps work in with AddressManager's signals,\n        //              hostChanged and possibleDomainChangeRequired.\n        // WEBRTC TODO: If changing domains host a DomainDisconnectRequest should probably be sent to the current domain. The\n        // `            C++ currently doesn't do this so leave this for now.\n        if (this.#_location === oldLocation && this.#_domainCheckInTimer) {\n            return;\n        }\n\n        this.#setState(DomainServer.CONNECTING);\n\n        this.#_addressManager.handleLookupString(location);\n\n        // Start sending domain server check-ins.\n        if (!this.#_domainCheckInTimer) {\n            setTimeout(() => {  // Yield to AddressManager.handleLookupString() and its Signals.\n                if (this.#_state === DomainServer.CONNECTING) {\n                    this.#sendDomainServerCheckIns();\n                }\n            }, 0);\n        }\n\n    }\n\n    /*@sdkdoc\n     *  Disconnects the user client from the domain server.\n     */\n    disconnect(): void {\n        // C++  N/A\n        if (this.#_state === DomainServer.DISCONNECTED) {\n            return;\n        }\n        this.#stopDomainServerCheckins();\n        this.#_nodeList.getDomainHandler().disconnect(\"User disconnected\", true);\n        this.#setState(DomainServer.DISCONNECTED);\n    }\n\n\n    #setState(state: ConnectionState, info = \"\"): void {\n        const hasStateChanged = state !== this.#_state;\n        if (this.#_DEBUG && !hasStateChanged) {\n            console.warn(\"DomainServer: State hasn't changed.\");\n        }\n\n        this.#_state = state;\n        this.#_refusalInfo = \"\";\n        this.#_errorInfo = \"\";\n        if (this.#_state === DomainServer.REFUSED) {\n            this.#_refusalInfo = info;\n        } else if (this.#_state === DomainServer.ERROR) {\n            this.#_errorInfo = info;\n        }\n        if (hasStateChanged && this.#_onStateChanged) {\n            this.#_onStateChanged(state, info);\n        }\n    }\n\n    #sendDomainServerCheckIns(): void {\n        // Schedule next send.\n        this.#_domainCheckInTimer = setTimeout(() => {\n            this.#sendDomainServerCheckIns();\n        }, DomainServer.#DOMAIN_SERVER_CHECK_IN_MSECS);\n\n        // Perform this send.\n        this.#_nodeList.sendDomainServerCheckIn();\n    }\n\n    #stopDomainServerCheckins(): void {\n        if (this.#_domainCheckInTimer !== null) {\n            clearTimeout(this.#_domainCheckInTimer);\n            this.#_domainCheckInTimer = null;\n        }\n    }\n\n\n    // Slot.\n    // eslint-disable-next-line\n    // @ts-ignore\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    #domainConnectionRefused = (reasonMessage: string, reasonCodeInt: number, extraInfo: string): void => {\n        // C++  Application::domainConnectionRefused(const QString& reasonMessage, int reasonCodeInt, const QString& extraInfo)\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this.#setState(ConnectionState.REFUSED, reasonMessage);\n    };\n\n    // Slot.\n    #nodeAdded = (node: Node): void => {\n        // C++  void Application:: nodeAdded(Node* node)\n        if (node.getType() === NodeType.EntityServer) {\n            console.warn(\"DomainServer: EntityServer support implemented!\");\n\n            // WEBRTC TODO: Address further code - for EntityServer node.\n\n        }\n    };\n\n    // Slot.\n    #nodeActivated = (node: Node): void => {\n        // C++  void Application::nodeActivated(Node* node)\n        const nodeType = node.getType();\n\n        // AudioMixer node is handled in AudioMixer.ts.\n\n        if (nodeType === NodeType.AssetServer) {\n            console.warn(\"DomainServer: AssetServer support not implemented!\");\n\n            // WEBRTC TODO: Address further code - for AssetServer node.\n\n        } else if (nodeType === NodeType.EntityServer) {\n            console.warn(\"DomainServer: EntityServer support not implemented!\");\n\n            // WEBRTC TODO: Address further code - for EntityServer node.\n\n        } else if (nodeType === NodeType.AvatarMixer) {\n            console.warn(\"DomainServer: AvatarMixer support not implemented!\");\n\n            // WEBRTC TODO: Address further code - for AvatarMixer node.\n\n        }\n\n    };\n\n    // Slot.\n    #nodeKilled = (node: Node): void => {\n        // C++  void Application::nodeKilled(Node* node)\n\n        const nodeType = node.getType();\n\n        // AudioMixer node is handled in AudioMixer.ts.\n\n        if (nodeType === NodeType.EntityServer) {\n            console.warn(\"DomainServer: EntityServer support not implemented!\");\n\n            // WEBRTC TODO: Address further code - for EntityServer node.\n\n        } else if (nodeType === NodeType.AssetServer) {\n            console.warn(\"DomainServer: AssetServer support not implemented!\");\n\n            // WEBRTC TODO: Address further code - for AssetServer node.\n\n        }\n    };\n\n}\n\nexport default DomainServer;\n","//\n//  AssignmentClient.ts\n//\n//  Created by David Rowe on 19 Aug 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport Node from \"./networking/Node\";\nimport NodeList from \"./networking/NodeList\";\nimport { NodeTypeValue } from \"./networking/NodeType\";\nimport ContextManager from \"./shared/ContextManager\";\n\n\n/*@devdoc\n *  <table>\n *      <thead>\n *          <tr><th>Name</th><th>Value</th><th>Description</th></tr>\n *      </thead>\n *      <tbody>\n *          <tr><td>UNAVAILABLE</td><td><code>0</code></td><td>There is no assignment client of the configured type available -\n *              you're not connected to a domain or the domain doesn't have an assignment client of the type running.</td></tr>\n *          <tr><td>DISCONNECTED</td><td><code>1</code></td><td>Not connected to the assignment client.</td></tr>\n *          <tr><td>CONNECTED</td><td><code>2</code></td><td>Connected to the assignment client.</td></tr>\n *      </tbody>\n *  </table>\n *  @typedef {number} AssignmentClient.State\n */\nexport enum AssignmentClientState {\n    UNAVAILABLE = 0,\n    DISCONNECTED,\n    CONNECTED\n}\n\ntype OnStateChanged = (state: AssignmentClientState) => void;\n\n\n/*@devdoc\n *  The <code>AssignmentClient</code> class provides the base interface for working with assignment clients.\n *  <p>Prerequisite: A {@link DomainServer} object must be created first in order to create the domain context.</p>\n *  @class AssignmentClient\n *  @param {number} contextID - The domain context to use. See {@link DomainServer|DomainServer.contextID}.\n *  @param {NodeType} nodeType - The type of assignment client to work with.\n *\n *  @property {AssignmentClient.State} UNAVAILABLE - There is no assignment client of the type available - you're not connected\n *      to a domain or the domain doesn't have such an assignment client running.\n *      <em>Static. Read-only.</em>\n *  @property {AssignmentClient.State} DISCONNECTED - Not connected to the assignment client.\n *      <em>Static. Read-only.</em>\n *  @property {AssignmentClient.State} CONNECTED - Connected to the assignment client.\n *      <em>Static. Read-only.</em>\n *  @property {AssignmentClient.State} state - The current state of the connection to the assignment client.\n *      <em>Read-only.</em>\n *  @property {AssignmentClient~onStateChanged|null} onStateChanged - Sets a single function to be called when the state of the\n *      assignment client changes. Set to <code>null</code> to remove the callback.\n *      <em>Write-only.</em>\n */\nclass AssignmentClient {\n    // C++  Application.cpp\n\n    /*@devdoc\n     *  Called when the state of the assignment client interface changes.\n     *  @callback AssignmentClient~onStateChanged\n     *  @param {AssignmentClient.State} state - The state of the assignment client interface.\n     */\n\n\n    static get UNAVAILABLE(): AssignmentClientState {\n        return AssignmentClientState.UNAVAILABLE;\n    }\n\n    static get DISCONNECTED(): AssignmentClientState {\n        return AssignmentClientState.DISCONNECTED;\n    }\n\n    static get CONNECTED(): AssignmentClientState {\n        return AssignmentClientState.CONNECTED;\n    }\n\n    /*@devdoc\n     *  Gets the string representing an assignment client interface state.\n     *  <p><em>Static</em></p>\n     *  @param {AssignmentClient.State} state - The state to get the string representation of.\n     *  @returns {string} The string representing the assignment client interface state if a valid state, <code>\"\"</code> if not\n     *      a valid state.\n     */\n    static stateToString(state: AssignmentClientState): string {\n        const text = AssignmentClientState[state];\n        return text ? text : \"\";\n    }\n\n\n    // Context.\n    #_nodeList: NodeList;\n\n    #_nodeType;\n    #_state;\n    #_assignmentClientNode;\n    #_onStateChanged: OnStateChanged | null = null;\n\n\n    constructor(contextID: number, nodeType: NodeTypeValue) {\n\n        this.#_nodeList = ContextManager.get(contextID, NodeList) as NodeList;  // Throws error if invalid context.\n        this.#_nodeType = nodeType;\n\n        // Initial state.\n        this.#_assignmentClientNode = this.#_nodeList.soloNodeOfType(this.#_nodeType);\n        if (this.#_assignmentClientNode === null) {\n            this.#_state = AssignmentClient.UNAVAILABLE;\n        } else if (this.#_assignmentClientNode.getActiveSocket() === null) {\n            this.#_state = AssignmentClient.DISCONNECTED;\n        } else {\n            this.#_state = AssignmentClient.CONNECTED;\n        }\n\n        // Changes in state.\n        this.#_nodeList.nodeAdded.connect((node: Node) => {\n            if (node.getType() === this.#_nodeType) {\n                this.#_assignmentClientNode = node;\n                this.#setState(AssignmentClient.DISCONNECTED);\n            }\n        });\n        this.#_nodeList.nodeKilled.connect((node: Node) => {\n            if (node === this.#_assignmentClientNode) {\n                this.#_assignmentClientNode = null;\n                this.#setState(AssignmentClient.UNAVAILABLE);\n            }\n        });\n        this.#_nodeList.nodeActivated.connect((node: Node) => {\n            if (node === this.#_assignmentClientNode) {\n                this.#setState(AssignmentClient.CONNECTED);\n            }\n        });\n        this.#_nodeList.nodeSocketUpdated.connect((node: Node) => {\n            if (node === this.#_assignmentClientNode) {\n                this.#setState(AssignmentClient.DISCONNECTED);\n            }\n        });\n    }\n\n\n    // Gets the state property value.\n    get state(): AssignmentClientState {\n        return this.#_state;\n    }\n\n    // Sets the state-changed callback property value.\n    set onStateChanged(callback: OnStateChanged) {\n        if (typeof callback === \"function\" || callback === null) {\n            this.#_onStateChanged = callback;\n        } else {\n            console.error(\"ERROR: AssignmentClient.onStateChanged callback not a function or null!\");\n            this.#_onStateChanged = null;\n        }\n    }\n\n\n    // Sets the state and calls the state-changed callback.\n    #setState(state: number): void {\n        const previousState = this.#_state;\n        this.#_state = state;\n        if (state !== previousState && this.#_onStateChanged) {\n            this.#_onStateChanged(this.#_state);\n        }\n    }\n\n}\n\nexport default AssignmentClient;\n","//\n//  AudioOutput.ts\n//\n//  Created by David Rowe on 19 Sep 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport assert from \"../shared/assert\";\nimport AudioConstants from \"../audio/AudioConstants\";\n\n// eslint-disable-next-line\n// @ts-ignore\nimport audioOutputProcessorURL from \"worklet-loader!../worklets/AudioOutputProcessor\";\n\n\n/*@devdoc\n *  The <code>AudioOutput</code> class provides an output Web Audio MediaStream generated from raw audio data received from the\n *  audio mixer.\n *  <p>C++: <code>N/A</code></p>\n *\n *  @class AudioOutput\n *  @property {string} contextItemType=\"AudioOutput\" - The type name for use with the {@link ContextManager}.\n *      <p><em>Static. Read-only.</em></p>\n *\n *  @property {MediaStream} audioOuput - The audio output stream to be played in the user client.\n *      <em>Read-only.</em>\n *      <p>This should be accessed after the user has interacted with the web page in some manner, otherwise a warning will be\n *      generated in the console log because Web Audio requires user input on the page in order for audio to play. See:\n *      {@link https://developer.mozilla.org/en-US/docs/Web/Media/Autoplay_guide|Autoplay guide for media and Web Audio APIs}.\n */\nclass AudioOutput {\n    //  C++ N/A - This is a Web SDK-specific class.\n\n    static readonly contextItemType = \"AudioOutput\";\n\n\n    #_audioContext: AudioContext | null = null;\n    #_oscillatorNode: OscillatorNode | null = null;\n    #_audioWorkletNode: AudioWorkletNode | null = null;\n    #_audioWorkletPort: MessagePort | null = null;\n    #_streamDestination: MediaStreamAudioDestinationNode | null = null;\n\n    #_isPlaying = false;\n\n    // FIXME: The AudioWorkletProcessor data blocks size may change and even be variable in the future.\n    // https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletProcessor/process\n    readonly #AUDIOWORKLETPROCESSOR_DATA_BLOCKS_SIZE = 256;  // 128 samples for each of two channels.\n    #_outputArray = new Int16Array(this.#AUDIOWORKLETPROCESSOR_DATA_BLOCKS_SIZE);\n    #_outputArrayLength = this.#AUDIOWORKLETPROCESSOR_DATA_BLOCKS_SIZE;\n    #_outputOffset = 0;  // The next write position.\n\n\n    get audioOutput(): MediaStream {\n        // C++  N/A\n        if (!this.#_audioContext) {\n            void this.#setUpAudioContext();\n        }\n        assert(this.#_streamDestination !== null);\n        return this.#_streamDestination.stream;\n    }\n\n\n    /*@devdoc\n     *  Starts or resumes playing audio received from the audio mixer, if it isn't already playing.\n     *  <p>This must be called after the user has interacted with the web page in some manner, otherwise the audio will not\n     *  play. See\n     *  {@link https://developer.mozilla.org/en-US/docs/Web/Media/Autoplay_guide|Autoplay guide for media and Web Audio APIs}.\n     *  </p>\n     *  <p><em>Async</em></p>\n     *  @async\n     *  @returns {Promise<void>}\n     */\n    async play(): Promise<void> {\n        // C++  N/A\n        if (!this.#_audioContext) {\n            await this.#setUpAudioContext();\n        }\n        assert(this.#_audioContext !== null);\n        if (this.#_audioContext.state === \"suspended\") {\n            await this.#_audioContext.resume();\n        }\n        this.#_isPlaying = true;\n    }\n\n    /*@devdoc\n     *  Suspends playing audio received from the audio mixer. This halts hardware processing, reducing CPU/battery usage.\n     *  <p><em>Async</em></p>\n     *  @async\n     *  @returns {Promise<void>}\n     */\n    async pause(): Promise<void> {\n        // C++  N/A\n        if (!this.#_audioContext) {\n            return;\n        }\n        await this.#_audioContext.suspend();\n        this.#_isPlaying = false;\n    }\n\n    /*@devdoc\n     *  Writes PCM audio data to the audio output stream via an {@link AudioOutputProcessor} Web Audio worklet.\n     *  The number of frames received each packet from the audio mixer\n     *  ({@link AudioConstants|AudioConstants.NETWORK_FRAME_SAMPLES_PER_CHANNEL}) is different to the number of frames needed\n     *  in each data block that the audio worklet processes. This method buffers frames as necessary and writes correctly sized\n     *  data blocks to the audio worklet.\n     *  @param {Int16Array} pcmData - The PCM audio data to output.\n     */\n    writeData(pcmData: Int16Array): void {\n        // C++  N/A\n        if (!this.#_audioWorkletPort || !this.#_isPlaying) {\n            return;\n        }\n\n        let outputArray = this.#_outputArray;\n        const outputLength = this.#_outputArrayLength;\n        let index = this.#_outputOffset;\n\n        for (const value of pcmData) {\n            outputArray[index] = value;\n            index += 1;  // Next index.\n\n            if (index === outputLength) {\n                // The current output array is full. Send it off.\n\n                // Could use a SharedArrayBuffer which may be more efficient but this isn't well-supported on mobile devices at\n                // present (Sep 2021).\n                this.#_audioWorkletPort.postMessage(outputArray.buffer, [this.#_outputArray.buffer]);\n\n                this.#_outputArray = new Int16Array(this.#AUDIOWORKLETPROCESSOR_DATA_BLOCKS_SIZE);\n                outputArray = this.#_outputArray;\n                index = 0;\n            }\n        }\n\n        this.#_outputOffset = index;  // Starting point for next packet of audio.\n    }\n\n\n    // Sets up the AudioContext etc.\n    async #setUpAudioContext(): Promise<void> {\n        // C++  N/A\n        assert(this.#_audioContext === null);\n\n        this.#_audioContext = new AudioContext({\n            // The audio stream is at the Vircadia audio sample rate. Browsers convert this to their required hardware rate.\n            sampleRate: AudioConstants.SAMPLE_RATE\n        });\n\n        // AudioStream output.\n        // Create this before async operations so that audioOutput property can be retrieved via audioOuput while setting up.\n        this.#_streamDestination = this.#_audioContext.createMediaStreamDestination();\n\n        // Use an oscillator node to trigger output generation.\n        // FIXME: An oscillator node shouldn't be necessary. Chrome/Edge doesn't require this but Firefox does (Sep 2021).\n        this.#_oscillatorNode = this.#_audioContext.createOscillator();\n\n        // Audio worklet.\n        if (!this.#_audioContext.audioWorklet) {\n            console.error(\"Cannot set up audio output stream. App may not be being served via HTTPS or from localhost.\");\n            return;\n        }\n        await this.#_audioContext.audioWorklet.addModule(audioOutputProcessorURL);\n        this.#_audioWorkletNode = new AudioWorkletNode(this.#_audioContext, \"vircadia-audio-output-processor\", {\n            // FIXME: Chrome/Edge requires number of inputs > 0 in order for the worklet to generate output (Sep 2021).\n            numberOfInputs: 1,\n            numberOfOutputs: 1,\n            channelCount: 2,\n            channelCountMode: \"explicit\"\n        });\n        this.#_audioWorkletPort = this.#_audioWorkletNode.port;\n\n        // Wire up the nodes.\n        this.#_oscillatorNode.connect(this.#_audioWorkletNode);\n        this.#_audioWorkletNode.connect(this.#_streamDestination);\n        this.#_oscillatorNode.start();\n    }\n\n}\n\nexport default AudioOutput;\n","//\n//  AudioClient.ts\n//\n//  Created by David Rowe on 15 Sep 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport AudioConstants from \"../audio/AudioConstants\";\nimport AudioInput from \"../audio/AudioInput\";\nimport InboundAudioStream from \"../audio/InboundAudioStream\";\nimport NLPacket from \"../networking/NLPacket\";\nimport Node from \"../networking/Node\";\nimport NodeList from \"../networking/NodeList\";\nimport NodeType from \"../networking/NodeType\";\nimport PacketReceiver from \"../networking/PacketReceiver\";\nimport ReceivedMessage from \"../networking/ReceivedMessage\";\nimport SockAddr from \"../networking/SockAddr\";\nimport PacketScribe from \"../networking/packets/PacketScribe\";\nimport PacketType, { PacketTypeValue } from \"../networking/udt/PacketHeaders\";\nimport assert from \"../shared/assert\";\nimport ContextManager from \"../shared/ContextManager\";\n\n\n/*@devdoc\n *  The <code>AudioClient</code> class manages user client audio, sending and receiving audio packets and interfacing these\n *  with Web Audio streams.\n *  <p>C++: <code>AudioClient : public AbstractAudioInterface, public Dependency</code></p>\n *\n *  @class AudioClient\n *  @property {string} contextItemType=\"AudioClient\" - The type name for use with the {@link ContextManager}.\n *      <p><em>Static. Read-only.</em></p>\n *\n *  @param {number} contextID - The {@link ContextManager} context ID.\n */\nclass AudioClient {\n    // C++  AudioClient : public AbstractAudioInterface, public Dependency\n    //      AbstractAudioInterface : public QObject\n\n    static readonly contextItemType = \"AudioClient\";\n\n    static readonly #RECEIVED_AUDIO_STREAM_CAPACITY_FRAMES = 100;\n\n\n    // Context\n    #_nodeList;\n    #_packetReceiver;\n\n    #_selectedCodecName = \"\";\n\n    #_audioInput;\n    #_isStereoInput = false;\n    #_isMuted = false;\n\n    #_dummyAudioInputTimer: ReturnType<typeof setTimeout> | null = null;\n    #_outgoingAvatarAudioSequenceNumber = 0;\n\n    #_receivedAudioStream;\n\n    // WEBRTC TODO: Set these via the API.\n    #_audioPosition = { x: 0, y: 1, z: 0 };\n    #_audioOrientation = { x: 0, y: 0, z: 0, w: 1.0 };\n    #_avatarBoundingBoxCorner = { x: -0.5, y: 0.0, z: -0.5 };\n    #_avatarBoundingBoxScale = { x: 1, y: 2, z: 1 };\n\n\n    constructor(contextID: number) {\n\n        // Context\n        this.#_nodeList = ContextManager.get(contextID, NodeList) as NodeList;\n        this.#_packetReceiver = this.#_nodeList.getPacketReceiver();\n\n        this.#_audioInput = new AudioInput();\n\n        // This field is not a MixedProcessedAudioStream in the Web SDK version of AudioClient because the features of\n        // MixedProcessedAudioStream haven't been needed so far.\n        this.#_receivedAudioStream = new InboundAudioStream(contextID, AudioConstants.STEREO,\n            AudioConstants.NETWORK_FRAME_SAMPLES_PER_CHANNEL, AudioClient.#RECEIVED_AUDIO_STREAM_CAPACITY_FRAMES, -1);\n\n        // C++  Application::Application()\n        this.#start();\n        this.#_nodeList.nodeActivated.connect(this.#nodeActivated);\n        this.#_nodeList.nodeKilled.connect(this.#nodeKilled);\n\n        // C++  AudioClient::AudioClient()\n        this.#_packetReceiver.registerListener(PacketType.SelectedAudioFormat,\n            PacketReceiver.makeUnsourcedListenerReference(this.#handleSelectedAudioFormat));\n        this.#_packetReceiver.registerListener(PacketType.SilentAudioFrame,\n            PacketReceiver.makeUnsourcedListenerReference(this.#handleAudioDataPacket));\n        this.#_packetReceiver.registerListener(PacketType.MixedAudio,\n            PacketReceiver.makeUnsourcedListenerReference(this.#handleAudioDataPacket));\n        this.#_packetReceiver.registerListener(PacketType.AudioStreamStats,\n            PacketReceiver.makeSourcedListenerReference(this.#processStreamStatsPacket));\n        this.#_packetReceiver.registerListener(PacketType.AudioEnvironment,\n            PacketReceiver.makeUnsourcedListenerReference(this.#handleAudioEnvironmentDataPacket));\n    }\n\n\n    /*@devdoc\n     *  Sets the MediaStream to use for audio input.\n     *  @function AudioClient.switchInputDevice\n     *  @param {MediaStream|null} inputDevice - The audio input stream from the user client to be sent to the audio mixer.\n     *      <code>null</code> for no input device.\n     */\n    async switchInputDevice(inputDevice: MediaStream | null): Promise<boolean> {\n        // C++  bool AudioClient::switchAudioDevice(QAudio::Mode mode, const HifiAudioDeviceInfo& deviceInfo)\n        //      The mode parameter, which switches between input and output, isn't applicable to the SDK because the SDK output\n        //      is always a MediaStream, not a particular device.\n        //      The method has been renamed accordingly.\n        //      The deviceInfo parameter has been repurposed to be an input MediaStream or null.\n        return this.#switchInputToAudioDevice(inputDevice);\n    }\n\n\n    /*@devdoc\n     *  Sets whether input audio is muted.\n     *  @function AudioClient.setMuted\n     *  @param {boolean} muted - <code>true</code> to mute the audio input so that it is not sent to the audio mixer,\n     *      <code>false</code> to let it be sent.\n     */\n    setMuted(muted: boolean): void {\n        // C++  void AudioClient::setMuted(bool muted, bool emitSignal)\n        if (muted !== this.#_isMuted) {\n            this.#_isMuted = muted;\n\n            // WEBRTC TODO: Address further C++c code.\n            // The emitSignal parameter is currently not used because it is for the scripting API.\n\n            if (this.#_isMuted) {\n                void this.#_audioInput.suspend();\n            } else {\n                void this.#_audioInput.resume();\n            }\n\n        }\n    }\n\n    /*@devdoc\n     *  Gets whether audio input is muted.\n     *  @function AudioClient.isMuted\n     *  @returns {boolean} <code>true</code> if audio input is muted, <code>false</code> if it isn't.\n     */\n    isMuted(): boolean {\n        // C++  bool isMuted()\n        return this.#_isMuted;\n    }\n\n\n    #start(): void {\n        // C++  void AudioClient::start()\n\n        // WEBRTC TODO: Address further C++ code.\n\n        void this.#switchInputToAudioDevice(null);\n        // this.switchOutputToAudioDevice() is not used in the Web SDK.\n    }\n\n    async #switchInputToAudioDevice(inputDevice: MediaStream | null, isShutdownRequest = false): Promise<boolean> {\n        // C++  bool switchInputToAudioDevice(const HifiAudioDeviceInfo inputDeviceInfo, bool isShutdownRequest = false)\n\n        const inputDeviceAudioInfo = inputDevice ? inputDevice.getAudioTracks()[0] : null;\n        const deviceName = inputDeviceAudioInfo ? inputDeviceAudioInfo.label : \"\";\n        const inputDeviceAudioSettings = inputDeviceAudioInfo ? inputDeviceAudioInfo.getSettings() : null;\n        let channelCount = 0;\n        let sampleRate = 0;\n        let sampleSize = 0;\n        let echoCancellation = false;\n        if (inputDeviceAudioSettings) {\n            // FIXME: Typings currently don't include channelCount doesn't exist on MediaTrackSettings (Sep 2021).\n            /* eslint-disable */\n            // @ts-ignore\n            channelCount = inputDeviceAudioSettings.channelCount ? inputDeviceAudioSettings.channelCount : 0;\n            /* eslint-enable */\n            sampleRate = inputDeviceAudioSettings.sampleRate ? inputDeviceAudioSettings.sampleRate : 0;\n            sampleSize = inputDeviceAudioSettings.sampleSize ? inputDeviceAudioSettings.sampleSize : 0;\n            echoCancellation = inputDeviceAudioSettings.echoCancellation\n                ? inputDeviceAudioSettings.echoCancellation\n                : false;\n        }\n        console.log(\"[audioclient] Input device info:\", inputDeviceAudioSettings\n            ? `${deviceName}, ${channelCount} channels, ${sampleRate}Hz, ${sampleSize} bits, `\n                + `echo cancellation ${echoCancellation ? \"on\" : \"off\"}`\n            : null);\n\n        let supportedFormat = false;\n\n        // The SDK just uses the number of channels that the input device has, up to a maximum of 2 (stereo).\n        this.#_isStereoInput = channelCount >= 2;\n\n        if (this.#_audioInput.isStarted()) {\n            this.#_audioInput.readyRead.disconnect(this.#handleMicAudioInput);\n            await this.#_audioInput.stop();\n        }\n\n        // WEBRTC TODO: Address further C++.\n\n        if (this.#_dummyAudioInputTimer) {\n            clearTimeout(this.#_dummyAudioInputTimer);\n            this.#_dummyAudioInputTimer = null;\n        }\n\n        // WEBRTC TODO: Address further C++.\n\n        if (isShutdownRequest) {\n            console.log(\"[audioclient] The audio input device has shut down.\");\n            return true;\n        }\n\n        this.#_audioInput.audioInput = inputDevice;\n\n        if (inputDevice) {\n\n            assert(channelCount > 0);\n\n            // WEBRTC TODO: Address further C++.\n\n            let isStarted = false;\n            await this.#_audioInput.start().then((started) => {\n                isStarted = started;\n            });\n\n            if (isStarted) {\n                this.#_audioInput.readyRead.connect(this.#handleMicAudioInput);\n                supportedFormat = true;\n            } else {\n                console.error(\"[audioclient] Error starting audio input -\", this.#_audioInput.errorString());\n            }\n        }\n\n        if (!supportedFormat) {\n            console.log(\"[audioclient] Audio input device is not available, using dummy input.\");\n\n            // WEBRTC TODO: Address further C++.\n\n            this.#_dummyAudioInputTimer = setTimeout(() => {\n                this.#handleDummyAudioInput();\n            }, AudioConstants.NETWORK_FRAME_MSECS);\n        }\n\n        return supportedFormat;\n    }\n\n    #negotiateAudioFormat(): void {\n        // C++  void negotiateAudioFormat()\n\n        // WEBRTC TODO: Address further C++ code.\n        const codecs = [\n            // \"opus\",\n            // \"zlib\",\n            \"pcm\"\n        ];\n\n        const negotiateFormatPacket = PacketScribe.NegotiateAudioFormat.write({\n            codecs\n        });\n\n        const audioMixer = this.#_nodeList.soloNodeOfType(NodeType.AudioMixer);\n        if (audioMixer) {\n            this.#_nodeList.sendPacket(negotiateFormatPacket, audioMixer);\n        }\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    #audioMixerKilled(): void {\n        // C++  void AudioClient::audioMixerKilled()\n\n        this.#_outgoingAvatarAudioSequenceNumber = 0;\n\n        // WEBRTC TODO: Address further C++ code.\n\n        if (this.#_audioInput.isStarted()) {\n            void this.#_audioInput.stop();\n        }\n    }\n\n    #handleAudioInput(audioBuffer: Int16Array | null): void {\n        // C++  void AudioClient::handleAudioInput(QByteArray& audioBuffer)\n\n        // An audio gate is not the responsibility of the AudioMixer SDK class.\n        // The inputReceived signal is solely used for avatar recordings, the scripting API, and the audioscope.\n\n        // WEBRTC TODO: Address further C++ code.\n\n        const packetType = audioBuffer === null || this.#_isMuted\n            ? PacketType.SilentAudioFrame\n            : PacketType.MicrophoneAudioNoEcho;\n\n        // WEBRTC TODO: Address further C++ code.\n\n        // No codec support at present.\n        const encodedAudio = audioBuffer ? new Uint8Array(audioBuffer.buffer) : null;\n\n        this.#emitAudioPacket(packetType, encodedAudio);\n\n        // WEBRTC TODO: Address further C++ code.\n\n    }\n\n    #handleDummyAudioInput(): void {\n        // C++  void AudioClient::handleDummyAudioInput()\n\n        this.#handleAudioInput(null);\n\n        this.#_dummyAudioInputTimer = setTimeout(() => {\n            this.#handleDummyAudioInput();\n        }, AudioConstants.NETWORK_FRAME_MSECS);\n    }\n\n    #emitAudioPacket(packetType: PacketTypeValue, audioBuffer: Uint8Array | null): void {\n        // C++  void AbstractAudioInterface::emitAudioPacket(const void* audioData, size_t bytes, quint16 & sequenceNumber,\n        //          bool isStereo, const Transform& transform, glm::vec3 avatarBoundingBoxCorner,\n        //          glm::vec3 avatarBoundingBoxScale, PacketType packetType, QString codecName)\n\n        const audioMixer = this.#_nodeList.soloNodeOfType(NodeType.AudioMixer);\n        if (!audioMixer || !audioMixer.getActiveSocket()) {\n            return;\n        }\n\n        assert(packetType === PacketType.SilentAudioFrame || packetType === PacketType.MicrophoneAudioNoEcho);\n\n        this.#_outgoingAvatarAudioSequenceNumber += 1;\n\n        // WEBRTC TODO: Address further C++ code.\n\n        let audioPacket: NLPacket | null = null;\n        if (packetType === PacketType.SilentAudioFrame) {\n            audioPacket = PacketScribe.SilentAudioFrame.write({\n                sequenceNumber: this.#_outgoingAvatarAudioSequenceNumber,\n                codecName: this.#_selectedCodecName,\n                numSilentSamples: this.#_isStereoInput\n                    ? AudioConstants.NETWORK_FRAME_SAMPLES_STEREO\n                    : AudioConstants.NETWORK_FRAME_SAMPLES_PER_CHANNEL,\n                audioPosition: this.#_audioPosition,\n                audioOrientation: this.#_audioOrientation,\n                avatarBoundingBoxCorner: this.#_avatarBoundingBoxCorner,\n                avatarBoundingBoxScale: this.#_avatarBoundingBoxScale\n            });\n        } else {\n            assert(audioBuffer !== null);\n            audioPacket = PacketScribe.MicrophoneAudioNoEcho.write({\n                sequenceNumber: this.#_outgoingAvatarAudioSequenceNumber,\n                codecName: this.#_selectedCodecName,\n                isStereo: this.#_isStereoInput,\n                audioPosition: this.#_audioPosition,\n                audioOrientation: this.#_audioOrientation,\n                avatarBoundingBoxCorner: this.#_avatarBoundingBoxCorner,\n                avatarBoundingBoxScale: this.#_avatarBoundingBoxScale,\n                audioBuffer\n            });\n        }\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this.#_nodeList.sendUnreliablePacket(audioPacket, audioMixer.getActiveSocket() as SockAddr,\n            audioMixer.getAuthenticateHash());\n    }\n\n    #selectAudioFormat(selectedCodecName: string): void {\n        // C++  void selectAudioFormat(const QString& selectedCodecName)\n\n        this.#_selectedCodecName = selectedCodecName;\n\n        console.log(\"[audioclient] Selected codec:\", this.#_selectedCodecName, \"; Is stereo input:\", this.#_isStereoInput);\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this.#_receivedAudioStream.cleanupCodec();\n        this.#_receivedAudioStream.setupCodec(this.#_selectedCodecName);\n\n        // WEBRTC TODO: Address further C++ code.\n\n    }\n\n\n    // Listener\n    // eslint-disable-next-line class-methods-use-this\n    #handleSelectedAudioFormat = (message: ReceivedMessage): void => {\n        // C++  void handleSelectedAudioFormat(ReceivedMessage* message)\n\n        const info = PacketScribe.SelectedAudioFormat.read(message.getMessage());\n        this.#selectAudioFormat(info.selectedCodecName);\n    };\n\n    // Listener\n    // eslint-disable-next-line class-methods-use-this\n    #handleAudioDataPacket = (message: ReceivedMessage): void => {\n        // C++  void handleAudioDataPacket(ReceivedMessage* message)\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this.#_receivedAudioStream.parseData(message);\n    };\n\n    // Listener\n    // eslint-disable-next-line\n    // @ts-ignore\n    #processStreamStatsPacket = (message: ReceivedMessage, sendingNode?: Node): void => {  // eslint-disable-line\n        // C++  void AudioIOStats::processStreamStatsPacket(ReceivedMessage*, Node* sendingNode)\n\n        console.warn(\"AudioClient: AudioStreamStats packet not processed.\");\n\n        // WEBRTC TODO: Address further C++ code.\n\n    };\n\n    // Listener\n    // eslint-disable-next-line\n    // @ts-ignore\n    #handleAudioEnvironmentDataPacket = (message: ReceivedMessage): void => {  // eslint-disable-line\n        // C++  void handleAudioEnvironmentDataPacket(ReceivedMessage* message)\n\n        console.warn(\"AudioClient: AudioEnvironment packet not processed.\");\n\n        // WEBRTC TODO: Address further C++ code.\n\n    };\n\n\n    // Slot\n    #nodeActivated = (node: Node): void => {\n        // C++  Various\n        const nodeType = node.getType();\n        if (nodeType !== NodeType.AudioMixer) {\n            return;\n        }\n\n        // C++  void Application::nodeActivated(Node* node)\n        this.#negotiateAudioFormat();\n    };\n\n    // Slot\n    #nodeKilled = (node: Node): void => {\n        // C++  Various\n        const nodeType = node.getType();\n        if (nodeType !== NodeType.AudioMixer) {\n            return;\n        }\n\n        // C++  void Application::nodeKilled(Node* node)\n        this.#audioMixerKilled();\n    };\n\n    // Slot\n    #handleMicAudioInput = (): void => {\n        // C++  void AudioClient::handleMicAudioInput()\n\n        // The input buffering and chunking into packet-sized data is implemented in AudioInputProcessor.\n\n        // WEBRTC TODO: Address further C++ code.\n\n        while (this.#_audioInput.hasPendingFrame()) {\n            const pcmData = this.#_audioInput.readFrame();\n\n            // WEBRTC TODO: Address further C++ code.\n\n            this.#handleAudioInput(pcmData);\n        }\n    };\n\n}\n\nexport default AudioClient;\n","//\n//  AudioInput.ts\n//\n//  Created by David Rowe on 24 Sep 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport AudioConstants from \"../audio/AudioConstants\";\nimport assert from \"../shared/assert\";\nimport Signal from \"../shared/Signal\";\n\n// eslint-disable-next-line\n// @ts-ignore\nimport audioInputProcessorURL from \"worklet-loader!../worklets/AudioInputProcessor\";\n\n\n/*@devdoc\n *  The <code>AudioInput</code> provides PCM audio data for the audio mixer generated from an input Web Audio MediaStream. The\n *  data are provided as protocol-ready network frames comprising 240 audio sample frames, ready to be encoded and sent to the\n *  audio mixer.\n *  <p>C++: QAudioInput, QIODevice</p>\n *  @class AudioInput\n *  @property {MediaStream | null} audioInput - The user client's audio input stream.\n *      <em>Write-only.</em>\n *      <p>This must be set to a non-null value only when the audio input isn't running (hasn't been started or has been\n *      stopped). Setting to <code>null</code> stops the audio input if it is running.</p>\n */\nclass AudioInput {\n    // C++  QAudioInput, QIODevice\n    //      Adapted for the particular case of providing data for the Vircadia protocol.\n\n    #_audioInput: MediaStream | null = null;\n\n    #_audioContext: AudioContext | null = null;\n    #_audioStreamSource: MediaStreamAudioSourceNode | null = null;\n    #_audioInputProcessor: AudioWorkletNode | null = null;\n    #_audioInputProcessorPort: MessagePort | null = null;\n\n    #_isStarted = false;\n    #_isSuspended = false;\n    #_errorString = \"\";\n    #_frameBuffer: Array<Int16Array> = [];\n\n    #_readyRead = new Signal();\n\n\n    set audioInput(audioInput: MediaStream | null) {\n        // C++  N/A\n        if (audioInput && this.#_isStarted) {\n            console.error(\"Cannot set the audio input while it is running!\");\n            return;\n        }\n\n        if (audioInput === null && this.#_isStarted) {\n            void this.stop();\n        }\n\n        this.#_audioInput = audioInput;\n    }\n\n\n    /*@devdoc\n     *  Gets whether audio input processing has been started, i.e., it is running (possibly suspended) and hasn't been stopped.\n     *  @function AudioInput.isStarted\n     *  @returns {boolean} <code>true</code> if audio input processing has been started and hasn't been stopped,\n     *      <code>false</code> if it hasn't been started or has been stopped.\n     */\n    isStarted(): boolean {\n        // C++  N/A\n        return this.#_isStarted;\n    }\n\n    /*@devdoc\n     *  Gets whether audio input processing has been suspended. It may be suspended while it isn't running.\n     *  @function AudioInput.isSuspended\n     *  @returns {boolean} <code>true</code> if audio processing is suspended, <code>false</code> if it isn't.\n     */\n    isSuspended(): boolean {\n        // C++  N/A\n        return this.#_isSuspended;\n    }\n\n    /*@devdoc\n     *  Sets up and starts audio processing.\n     *  <p>If audio processing is suspended, the audio processing starts up in the suspected stat.</p>\n     *  @function AudioInput.start\n     *  @returns {Promise<boolean>} <code>true</code> if audio processing was successfully started, <code>false</code> if it\n     *      wasn't. Information on any error is reported in {@link AudioInput.errorString};\n     */\n    async start(): Promise<boolean> {\n        // C++  QAudioInput.start()\n        assert(!this.#_isStarted);\n        this.#_errorString = \"\";\n\n        if (this.#_audioInput === null) {\n            this.#_errorString = \"Cannot start null audio input!\";\n            return false;\n        }\n\n        this.#_isStarted = true;\n\n        if (!this.#_audioContext) {\n            const isSetUp = await this.#setUpAudioContext();\n            if (!isSetUp) {\n                return false;\n            }\n        }\n        assert(this.#_audioContext !== null);\n\n        if (this.#_isSuspended) {\n            if (this.#_audioContext.state === \"running\") {\n                await this.#_audioContext.suspend();\n            }\n        } else if (this.#_audioContext.state === \"suspended\") {\n            await this.#_audioContext.resume();\n        }\n\n        return true;\n    }\n\n    /*@devdoc\n     *  Suspends audio processing. This halts hardware processing, reducing CPU/battery usage.\n     *  @function AudioInput.suspend\n     *  @returns {Promise<void>}\n     */\n    async suspend(): Promise<void> {\n        // C++  QAudioInput::suspend()\n        assert(!this.#_isSuspended);\n        this.#_isSuspended = true;\n\n        if (this.#_audioContext) {\n            await this.#_audioContext.suspend();\n        }\n\n        this.#_audioInputProcessorPort?.postMessage(\"clear\");\n        this.#_frameBuffer = [];\n    }\n\n    /*@devdoc\n     *  Resumes audio processing from a suspended state.\n     *  @function AudioInput.resume\n     *  @returns {Promise<void>}\n     */\n    async resume(): Promise<void> {\n        // C++  QAudioInput::resume()\n        assert(this.#_isSuspended);\n        this.#_isSuspended = false;\n\n        if (this.#_audioContext) {\n            await this.#_audioContext.resume();\n        }\n    }\n\n    /*@devdoc\n     *  Stops audio processing and releases resources.\n     *  @function AudioInput.stop\n     *  @returns {Promise<void>}\n     */\n    async stop(): Promise<void> {\n        // C++  QAudioInput::stop()\n        assert(this.#_isStarted);\n        this.#_isStarted = false;\n\n        if (this.#_audioContext) {\n            await this.#_audioContext.suspend();\n            await this.#_audioContext.close();\n\n            this.#_audioInputProcessorPort = null;\n            this.#_audioInputProcessor = null;\n            this.#_audioStreamSource = null;\n            this.#_audioContext = null;\n        }\n    }\n\n    /*@devdoc\n     *  Gets whether there is a network frame of audio data ready to be read.\n     *  @function AudioInput.hasPendingFrame\n     *  @returns {boolean} <code>true</code> if there is a network frame of audio data ready to be read, <code>false</code> if\n     *      there isn't.\n     */\n    hasPendingFrame(): boolean {\n        // C++  N/A\n        return this.#_frameBuffer.length > 0;\n    }\n\n    /*@devdoc\n     *  Gets the next network frame of audio input data.\n     *  @function AudioInput.readFrame\n     *  @returns {Int16Array|null} The next network frame (240 audio sample frames) of PCM data, or <code>null</code> if there\n     *      was an error getting the next frame.\n     */\n    readFrame(): Int16Array | null {\n        // C++  QIODevice::readAll()\n        let frame: Int16Array | undefined = undefined;\n        if (this.#_frameBuffer.length > 0) {\n            frame = this.#_frameBuffer.pop();\n        }\n        if (frame === undefined) {\n            this.#_errorString = \"Unexpected read of empty audio input buffer!\";\n            console.error(this.#_errorString);\n            return null;\n        }\n        return frame;\n    }\n\n    /*@devdoc\n     *  Gets a description of the last error that occurred during the current audio processing run.\n     *  @function AudioInput.errorString\n     *  @returns {string} The description of the last error that occurred.\n     */\n    errorString(): string {\n        // C++  QIODevice::errorString()\n        return this.#_errorString;\n    }\n\n\n    /*@devdoc\n     *  Triggered each time a new network frame of audio input is available for reading.\n     *  @function AudioInput.readyRead\n     *  @returns {Signal}\n     */\n    get readyRead(): Signal {\n        // C++  QIODevice::readyRead()\n        return this.#_readyRead;\n    }\n\n\n    /*@devdoc\n     *  Receives the next network frame of data from the audio input from the {@link AudioInputProcessor} used, triggering a\n     *  {@link AudioInput.readyRead} signal.\n     *  @function AudioInput.processAudioInputString\n     *  @param {MessageEvent<ArrayBuffer>} The PCM audio data.\n     *  @returns {Slot}\n     */\n    processAudioInputMessage = (message: MessageEvent<ArrayBuffer>): void => {\n        // C++  N/A\n\n        const frame = new Int16Array(message.data);\n        this.#_frameBuffer.push(frame);\n\n        // WEBRTC TODO: Could perhaps throttle the #_readyRead.emit()s on the understanding that multiple packets will be\n        // processed by the method connected to the signal.\n        this.#_readyRead.emit();\n    };\n\n\n    // Sets up the AudioContext etc.\n    async #setUpAudioContext(): Promise<boolean> {\n        // C++  N/A\n        assert(this.#_audioContext === null);\n        assert(this.#_audioInput !== null);\n\n        this.#_audioContext = new AudioContext({\n            // The audio stream is at the Vircadia audio sample rate. Browsers convert to this from their hardware rate.\n            sampleRate: AudioConstants.SAMPLE_RATE\n        });\n\n        this.#_audioStreamSource = this.#_audioContext.createMediaStreamSource(this.#_audioInput);\n        this.#_audioStreamSource.channelInterpretation = \"discrete\";\n\n        const channelCount = Math.min(this.#_audioStreamSource.mediaStream.getAudioTracks().length, 2);  // Mono or stereo.\n        assert(channelCount > 0);\n        // The channel count has already been checked in AudioClient.#switchInputToAudioDevice().\n\n        // Audio worklet.\n        if (!this.#_audioContext.audioWorklet) {\n            this.#_errorString = \"Cannot set up audio input stream. App may not be being served via HTTPS or from localhost.\";\n            console.error(this.#_errorString);\n            return false;\n        }\n        await this.#_audioContext.audioWorklet.addModule(audioInputProcessorURL);\n        this.#_audioInputProcessor = new AudioWorkletNode(this.#_audioContext, \"vircadia-audio-input-processor\", {\n            numberOfInputs: 1,\n            numberOfOutputs: 0,\n            channelCount,\n            channelCountMode: \"explicit\"\n        });\n        this.#_audioInputProcessorPort = this.#_audioInputProcessor.port;\n        this.#_audioInputProcessorPort.onmessage = this.processAudioInputMessage;\n\n        // Wire up the nodes.\n        this.#_audioStreamSource.connect(this.#_audioInputProcessor);\n\n        return true;\n    }\n\n}\n\nexport default AudioInput;\n","//\n//  InboundAudioStream.ts\n//\n//  Created by David Rowe on 16 Sep 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport AudioOutput from \"../audio/AudioOutput\";\nimport ReceivedMessage from \"../networking/ReceivedMessage\";\nimport { MixedAudioDetails } from \"../networking/packets/MixedAudio\";\nimport PacketScribe from \"../networking/packets/PacketScribe\";\nimport { SilentAudioFrameDetails } from \"../networking/packets/SilentAudioFrame\";\nimport PacketType from \"../networking/udt/PacketHeaders\";\nimport UDT from \"../networking/udt/UDT\";\nimport ContextManager from \"../shared/ContextManager\";\n\n\n/*@devdoc\n *  The <code>InboundAudioStream</code> class manages an inbound audio stream received from the audio mixer.\n *  <p>C++: <code>InboundAudioStream : public NodeData : QObject</code></p>\n *  @class InboundAudioStream\n *  @param {number} contextID - The {@link ContextManager} context ID.\n *  @param {number} numChannels - The number of audio channels. <code>2</code> for stereo.\n *  @param {number} numFrames - The number of samples in a network packet per channel.\n *  @param {number} numBlocks - The number of network packets to handle in the audio ring buffer.\n *  @param {number} numStaticJitterBlocks - The number of network packets to handle in the jitter buffer. <code>-1</code> for\n *      a dynamic jitter buffer.\n */\nclass InboundAudioStream {\n    // C++  InboundAudioStream : public NodeData : QObject\n\n    // Context.\n    #_audioOutput;\n\n    #_selectedCodecName = \"\";\n    #_decoder = null;\n\n\n    /* eslint-disable */\n    // @ts-ignore\n    constructor(contextID: number, numChannels: number, numFrames: number, numBlocks: number, numStaticJitterBlocks: number) {\n        // C++  InboundAudioStream(int numChannels, int numFrames, int numBlocks, int numStaticJitterBlocks)\n\n        // Context.\n        this.#_audioOutput = ContextManager.get(contextID, AudioOutput) as AudioOutput;\n\n        // WEBRTC TODO: Address further C++ code.\n\n    }\n    /* eslint-enable */\n\n\n    /*@devdoc\n     *  Reads and processes <code>MixedAudio</code> and <code>SilentAudioFrame</code> {@link PacketType(1)|messages} received\n     *  from the audio mixer.\n     *  @param {ReceivedMessage} message - The <code>MixedAudio</code> or <code>SilentAudioFrame</code> message to process.\n     *  @returns {number} The number of bytes of the message processed.\n     */\n    parseData(message: ReceivedMessage): number {\n        // C++  int parseData(ReceivedMessage& message)\n\n        let info: MixedAudioDetails | SilentAudioFrameDetails | null = null;\n        if (message.getType() === PacketType.MixedAudio) {\n            info = PacketScribe.MixedAudio.read(message.getMessage());\n        } else {\n            info = PacketScribe.SilentAudioFrame.read(message.getMessage());\n        }\n\n        // WEBRTC TODO: Address further C++ code.\n        // Assume that the packet arrived in order and on time, for now.\n\n        if (message.getType() === PacketType.SilentAudioFrame) {\n            // Possibly drop some of the samples in order to catch up to the desired jitter buffer size.\n            this.#writeDroppableSilentFrames((info as SilentAudioFrameDetails).numSilentSamples);\n        } else {\n            const selectedPCM = this.#_selectedCodecName === \"pcm\" || this.#_selectedCodecName === \"\";\n            const packetPCM = info.codecName === \"pcm\" || info.codecName === \"\";\n            if (info.codecName === this.#_selectedCodecName || packetPCM && selectedPCM) {\n                this.#parseAudioData((info as MixedAudioDetails).audioBuffer);\n\n                // WEBRTC TODO: Address further C++ code.\n\n            } else {\n\n                // WEBRTC TODO: Address further C++ code.\n                console.warn(\"Codec mismatch not handled.\");\n\n            }\n        }\n\n        return message.getMessage().byteLength;\n    }\n\n    /*@devdoc\n     *  Sets the codec to use for processing the audio data received from the audio mixer.\n     *  @param {string} codecName - The name of the codec to use, e.g., <code>\"opus\"</code>.\n     */\n    setupCodec(codecName: string): void {\n        // C++  void setupCodec(CodecPlugin* codec, const QString& codecName, int numChannels)\n        this.cleanupCodec();\n        this.#_selectedCodecName = codecName;\n\n        // WEBRTC TODO: Address further C++ code.\n\n    }\n\n    /*@devdoc\n     *  Removes any current codec, if any, currently being used for processing the audio date received from the audio mixer.\n     */\n    cleanupCodec(): void {\n        // C++  void InboundAudioStream::cleanupCodec()\n\n        // WEBRTC TODO: Address further C++ code.\n\n        this.#_selectedCodecName = \"\";\n    }\n\n\n    // eslint-disable-next-line class-methods-use-this\n    #writeDroppableSilentFrames(silentFrames: number): void {\n        // C++  int writeDroppableSilentFrames(int silentFrames)\n\n        // WEBRTC TODO: Address further C++ code.\n        console.warn(\"InboundAudioStream.#writeDroppableSilentFrames() not implemented. Frames:\", silentFrames);\n\n    }\n\n    #parseAudioData(packetData: DataView): number {\n        // C++  int parseAudioData(const QByteArray& packetAfterStreamProperties)\n\n        let decodedBuffer: Int16Array;  // eslint-disable-line @typescript-eslint/init-declarations\n\n        if (this.#_decoder) {\n\n            // WEBRTC TODO: Address further C++ code.\n            console.warn(\"Codec support not implemented.\", this.#_selectedCodecName);\n            decodedBuffer = new Int16Array();\n\n        } else {\n\n            // Extract PCM data.\n            decodedBuffer = new Int16Array(packetData.byteLength / 2);\n            for (let i = 0, length = decodedBuffer.length; i < length; i++) {\n                decodedBuffer[i] = packetData.getInt16(i * 2, UDT.LITTLE_ENDIAN);\n            }\n\n        }\n\n        // In place of C++'s _ringBuffer use the Web SDK's AudioOutput.\n        this.#_audioOutput.writeData(decodedBuffer);\n\n        return decodedBuffer.byteLength;\n    }\n\n}\n\nexport default InboundAudioStream;\n","//\n//  AudioMixer.ts\n//\n//  Vircadia Web SDK's Audio Mixer API.\n//\n//  Created by David Rowe on 24 Aug 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport AssignmentClient from \"./domain/AssignmentClient\";\nimport AudioOutput from \"./domain/audio/AudioOutput\";\nimport AudioClient from \"./domain/audio-client/AudioClient\";\nimport NodeType from \"./domain/networking/NodeType\";\nimport ContextManager from \"./domain/shared/ContextManager\";\n\n\n/*@sdkdoc\n *  The <code>AudioMixer</code> class provides the interface for working with audio mixer assignment clients.\n *  <p>Prerequisite: A {@link DomainServer} object must be created first in order to create the domain context.</p>\n *  <p>Environment: A web app using the <code>AudioMixer</code> must be served via HTTPS or from <code<localhost</code> in order\n *  for the audio to work.</p>\n *\n *  @class AudioMixer\n *  @extends AssignmentClient\n *  @param {number} contextID - The domain context to use. See {@link DomainServer|DomainServer.contextID}.\n *\n *  @property {AudioMixer.State} UNAVAILABLE - There is no audio mixer available - you're not connected to a domain or the\n *      domain doesn't have an audio mixer running.\n *      <em>Static. Read-only.</em>\n *  @property {AudioMixer.State} DISCONNECTED - Not connected to the audio mixer.\n *      <em>Static. Read-only.</em>\n *  @property {AudioMixer.State} CONNECTED - Connected to the audio mixer.\n *      <em>Static. Read-only.</em>\n *  @property {AudioMixer.State} state - The current state of the connection to the audio mixer.\n *      <em>Read-only.</em>\n *  @property {AudioMixer~onStateChanged|null} onStateChanged - Sets a single function to be called when the state of the\n *      audio mixer changes. Set to <code>null</code> to remove the callback.\n *      <em>Write-only.</em>\n *\n *  @property {MediaStream} audioOuput - The audio output stream to be played in the user client.\n *      <em>Read-only.</em>\n *      <p>This should be accessed after the user has interacted with the web page in some manner, otherwise a warning will be\n *      generated in the console log because Web Audio requires user input on the page in order for audio to play. See:\n *      {@link https://developer.mozilla.org/en-US/docs/Web/Media/Autoplay_guide|Autoplay guide for media and Web Audio APIs}.\n *  @property {MediaStream|null} audioInput - The audio input stream from the user client to be sent to the audio mixer and\n *      played in-world. If <code>null</code> then no audio is played.\n *      <em>Write-only.</em>\n *  @property {boolean} inputMuted=false - <code>true</code> to mute the <code>audioInput</code> so that it is not sent to the\n *      audio mixer, <code>false</code> to let it be sent.\n *      <p>When muted, processing of audio input is suspended. This halts hardware processing, reducing CPU/battery usage.</p>\n */\nclass AudioMixer extends AssignmentClient {\n    // C++  Application.cpp\n\n    // Base class developer documentation is copied here and updated for the SDK documentation.\n\n    /*@sdkdoc\n     *  <table>\n     *      <thead>\n     *          <tr><th>Name</th><th>Value</th><th>Description</th></tr>\n     *      </thead>\n     *      <tbody>\n     *          <tr><td>UNAVAILABLE</td><td><code><code>0</code></td><td>There is no audio mixer available - you're not\n     *              connected to a domain or the domain doesn't have a audio mixer running.</td></tr>\n     *          <tr><td>DISCONNECTED</td><td><code>1</code></td><td>Not connected to the audio mixer.</td></tr>\n     *          <tr><td>CONNECTED</td><td><code>2</code></td><td>Connected to the audio mixer.</td></tr>\n     *      </tbody>\n     *  </table>\n     *  @typedef {number} AudioMixer.State\n     */\n\n    /*@sdkdoc\n     *  Called when the state of the audio mixer changes.\n     *  @callback AudioMixer~onStateChanged\n     *  @param {AudioMixer.State} state - The state of the audio mixer.\n     */\n\n    /*@sdkdoc\n     *  Gets the string representing a audio mixer state.\n     *  <p><em>Static</em></p>\n     *  @function AudioMixer.stateToString\n     *  @param {AudioMixer.State} state - The state to get the string representation of.\n     *  @returns {string} The string representing the audio mixer state if a valid state, <code>\"\"</code> if not a valid\n     *      state.\n     */\n\n\n    #_audioClient;\n    #_audioOutput;\n\n\n    constructor(contextID: number) {\n        super(contextID, NodeType.AudioMixer);\n\n        // Context\n        ContextManager.set(contextID, AudioOutput);\n        ContextManager.set(contextID, AudioClient, contextID);\n        this.#_audioClient = ContextManager.get(contextID, AudioClient) as AudioClient;\n        this.#_audioOutput = ContextManager.get(contextID, AudioOutput) as AudioOutput;\n    }\n\n\n    get audioOuput(): MediaStream {\n        return this.#_audioOutput.audioOutput;\n    }\n\n    set audioInput(audioInput: MediaStream | null) {\n        if (audioInput !== null && !(audioInput instanceof MediaStream)) {\n            console.error(\"Tried to set an invalid AudioMixer.audioInput value!\");\n            return;\n        }\n\n        void this.#_audioClient.switchInputDevice(audioInput).then((success) => {\n            if (!success) {\n                console.warn(\"Could not set the audio input.\");\n            }\n        });\n    }\n\n    get inputMuted(): boolean {\n        return this.#_audioClient.isMuted();\n    }\n\n    set inputMuted(inputMuted: boolean) {\n        if (typeof inputMuted !== \"boolean\") {\n            console.error(\"Tried to set an invalid AudioMixer.inputMuted value!\");\n            return;\n        }\n        this.#_audioClient.setMuted(inputMuted);\n    }\n\n\n    /*@sdkdoc\n     *  Starts or resumes playing audio received from the audio mixer, if it isn't already playing.\n     *  <p>This must be called after the user has interacted with the web page in some manner, otherwise the audio will not\n     *  play. See\n     *  {@link https://developer.mozilla.org/en-US/docs/Web/Media/Autoplay_guide|Autoplay guide for media and Web Audio APIs}.\n     *  </p>\n     *  <p><em>Async</em></p>\n     *  @async\n     *  @returns {Promise<void>}\n     */\n    async play(): Promise<void> {\n        return this.#_audioOutput.play();\n    }\n\n    /*@sdkdoc\n     *  Suspends playing audio received from the audio mixer. This halts hardware processing, reducing CPU/battery usage.\n     *  <p><em>Async</em></p>\n     *  @async\n     *  @returns {Promise<void>}\n     */\n    async pause(): Promise<void> {\n        return this.#_audioOutput.pause();\n    }\n\n}\n\nexport default AudioMixer;\n","//\n//  AvatarMixer.ts\n//\n//  Vircadia Web SDK's Avatar Mixer API.\n//\n//  Created by David Rowe on 24 Aug 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport AssignmentClient from \"./domain/AssignmentClient\";\nimport NodeType from \"./domain/networking/NodeType\";\n\n\n/*@sdkdoc\n *  The <code>AvatarMixer</code> class provides the interface for working with avatar mixer assignment clients.\n *  <p>Prerequisite: A {@link DomainServer} object must be created first in order to create the domain context.</p>\n *  @class AvatarMixer\n *  @extends AssignmentClient\n *  @param {number} contextID - The domain context to use. See {@link DomainServer|DomainServer.contextID}.\n *\n *  @property {AvatarMixer.State} UNAVAILABLE - There is no avatar mixer available - you're not connected to a domain or the\n *      domain doesn't have an avatar mixer running.\n *      <em>Static. Read-only.</em>\n *  @property {AvatarMixer.State} DISCONNECTED - Not connected to the avatar mixer.\n *      <em>Static. Read-only.</em>\n *  @property {AvatarMixer.State} CONNECTED - Connected to the avatar mixer.\n *      <em>Static. Read-only.</em>\n *  @property {AvatarMixer.State} state - The current state of the connection to the avatar mixer.\n *      <em>Read-only.</em>\n *  @property {AvatarMixer~onStateChanged|null} onStateChanged - Sets a single function to be called when the state of the\n *      avatar mixer changes. Set to <code>null</code> to remove the callback.\n *      <em>Write-only.</em>\n */\nclass AvatarMixer extends AssignmentClient {\n    // C++  Application.cpp\n\n    // Base class developer documentation is copied here and updated for the SDK documentation.\n\n    /*@sdkdoc\n     *  <table>\n     *      <thead>\n     *          <tr><th>Name</th><th>Value</th><th>Description</th></tr>\n     *      </thead>\n     *      <tbody>\n     *          <tr><td>UNAVAILABLE</td><td><code>0</code></td><td>There is no avatar mixer available - you're not connected to\n     *              a domain or the domain doesn't have a avatar mixer running.</td></tr>\n     *          <tr><td>DISCONNECTED</td><td><code>1</code></td><td>Not connected to the avatar mixer.</td></tr>\n     *          <tr><td>CONNECTED</td><td><code>2</code></td><td>Connected to the avatar mixer.</td></tr>\n     *      </tbody>\n     *  </table>\n     *  @typedef {number} AvatarMixer.State\n     */\n\n    /*@sdkdoc\n     *  Called when the state of the avatar mixer changes.\n     *  @callback AvatarMixer~onStateChanged\n     *  @param {AvatarMixer.State} state - The state of the avatar mixer.\n     */\n\n    /*@sdkdoc\n     *  Gets the string representing a avatar mixer state.\n     *  <p><em>Static</em></p>\n     *  @function AvatarMixer.stateToString\n     *  @param {AvatarMixer.State} state - The state to get the string representation of.\n     *  @returns {string} The string representing the avatar mixer state if a valid state, <code>\"\"</code> if not a valid\n     *      state.\n     */\n\n    constructor(contextID: number) {\n        super(contextID, NodeType.AvatarMixer);\n    }\n\n}\n\nexport default AvatarMixer;\n","//\n//  MessageMixer.ts\n//\n//  Vircadia Web SDK's Avatar Mixer API.\n//\n//  Created by David Rowe on 23 Aug 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\nimport AssignmentClient from \"./domain/AssignmentClient\";\nimport NodeType from \"./domain/networking/NodeType\";\n\n\n/*@sdkdoc\n *  The <code>MessageMixer</code> class provides the interface for working with message mixer assignment clients.\n *  <p>Prerequisite: A {@link DomainServer} object must be created first in order to create the domain context.</p>\n *  @class MessageMixer\n *  @extends AssignmentClient\n *  @param {number} contextID - The domain context to use. See {@link DomainServer|DomainServer.contextID}.\n *\n *  @property {MessageMixer.State} UNAVAILABLE - There is no message mixer available - you're not connected to a domain or the\n *      domain doesn't have a message mixer running.\n *      <em>Static. Read-only.</em>\n *  @property {MessageMixer.State} DISCONNECTED - Not connected to the message mixer.\n *      <em>Static. Read-only.</em>\n *  @property {MessageMixer.State} CONNECTED - Connected to the message mixer.\n *      <em>Static. Read-only.</em>\n *  @property {MessageMixer.State} state - The current state of the connection to the message mixer.\n *      <em>Read-only.</em>\n *  @property {MessageMixer~onStateChanged|null} onStateChanged - Sets a single function to be called when the state of the\n *      message mixer changes. Set to <code>null</code> to remove the callback.\n *      <em>Write-only.</em>\n */\nclass MessageMixer extends AssignmentClient {\n    // C++  Application.cpp\n\n    // Base class developer documentation is copied here and updated for the SDK documentation.\n\n    /*@sdkdoc\n     *  <table>\n     *      <thead>\n     *          <tr><th>Name</th><th>Value</th><th>Description</th></tr>\n     *      </thead>\n     *      <tbody>\n     *          <tr><td>UNAVAILABLE</td><td><code>0</code></td><td>There is no message mixer available - you're not connected to\n     *              a domain or the domain doesn't have a message mixer running.</td></tr>\n     *          <tr><td>DISCONNECTED</td><td><code>1</code></td><td>Not connected to the message mixer.</td></tr>\n     *          <tr><td>CONNECTED</td><td><code>2</code></td><td>Connected to the message mixer.</td></tr>\n     *      </tbody>\n     *  </table>\n     *  @typedef {number} MessageMixer.State\n     */\n\n    /*@sdkdoc\n     *  Called when the state of the message mixer changes.\n     *  @callback MessageMixer~onStateChanged\n     *  @param {MessageMixer.State} state - The state of the message mixer.\n     */\n\n    /*@sdkdoc\n     *  Gets the string representing a message mixer state.\n     *  <p><em>Static</em></p>\n     *  @function MessageMixer.stateToString\n     *  @param {MessageMixer.State} state - The state to get the string representation of.\n     *  @returns {string} The string representing the message mixer state if a valid state, <code>\"\"</code> if not a valid\n     *      state.\n     */\n\n    constructor(contextID: number) {\n        super(contextID, NodeType.MessagesMixer);\n    }\n\n}\n\nexport default MessageMixer;\n","//\n//  Vircadia.ts\n//\n//  Vircadia Web SDK.\n//\n//  Created by David Rowe on 9 May 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\n/*@sdkdoc\n *  The <code>Vircadia</code> API provides information on the Vircadia SDK.\n *\n *  @namespace Vircadia\n *  @property {string} version - The version number of the SDK. <em>Read-only.</em>\n */\nconst Vircadia = new class {\n\n    readonly #_version = \"0.0.2\";  // Version number is also in package.json.\n\n    get version() {\n        return this.#_version;\n    }\n\n}();\n\nexport default Vircadia;\nexport { Vircadia };\nexport { default as DomainServer, ConnectionState } from \"./DomainServer\";\nexport { default as AudioMixer } from \"./AudioMixer\";\nexport { default as AvatarMixer } from \"./AvatarMixer\";\nexport { default as MessageMixer } from \"./MessageMixer\";\nexport { AssignmentClientState } from \"./domain/AssignmentClient\";"],"names":["CryptoJS","module","exports","C","BlockCipher","lib","C_algo","algo","SBOX","INV_SBOX","SUB_MIX_0","SUB_MIX_1","SUB_MIX_2","SUB_MIX_3","INV_SUB_MIX_0","INV_SUB_MIX_1","INV_SUB_MIX_2","INV_SUB_MIX_3","d","i","x","xi","sx","x2","x4","x8","t","RCON","AES","extend","_doReset","this","_nRounds","_keyPriorReset","_key","key","keyWords","words","keySize","sigBytes","ksRows","keySchedule","_keySchedule","ksRow","invKeySchedule","_invKeySchedule","invKsRow","encryptBlock","M","offset","_doCryptBlock","decryptBlock","nRounds","s0","s1","s2","s3","round","t0","t1","t2","t3","_createHelper","C_lib","Base","WordArray","BufferedBlockAlgorithm","C_enc","Base64","EvpKDF","Cipher","C_mode","BlockCipherMode","CBC","Pkcs7","CipherParams","OpenSSLFormatter","SerializableCipher","OpenSSLKdf","PasswordBasedCipher","enc","Utf8","cfg","createEncryptor","create","_ENC_XFORM_MODE","createDecryptor","_DEC_XFORM_MODE","init","xformMode","_xformMode","reset","call","process","dataUpdate","_append","_process","finalize","_doFinalize","ivSize","selectCipherStrategy","cipher","encrypt","message","decrypt","ciphertext","StreamCipher","blockSize","mode","iv","Encryptor","Decryptor","_cipher","_iv","xorBlock","block","_prevBlock","processBlock","slice","thisBlock","pad","data","blockSizeBytes","nPaddingBytes","paddingWord","paddingWords","push","padding","concat","unpad","modeCreator","_minBufferSize","_mode","__creator","_doProcessBlock","finalProcessedBlocks","_data","cipherParams","mixIn","toString","formatter","stringify","format","OpenSSL","salt","parse","openSSLStr","ciphertextWords","splice","encryptor","cipherCfg","algorithm","_parse","kdf","execute","password","random","compute","derivedParams","Math","undefined","crypto","window","self","globalThis","msCrypto","g","err","cryptoSecureRandomInt","getRandomValues","Uint32Array","randomBytes","readInt32LE","Error","Object","F","obj","subtype","prototype","overrides","hasOwnProperty","$super","apply","arguments","instance","properties","propertyName","clone","length","encoder","Hex","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","thatByte","j","ceil","nBytes","hexChars","bite","join","hexStr","hexStrLength","parseInt","substr","Latin1","latin1Chars","String","fromCharCode","latin1Str","latin1StrLength","charCodeAt","decodeURIComponent","escape","e","utf8Str","unescape","encodeURIComponent","_nDataBytes","doFlush","processedWords","dataWords","dataSigBytes","nBlocksReady","nWordsReady","max","nBytesReady","min","Hasher","update","messageUpdate","hasher","_createHmacHelper","HMAC","map","_map","base64Chars","triplet","charAt","paddingChar","base64Str","base64StrLength","reverseMap","_reverseMap","paddingIndex","indexOf","bitsCombined","parseLoop","Base64url","urlSafe","_safe_map","swapEndian","word","Utf16","Utf16BE","utf16Chars","codePoint","utf16Str","utf16StrLength","Utf16LE","MD5","iterations","derivedKey","derivedKeyWords","input","_hasher","hasherBlockSize","hasherBlockSizeBytes","oKey","_oKey","iKey","_iKey","oKeyWords","iKeyWords","innerHash","ArrayBuffer","superInit","subInit","typedArray","Uint8Array","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Float32Array","Float64Array","buffer","byteOffset","byteLength","typedArrayByteLength","T","abs","sin","_hash","offset_i","M_offset_i","H","M_offset_0","M_offset_1","M_offset_2","M_offset_3","M_offset_4","M_offset_5","M_offset_6","M_offset_7","M_offset_8","M_offset_9","M_offset_10","M_offset_11","M_offset_12","M_offset_13","M_offset_14","M_offset_15","a","b","c","FF","GG","HH","II","nBitsTotal","nBitsLeft","nBitsTotalH","floor","nBitsTotalL","hash","H_i","s","n","HmacMD5","CFB","generateKeystreamAndEncrypt","keystream","CTRGladman","incWord","b1","b2","b3","counter","_counter","incCounter","CTR","ECB","OFB","_keystream","AnsiX923","lastBytePos","Ansix923","Iso10126","Iso97971","ZeroPadding","NoPadding","SHA1","PBKDF2","hmac","blockIndex","blockIndexWords","blockWords","blockWordsLength","intermediate","intermediateWords","S","C_","G","RabbitLegacy","K","X","_X","_C","_b","nextState","IV","IV_0","IV_1","i0","i2","i1","i3","gx","ga","gb","gh","gl","Rabbit","RC4","keySigBytes","_S","keyByteIndex","keyByte","_i","_j","generateKeystreamWord","keystreamWord","RC4Drop","drop","_zl","_zr","_sl","_sr","_hl","_hr","RIPEMD160","al","bl","cl","dl","el","ar","br","cr","dr","er","hl","hr","zl","zr","sl","sr","f1","f2","f3","f4","f5","rotl","y","z","HmacRIPEMD160","W","HmacSHA1","SHA256","SHA224","HmacSHA224","isPrime","sqrtN","sqrt","factor","getFractionalBits","nPrime","pow","f","h","gamma0x","gamma0","gamma1x","gamma1","maj","sigma0","HmacSHA256","X64Word","x64","Word","RHO_OFFSETS","PI_INDEXES","ROUND_CONSTANTS","newY","LFSR","roundConstantMsw","roundConstantLsw","bitPosition","SHA3","outputLength","state","_state","nBlockSizeLanes","M2i","M2i1","lane","high","low","tMsw","tLsw","Tx","Tx4","Tx1","Tx1Msw","Tx1Lsw","laneIndex","laneMsw","laneLsw","rhoOffset","TPiLane","T0","state0","TLane","Tx1Lane","Tx2Lane","roundConstant","blockSizeBits","outputLengthBytes","outputLengthLanes","hashWords","HmacSHA3","C_x64","X64WordArray","SHA512","SHA384","HmacSHA384","X64Word_create","H0","H1","H2","H3","H4","H5","H6","H7","H0h","H0l","H1h","H1l","H2h","H2l","H3h","H3l","H4h","H4l","H5h","H5l","H6h","H6l","H7h","H7l","ah","bh","ch","dh","eh","fh","fl","hh","Wil","Wih","Wi","gamma0xh","gamma0xl","gamma0h","gamma0l","gamma1xh","gamma1xl","gamma1h","gamma1l","Wi7","Wi7h","Wi7l","Wi16","Wi16h","Wi16l","t1l","chh","chl","majh","majl","sigma0h","sigma0l","sigma1h","sigma1l","Ki","Kih","Kil","t1h","t2l","toX32","HmacSHA512","PC1","PC2","BIT_SHIFTS","SBOX_P","SBOX_MASK","DES","keyBits","keyBitPos","subKeys","_subKeys","nSubKey","subKey","bitShift","invSubKeys","_invSubKeys","_lBlock","_rBlock","exchangeLR","exchangeRL","lBlock","rBlock","mask","TripleDES","key1","key2","key3","_des1","_des2","_des3","X32WordArray","x64Words","x64WordsLength","x32Words","x64Word","wordsLength","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","definition","o","defineProperty","enumerable","get","Function","prop","scriptUrl","import","meta","url","replace","p","assertion","info","Set","connect","slot","add","disconnect","delete","emit","params","forEach","setTimeout","Uuid","BigInt","static","constructor","value","setPrototypeOf","valueOf","hexadecimal","handleLookupString","address","sanitizedAddress","trim","getPlaceName","possibleDomainChangeRequired","SocketTypeValue","SocketType","Unknown","UDP","WebRTC","socketTypeToString","socketType","type","port","setObjectName","name","objectName","setType","getType","setAddress","getAddress","setPort","getPort","isNull","isEqualTo","otherAddr","ipNumbers","NodePermissions","permissions","MAX_PACKET_SIZE","CONTROL_BIT_MASK","RELIABILITY_BIT_MASK","MESSAGE_BIT_MASK","OBFUSCATION_LEVEL_BIT_MASK","SEQUENCE_NUMBER_BIT_MASK","OBFUSCATION_LEVEL_OFFSET","PACKET_POSITION_OFFSET","LITTLE_ENDIAN","BIG_ENDIAN","MAX_U128_VALUE","SHIFT_64_BITS","MASK_64_BITS","DataView","setBigUint128","littleEndian","sanitizedValue","setBigUint64","getBigUint128","result","getBigUint64","read","dataPosition","domainUUID","domainLocalID","getUint16","newUUID","newLocalID","newPermissions","getUint32","isAuthenticated","getUint8","connectRequestTimestamp","domainServerPingSendTime","domainServerCheckinProcessingTime","newConnection","nodes","uuid","publicSocket","localSocket","isReplicated","sessionLocalID","connectionSecretUUID","pingType","timestamp","connectionID","PacketTypeValue","PacketType","StunResponse","DomainList","Ping","PingReply","KillAvatar","AvatarData","InjectAudio","MixedAudio","MicrophoneAudioNoEcho","MicrophoneAudioWithEcho","BulkAvatarData","SilentAudioFrame","DomainListRequest","RequestAssignment","CreateAssignment","DomainConnectionDenied","MuteEnvironment","AudioStreamStats","DomainServerPathQuery","DomainServerPathResponse","DomainServerAddedNode","ICEServerPeerInformation","ICEServerQuery","OctreeStats","SetAvatarTraits","InjectorGainSet","AssignmentClientStatus","NoisyMute","AvatarIdentity","NodeIgnoreRequest","DomainConnectRequest","DomainServerRequireDTLS","NodeJsonStats","OctreeDataNack","StopNode","AudioEnvironment","EntityEditNack","ICEServerHeartbeat","ICEPing","ICEPingReply","EntityData","EntityQuery","EntityAdd","EntityErase","EntityEdit","DomainServerConnectionToken","DomainSettingsRequest","DomainSettings","AssetGet","AssetGetReply","AssetUpload","AssetUploadReply","AssetGetInfo","AssetGetInfoReply","DomainDisconnectRequest","DomainServerRemovedNode","MessagesData","MessagesSubscribe","MessagesUnsubscribe","ICEServerHeartbeatDenied","AssetMappingOperation","AssetMappingOperationReply","ICEServerHeartbeatACK","NegotiateAudioFormat","SelectedAudioFormat","MoreEntityShapes","NodeKickRequest","NodeMuteRequest","RadiusIgnoreRequest","UsernameFromIDRequest","UsernameFromIDReply","AvatarQuery","RequestsDomainListData","PerAvatarGainSet","EntityScriptGetStatus","EntityScriptGetStatusReply","ReloadEntityServerScript","EntityPhysics","EntityServerScriptLog","AdjustAvatarSorting","OctreeFileReplacement","CollisionEventChanges","ReplicatedMicrophoneAudioNoEcho","ReplicatedMicrophoneAudioWithEcho","ReplicatedInjectAudio","ReplicatedSilentAudioFrame","ReplicatedAvatarIdentity","ReplicatedKillAvatar","ReplicatedBulkAvatarData","DomainContentReplacementFromUrl","ChallengeOwnership","EntityScriptCallMethod","ChallengeOwnershipRequest","ChallengeOwnershipReply","OctreeDataFileRequest","OctreeDataFileReply","OctreeDataPersist","EntityClone","EntityQueryInitialResultsComplete","BulkAvatarTraits","AudioSoloRequest","BulkAvatarTraitsAck","StopInjector","AvatarZonePresence","WebRTCSignaling","HasConnectReason","SocketTypes","IncludesExtraInfo","HasCompressedSystemInfo","PreSocketTypes","StopInjectors","versionForPacketType","packetType","console","error","getNonVerifiedPackets","getNonSourcedPackets","AuthMethod","HMACAuth","authMethod","setKey","uuidKey","keyBytes","calculateHash","hashResult","dataLen","bytes","dataView","setInt32","NodeTypeValue","NodeType","DomainServer","EntityServer","Agent","AudioMixer","AvatarMixer","AssetServer","MessagesMixer","EntityScriptServer","UpstreamAudioMixer","UpstreamAvatarMixer","DownstreamAudioMixer","DownstreamAvatarMixer","Unassigned","getNodeTypeName","nodeType","isUpstream","_publicSocket","_localSocket","getUUID","setUUID","getLocalID","setLocalID","localID","getPublicSocket","setPublicSocket","wasOldSocketNull","previousSocket","log","socketUpdated","getLocalSocket","setLocalSocket","activateLocalSocket","activatePublicSocket","getActiveSocket","socketActivated","discoveredSocket","super","typeString","getAuthenticateHash","getPermissions","setPermissions","getConnectionSecret","setConnectionSecret","connectionSecret","getIsReplicated","setIsReplicated","getIsUpstream","setIsUpstream","packetSize","senderSockAddr","receiveTime","isReliable","isPartOfMessage","obfuscationLevel","sequenceNumber","messageNumber","packetPosition","messagePartNumber","version","sourceID","numPackets","isComplete","firstPacketReceiveTime","other","keys","property","seal","headData","BasePacket","_messageData","param0","param1","param2","size","maxPayload","maxPayloadSize","getMessageData","getDataSize","setReceiveTime","time","getReceiveTime","adjustPayloadStartAndCapacity","headerSize","Packet","ONLY","FIRST","MIDDLE","LAST","NoObfuscation","ObfuscationL1","ObfuscationL2","ObfuscationL3","totalHeaderSize","ObfuscationLevel","warn","seqNumBitField","PacketPosition","setUint32","messageNumberAndBitField","NLPacket","packet","nonSourced","has","nonVerified","param3","param4","getVersion","getSourceID","writeSourceID","setUint16","writeVerificationHash","hmacAuth","verificationHash","set","messageData","headerOffset","setUint8","write","timestampPing","timestampReply","AudioConstants","SAMPLE_RATE","STEREO","NETWORK_FRAME_SAMPLES_STEREO","NETWORK_FRAME_SAMPLES_PER_CHANNEL","NETWORK_FRAME_SECS","NETWORK_FRAME_MSECS","textDecoder","TextDecoder","codecNameSize","codecName","decode","numAudioSamples","audioBuffer","isStereo","audioPosition","audioOrientation","avatarBoundingBoxCorner","avatarBoundingBoxScale","setFloat32","w","numSilentSamples","currentTime","ownerType","publicSockAddr","localSockAddr","nodeTypesOfInterest","values","placeName","isDomainConnected","username","usernameSignature","domainUsername","domainTokens","reasonCode","reasonSize","reasonMessage","extraInfoSize","extraInfo","connectUUID","protocolVersionSig","hardwareAddress","machineFingerprint","compressedSystemInfo","connectReason","previousConnectionUptime","nodeUUID","codecs","codec","selectedCodecNameSize","selectedCodecName","DomainHandler","ProtocolMismatch","LoginErrorMetaverse","NotAuthorizedMetaverse","TooManyUsers","TimedOut","LoginErrorDomain","NotAuthorizedDomain","parent","getURL","getSockAddr","isConnected","setIsConnected","forceDisconnect","connectedToDomain","disconnectedFromDomain","reason","clear","checkInPacketTimeout","softReset","processDomainServerConnectionDeniedPacket","getMessage","sanitizedExtraInfo","toLowerCase","startsWith","setRedirectErrorState","setURLAndID","domainURL","domainID","errorUrl","domainConnectionRefused","sendUnreliablePacket","getMachineFingerprint","createContext","Map","contextID","dependencyType","context","contextItemType","dependencyObject","args","newDependency","listener","sourced","deliverPending","registerListener","handleVerifiedPacket","nlPacket","receivedMessage","getSenderSockAddr","justReceived","messageListener","matchingNode","nodeWithLocalID","WebRTCSignalingChannel","websocketURL","WebSocket","readyState","CLOSED","onopen","callback","onmessage","event","onclose","onerror","addEventListener","eventName","send","OPEN","JSON","close","success","json","Array","WebRTCDataChannel","iceServers","urls","signalingChannel","CONNECTING","id","errorMessage","CLOSING","RTCPeerConnection","onicecandidate","candidate","to","onnegotiationneeded","async","offer","createOffer","setLocalDescription","description","localDescription","onconnectionstatechange","connectionState","createDataChannel","protocol","negotiated","ordered","maxRetransmits","binaryType","from","echo","setRemoteDescription","addIceCandidate","WebRTCSocket","UNCONNECTED","webrtcDataChannel","CONNECTED","SIGNALING","connectToHost","abort","pop","hasPendingDatagrams","readDatagram","datagram","maxSize","shift","sender","channelID","writeDatagram","dataChannel","readyRead","Socket","readPendingDatagrams","getSocketState","openSocket","clearConnections","cleanupConnection","sockAddr","writePacket","setPacketHandler","handler","handleRemoteAddressChange","previousAddress","currentAddress","Date","now","LimitedNodeList","Connect","SilentDomainDisconnect","Awake","_nodeSocket","_localSockAddr","_publicSockAddr","_packetReceiver","_useAuthentication","bind","sendPacket","destinationNode","activeSocket","overridenSockAddr","destinationSockAddr","soloNodeOfType","node","findNodeWithAddr","addr","addOrUpdateNode","oldNode","newNode","nodeWithUUID","getLocalSockAddr","getPublicSockAddr","getPacketReceiver","getSessionUUID","setSessionUUID","sessionUUID","getSessionLocalID","setSessionLocalID","getAuthenticatePackets","setAuthenticatePackets","useAuthentication","nodeAdded","nodeActivated","nodeSocketUpdated","nodeKilled","addNewNode","handleNodeKill","nextConnectionID","killNodeWithUUID","newConnectionID","killedNodes","processDomainList","processPingPacket","processDomainServerRemovedNode","getDomainHandler","addSetOfNodeTypesToNodeInterestSet","setOfNodeTypes","getNodeInterestSet","sendingNode","replyPacket","skipDomainHandlerReset","sendDomainServerCheckIn","domainServerSocketState","socketID","domainPacketType","domainSockAddr","ConnectionState","DISCONNECTED","REFUSED","ERROR","domainHandler","location","refusalInfo","errorInfo","onStateChanged","oldLocation","hasStateChanged","clearTimeout","reasonCodeInt","AssignmentClientState","AssignmentClient","UNAVAILABLE","previousState","audioOutput","stream","resume","suspend","writeData","pcmData","outputArray","index","postMessage","AudioContext","sampleRate","createMediaStreamDestination","createOscillator","audioWorklet","addModule","AudioWorkletNode","numberOfInputs","numberOfOutputs","channelCount","channelCountMode","start","AudioClient","audioInput","stop","isStarted","isSuspended","hasPendingFrame","readFrame","frame","errorString","processAudioInputMessage","createMediaStreamSource","channelInterpretation","mediaStream","getAudioTracks","numChannels","numFrames","numBlocks","numStaticJitterBlocks","parseData","selectedPCM","packetPCM","setupCodec","cleanupCodec","silentFrames","packetData","decodedBuffer","getInt16","inputDevice","setMuted","muted","isMuted","isShutdownRequest","inputDeviceAudioInfo","deviceName","label","inputDeviceAudioSettings","getSettings","sampleSize","echoCancellation","supportedFormat","then","started","negotiateFormatPacket","audioMixer","encodedAudio","audioPacket","audioOuput","MediaStream","switchInputDevice","inputMuted","play","pause","Vircadia"],"sourceRoot":""}