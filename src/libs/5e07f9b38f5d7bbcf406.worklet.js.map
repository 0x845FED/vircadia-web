{"version":3,"file":"5e07f9b38f5d7bbcf406.worklet.js","mappings":"AA0BA,MAAMA,UAA4BC,sBAGrBC,wBAA0B,IAC1BC,sBAAwB,IACxBC,0BAA4B,IAC5BC,wBAA0B,IAEnCC,cACAC,aACAC,YACAC,QACAC,YACAC,aAAe,EAEfC,YAAYC,GACRC,MAAMD,GAENE,KAAKT,cAAgBO,GAASG,aAAeH,EAAQG,aAAe,EACpED,KAAKR,aAAsC,IAAvBQ,KAAKT,cAAsBS,KAAKb,wBAA0Ba,KAAKX,0BACnFW,KAAKN,QAAU,IAAIQ,WAAWF,KAAKR,cACnCQ,KAAKL,YAAc,IAAIQ,SAASH,KAAKN,QAAQU,QAC7CJ,KAAKP,YAAqC,IAAvBO,KAAKT,cAAsBS,KAAKZ,sBAAwBY,KAAKV,wBAEhFU,KAAKK,KAAKC,UAAYN,KAAKO,UAU/BA,UAAaC,IACY,UAAjBA,EAAQC,OACRT,KAAKN,QAAU,IAAIQ,WAAWF,KAAKR,cACnCQ,KAAKL,YAAc,IAAIQ,SAASH,KAAKN,QAAQU,UAYrDM,QAAQC,GACJ,IAAKA,IAAcA,EAAU,KAAOA,EAAU,GAAG,IAA6B,IAAvBX,KAAKT,gBAAwBoB,EAAU,GAAG,GAE7F,OADAC,QAAQC,IAAI,kBACL,EAGX,MAAMC,EAAe,MACfC,GAAgB,EAEtB,IAAIC,EAAQhB,KAAKJ,aAEjB,MAAMqB,EAAoBN,EAAU,GAAG,GAAGO,OACpCC,EAAanB,KAAKP,YAExB,GAA2B,IAAvBO,KAAKT,cAAqB,CAE1B,MAAM6B,EAAYT,EAAU,GAAG,GACzBU,EAAaV,EAAU,GAAG,GAChC,IAAIW,EAAatB,KAAKL,YACtB,IAAK,IAAI4B,EAAI,EAAGA,EAAIN,EAAmBM,IACnCD,EAAWE,SAASR,EAAOI,EAAUG,GAAeT,EAAcC,GAClEO,EAAWE,SAASR,EAAQ,EAAGK,EAAWE,GAAeT,EAAcC,GACvEC,GAAS,EACLA,IAAUhB,KAAKP,cAEfO,KAAKK,KAAKoB,YAAYzB,KAAKN,QAAQU,OAAQ,CAACJ,KAAKN,QAAQU,SACzDJ,KAAKN,QAAU,IAAIQ,WAAWF,KAAKR,cACnCQ,KAAKL,YAAc,IAAIQ,SAASH,KAAKN,QAAQU,QAC7CkB,EAAatB,KAAKL,YAClBqB,EAAQ,OAGb,CAEH,MAAMU,EAAYf,EAAU,GAAG,GAC/B,IAAIW,EAAatB,KAAKL,YACtB,IAAK,IAAI4B,EAAI,EAAGA,EAAIN,EAAmBM,IACnCD,EAAWE,SAASR,EAAOU,EAAUH,GAAeT,EAAcC,GAClEC,GAAS,EACLA,IAAUG,IAEVnB,KAAKK,KAAKoB,YAAYzB,KAAKN,QAAQU,OAAQ,CAACJ,KAAKN,QAAQU,SACzDJ,KAAKN,QAAU,IAAIQ,WAAWF,KAAKR,cACnCQ,KAAKL,YAAc,IAAIQ,SAASH,KAAKN,QAAQU,QAC7CkB,EAAatB,KAAKL,YAClBqB,EAAQ,GAQpB,OAFAhB,KAAKJ,aAAeoB,GAEb,GAKfW,kBAAkB,iCAAkC1C","sources":["webpack://@vircadia/web-sdk/./src/domain/worklets/AudioInputProcessor.ts"],"sourcesContent":["//\n//  AudioInputProcessor.ts\n//\n//  Created by David Rowe on 23 Sep 2021.\n//  Copyright 2021 Vircadia contributors.\n//\n//  Distributed under the Apache License, Version 2.0.\n//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html\n//\n\n\n/*@devdoc\n *  The <code>AudioInputProcessor</code> class implements a Web Audio\n *  {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletProcessor|AudioWorkletProcessor} that takes incoming Web\n *  Audio and provides it for the SDK to use. It is used as a node in a Web Audio graph in {@link AudioInput}.\n *  <p>It runs on its own thread and buffers incoming samples as needed in order to provide the samples to the SDK in the\n *  required network frame size.</p>\n *  <p>C++: <code>N/A</code></p>\n *  @class AudioInputProcessor\n *  @param {AudioWorkletNodeOptions} options -\n *    {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletProcessor/AudioWorkletProcessor|AudioWorkletProcessor}\n *    options.\n *\n *  @property {MessagePort} port - Used to communicate between the AudioWorkletProcessor object and its internal code. See\n *    {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode/port|AudioWorkletNode.port}.\n */\nclass AudioInputProcessor extends AudioWorkletProcessor {\n\n    // FIXME: All these fields should be private (#s) but Firefox is handling transpiled code with them (Sep 2021).\n    readonly SDK_MONO_BUFFER_SAMPLES = 240;\n    readonly SDK_MONO_BUFFER_BYTES = 480;\n    readonly SDK_STEREO_BUFFER_SAMPLES = 480;\n    readonly SDK_STEREO_BUFFER_BYTES = 960;\n\n    _channelCount;\n    _samplesSize;\n    _bufferSize;\n    _buffer: Int16Array;\n    _bufferView: DataView;\n    _bufferIndex = 0;  // The next write position.\n\n    constructor(options?: AudioWorkletNodeOptions) {\n        super(options);  // eslint-disable-line\n\n        this._channelCount = options?.channelCount ? options.channelCount : 1;  // Default to mono.\n        this._samplesSize = this._channelCount === 1 ? this.SDK_MONO_BUFFER_SAMPLES : this.SDK_STEREO_BUFFER_SAMPLES;\n        this._buffer = new Int16Array(this._samplesSize);\n        this._bufferView = new DataView(this._buffer.buffer);\n        this._bufferSize = this._channelCount === 1 ? this.SDK_MONO_BUFFER_BYTES : this.SDK_STEREO_BUFFER_BYTES;\n\n        this.port.onmessage = this.onMessage;\n    }\n\n    /*@devdoc\n     *  Acts upon commands posted to the audio worklet's message port.\n     *  @function AudioInputProcessor.onMessage\n     *  @param {MessageEvent} message - The message posted to the audio worklet, with <code>message.data</code> being a string\n     *      signifying the command. The following command is expected:\n     *      <p><code>\"clear\"</code>: Clear the audio sample buffer.</p>\n     */\n    onMessage = (message: MessageEvent) => {\n        if (message.data === \"clear\") {\n            this._buffer = new Int16Array(this._samplesSize);\n            this._bufferView = new DataView(this._buffer.buffer);\n        }\n    };\n\n    /*@devdoc\n     *  Called by the Web Audio pipeline to handle the next block of input audio samples.\n     *  @param {Float32Array[][]} inputList - Input PCM audio samples.\n     *  @param {Float32Array[][]} outputList - Output PCM audio samples. <em>Not used.</em>\n     *  @param {Record<string, Float32Array>} parameters - Processing parameters. <em>Not used.</em>\n     */\n    // eslint-disable-next-line\n    // @ts-ignore\n    process(inputList: Float32Array[][] /* , outputList: Float32Array[][], parameters: Record<string, Float32Array> */) {\n        if (!inputList || !inputList[0] || !inputList[0][0] || this._channelCount === 2 && !inputList[0][1]) {\n            console.log(\"Early return!\");\n            return true;\n        }\n\n        const FLOAT_TO_INT = 32767;\n        const LITTLE_ENDIAN = true;\n\n        let index = this._bufferIndex;\n\n        const inputSamplesCount = inputList[0][0].length;\n        const bufferSize = this._bufferSize;\n\n        if (this._channelCount === 2) {\n            // Stereo.\n            const leftInput = inputList[0][0];\n            const rightInput = inputList[0][1] as Float32Array;\n            let bufferView = this._bufferView;\n            for (let i = 0; i < inputSamplesCount; i++) {\n                bufferView.setInt16(index, leftInput[i] as number * FLOAT_TO_INT, LITTLE_ENDIAN);\n                bufferView.setInt16(index + 2, rightInput[i] as number * FLOAT_TO_INT, LITTLE_ENDIAN);\n                index += 4;  // eslint-disable-line @typescript-eslint/no-magic-numbers\n                if (index === this._bufferSize) {\n                    // The output buffer is full; send it off.\n                    this.port.postMessage(this._buffer.buffer, [this._buffer.buffer]);\n                    this._buffer = new Int16Array(this._samplesSize);\n                    this._bufferView = new DataView(this._buffer.buffer);\n                    bufferView = this._bufferView;\n                    index = 0;\n                }\n            }\n        } else {\n            // Mono.\n            const monoInput = inputList[0][0];\n            let bufferView = this._bufferView;\n            for (let i = 0; i < inputSamplesCount; i++) {\n                bufferView.setInt16(index, monoInput[i] as number * FLOAT_TO_INT, LITTLE_ENDIAN);\n                index += 2;\n                if (index === bufferSize) {\n                    // The output buffer is full; send it off.\n                    this.port.postMessage(this._buffer.buffer, [this._buffer.buffer]);\n                    this._buffer = new Int16Array(this._samplesSize);\n                    this._bufferView = new DataView(this._buffer.buffer);\n                    bufferView = this._bufferView;\n                    index = 0;\n                }\n            }\n\n        }\n\n        this._bufferIndex = index;\n\n        return true;\n    }\n\n}\n\nregisterProcessor(\"vircadia-audio-input-processor\", AudioInputProcessor);\n"],"names":["AudioInputProcessor","AudioWorkletProcessor","SDK_MONO_BUFFER_SAMPLES","SDK_MONO_BUFFER_BYTES","SDK_STEREO_BUFFER_SAMPLES","SDK_STEREO_BUFFER_BYTES","_channelCount","_samplesSize","_bufferSize","_buffer","_bufferView","_bufferIndex","constructor","options","super","this","channelCount","Int16Array","DataView","buffer","port","onmessage","onMessage","message","data","process","inputList","console","log","FLOAT_TO_INT","LITTLE_ENDIAN","index","inputSamplesCount","length","bufferSize","leftInput","rightInput","bufferView","i","setInt16","postMessage","monoInput","registerProcessor"],"sourceRoot":""}